{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useOverflowObserver } from '../../effects/OverflowObserver';\nimport { parseFilename } from '../../utils/filename';\nimport Tooltip from '../Tooltip';\nimport { StyledCaptionText, StyledMultilineCaption, StyledPlaceholderCaption, StyledSingleLineCaption, StyledSinglelineCaptionBody, StyledSinglelineCaptionEnding } from './Thumbnail.styles';\n\nfunction CaptionTooltip(_a) {\n  var children = _a.children,\n      overlay = _a.overlay,\n      isVisible = _a.isVisible;\n  return React.createElement(Tooltip, {\n    overlay: React.createElement(Tooltip.Content, null, overlay),\n    placement: \"bottom\",\n    trigger: isVisible ? 'hover' : 'none'\n  }, children);\n}\n\nfunction MultilineCaption(_a) {\n  var disabled = _a.disabled,\n      caption = _a.caption,\n      error = _a.error,\n      layout = _a.layout,\n      qa = _a.qa,\n      props = __rest(_a, [\"disabled\", \"caption\", \"error\", \"layout\", \"qa\"]);\n\n  var _b = useOverflowObserver(),\n      ref = _b.ref,\n      isOverflowing = _b.isOverflowing;\n\n  return React.createElement(CaptionTooltip, {\n    overlay: caption,\n    isVisible: isOverflowing\n  }, React.createElement(\"span\", {\n    \"data-qa\": qa\n  }, React.createElement(StyledMultilineCaption, __assign({\n    ref: ref,\n    disabled: disabled,\n    error: error,\n    layout: layout\n  }, props), React.createElement(StyledCaptionText, null, caption))));\n}\n\nfunction SinglelineCaption(_a) {\n  var caption = _a.caption,\n      error = _a.error,\n      disabled = _a.disabled,\n      layout = _a.layout,\n      qa = _a.qa,\n      props = __rest(_a, [\"caption\", \"error\", \"disabled\", \"layout\", \"qa\"]);\n\n  var _b = useOverflowObserver(),\n      ref = _b.ref,\n      isOverflowing = _b.isOverflowing;\n\n  var _c = parseFilename(caption),\n      filename = _c.filename,\n      extension = _c.extension,\n      isFilename = _c.isFilename;\n\n  return React.createElement(CaptionTooltip, {\n    overlay: caption,\n    isVisible: isOverflowing\n  }, React.createElement(StyledSingleLineCaption, __assign({\n    error: error,\n    disabled: disabled,\n    layout: layout,\n    \"data-qa\": qa\n  }, props), React.createElement(StyledSinglelineCaptionBody, {\n    ref: ref\n  }, isFilename ? \"\".concat(filename, \".\") : caption), isFilename && React.createElement(StyledSinglelineCaptionEnding, null, extension)));\n}\n\nexport function ThumbnailCaption(_a) {\n  var layout = _a.layout,\n      disabled = _a.disabled,\n      error = _a.error,\n      caption = _a.caption,\n      hasCaptionPlaceholder = _a.hasCaptionPlaceholder,\n      multiline = _a.multiline,\n      _b = _a.qa,\n      qa = _b === void 0 ? '' : _b,\n      props = __rest(_a, [\"layout\", \"disabled\", \"error\", \"caption\", \"hasCaptionPlaceholder\", \"multiline\", \"qa\"]);\n\n  if (!caption) {\n    var captionPlaceholder = hasCaptionPlaceholder && '- -';\n\n    if (captionPlaceholder) {\n      return React.createElement(StyledPlaceholderCaption, __assign({}, props, {\n        disabled: disabled,\n        error: error,\n        layout: layout,\n        \"data-qa\": qa\n      }), React.createElement(StyledCaptionText, null, captionPlaceholder));\n    }\n\n    return null;\n  }\n\n  if (multiline) {\n    return React.createElement(MultilineCaption, __assign({\n      disabled: disabled,\n      caption: caption,\n      error: error,\n      layout: layout,\n      qa: qa\n    }, props));\n  }\n\n  return React.createElement(SinglelineCaption, __assign({\n    caption: caption,\n    disabled: disabled,\n    error: error,\n    layout: layout,\n    qa: qa\n  }, props));\n}","map":{"version":3,"sources":["../../../../src/components/Thumbnail/ThumbnailCaption.tsx"],"names":[],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport { useOverflowObserver } from '../../effects/OverflowObserver';\nimport { parseFilename } from '../../utils/filename';\nimport Tooltip from '../Tooltip';\nimport { StyledCaptionText, StyledMultilineCaption, StyledPlaceholderCaption, StyledSingleLineCaption, StyledSinglelineCaptionBody, StyledSinglelineCaptionEnding, } from './Thumbnail.styles';\nfunction CaptionTooltip(_a) {\n    var children = _a.children, overlay = _a.overlay, isVisible = _a.isVisible;\n    return (React.createElement(Tooltip, { overlay: React.createElement(Tooltip.Content, null, overlay), placement: \"bottom\", trigger: isVisible ? 'hover' : 'none' }, children));\n}\nfunction MultilineCaption(_a) {\n    var disabled = _a.disabled, caption = _a.caption, error = _a.error, layout = _a.layout, qa = _a.qa, props = __rest(_a, [\"disabled\", \"caption\", \"error\", \"layout\", \"qa\"]);\n    var _b = useOverflowObserver(), ref = _b.ref, isOverflowing = _b.isOverflowing;\n    return (React.createElement(CaptionTooltip, { overlay: caption, isVisible: isOverflowing },\n        React.createElement(\"span\", { \"data-qa\": qa },\n            React.createElement(StyledMultilineCaption, __assign({ ref: ref, disabled: disabled, error: error, layout: layout }, props),\n                React.createElement(StyledCaptionText, null, caption)))));\n}\nfunction SinglelineCaption(_a) {\n    var caption = _a.caption, error = _a.error, disabled = _a.disabled, layout = _a.layout, qa = _a.qa, props = __rest(_a, [\"caption\", \"error\", \"disabled\", \"layout\", \"qa\"]);\n    var _b = useOverflowObserver(), ref = _b.ref, isOverflowing = _b.isOverflowing;\n    var _c = parseFilename(caption), filename = _c.filename, extension = _c.extension, isFilename = _c.isFilename;\n    return (React.createElement(CaptionTooltip, { overlay: caption, isVisible: isOverflowing },\n        React.createElement(StyledSingleLineCaption, __assign({ error: error, disabled: disabled, layout: layout, \"data-qa\": qa }, props),\n            React.createElement(StyledSinglelineCaptionBody, { ref: ref }, isFilename ? \"\".concat(filename, \".\") : caption),\n            isFilename && (React.createElement(StyledSinglelineCaptionEnding, null, extension)))));\n}\nexport function ThumbnailCaption(_a) {\n    var layout = _a.layout, disabled = _a.disabled, error = _a.error, caption = _a.caption, hasCaptionPlaceholder = _a.hasCaptionPlaceholder, multiline = _a.multiline, _b = _a.qa, qa = _b === void 0 ? '' : _b, props = __rest(_a, [\"layout\", \"disabled\", \"error\", \"caption\", \"hasCaptionPlaceholder\", \"multiline\", \"qa\"]);\n    if (!caption) {\n        var captionPlaceholder = hasCaptionPlaceholder && '- -';\n        if (captionPlaceholder) {\n            return (React.createElement(StyledPlaceholderCaption, __assign({}, props, { disabled: disabled, error: error, layout: layout, \"data-qa\": qa }),\n                React.createElement(StyledCaptionText, null, captionPlaceholder)));\n        }\n        return null;\n    }\n    if (multiline) {\n        return (React.createElement(MultilineCaption, __assign({ disabled: disabled, caption: caption, error: error, layout: layout, qa: qa }, props)));\n    }\n    return (React.createElement(SinglelineCaption, __assign({ caption: caption, disabled: disabled, error: error, layout: layout, qa: qa }, props)));\n}\n"]},"metadata":{},"sourceType":"module"}