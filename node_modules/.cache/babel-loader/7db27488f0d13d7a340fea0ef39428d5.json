{"ast":null,"code":"var __makeTemplateObject = this && this.__makeTemplateObject || function (cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n};\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useDeprecation } from '../../effects/Deprecation';\nimport { colors } from '../../styles/colors';\nimport { getTypographyIntent } from '../Typography/Typography.styles';\nvar variantColorMap = {\n  required: 'orange50',\n  error: 'red50',\n  pagination: 'gray45'\n};\nvar StyledNotation = styled.i(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  \", \"\\n  color: \", \";\\n  font-style: italic;\\n\"], [\"\\n  \", \"\\n  color: \", \";\\n  font-style: italic;\\n\"\n/**\n * @deprecated Please use `<Typography italic />` component for plain text\n * notations or the `<Required />` component for required notations. `Notation`\n * will be removed in a future version.\n */\n])), getTypographyIntent('small'), function (_a) {\n  var variant = _a.variant;\n  return variant ? colors[variantColorMap[variant]] : colors.gray15;\n});\n/**\n * @deprecated Please use `<Typography italic />` component for plain text\n * notations or the `<Required />` component for required notations. `Notation`\n * will be removed in a future version.\n */\n\nexport var Notation = React.forwardRef(function Notation(_a, ref) {\n  var children = _a.children,\n      _b = _a.variant,\n      variant = _b === void 0 ? '' : _b,\n      props = __rest(_a, [\"children\", \"variant\"]);\n\n  useDeprecation({\n    oldThing: 'Notation',\n    newThing: 'Typography or Required'\n  });\n  return React.createElement(StyledNotation, __assign({}, props, {\n    variant: variant,\n    ref: ref\n  }), children);\n});\nNotation.displayName = 'Notation';\nexport default Notation;\nvar templateObject_1;","map":{"version":3,"sources":["../../../../src/components/Notation/Notation.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAP,MAAmB,mBAAnB;AACA,SAAS,cAAT,QAA+B,2BAA/B;AACA,SAAS,MAAT,QAAuB,qBAAvB;AAEA,SAAS,mBAAT,QAAoC,iCAApC;AAGA,IAAM,eAAe,GAAG;AACtB,EAAA,QAAQ,EAAE,UADY;AAEtB,EAAA,KAAK,EAAE,OAFe;AAGtB,EAAA,UAAU,EAAE;AAHU,CAAxB;AAMA,IAAM,cAAc,GAAG,MAAM,CAAC,CAAP,CAAQ,gBAAA,KAAA,gBAAA,GAAA,oBAAA,CAAA,CAAA,MAAA,EAAA,aAAA,EAAA,4BAAA,CAAA,EAAA,CAAe,MAAf,EACC,aADD,EAG+B;AAG9D;;;;AAIG;AAV4B,CAAA,CAAA,CAAR,EACnB,mBAAmB,CAAC,OAAD,CADA,EAEZ,UAAC,EAAD,EAAY;MAAT,OAAO,GAAA,EAAA,CAAA,O;AACjB,SAAA,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,OAAD,CAAhB,CAAT,GAAsC,MAAM,CAAC,MAApD;AAA0D,CAHvC,CAAvB;AAMA;;;;AAIG;;AACH,OAAO,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAN,CAGtB,SAAS,QAAT,CAAkB,EAAlB,EAAwD,GAAxD,EAA2D;AAAvC,MAAA,QAAQ,GAAA,EAAA,CAAA,QAAR;AAAA,MAAU,EAAA,GAAA,EAAA,CAAA,OAAV;AAAA,MAAU,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAAtB;AAAA,MAA2B,KAAK,GAAA,MAAA,CAAA,EAAA,EAAlC,CAAA,UAAA,EAAA,SAAA,CAAkC,CAAhC;;AACpB,EAAA,cAAc,CAAC;AAAE,IAAA,QAAQ,EAAE,UAAZ;AAAwB,IAAA,QAAQ,EAAE;AAAlC,GAAD,CAAd;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,QAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,OAAO,EAAE,OAAX;AAAoB,IAAA,GAAG,EAAE;AAAzB,GAAV,CAAf,EACG,QADH,CADF;AAKD,CAXuB,CAAjB;AAaP,QAAQ,CAAC,WAAT,GAAuB,UAAvB;AAEA,eAAe,QAAf","sourcesContent":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useDeprecation } from '../../effects/Deprecation';\nimport { colors } from '../../styles/colors';\nimport { getTypographyIntent } from '../Typography/Typography.styles';\nvar variantColorMap = {\n    required: 'orange50',\n    error: 'red50',\n    pagination: 'gray45',\n};\nvar StyledNotation = styled.i(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  \", \"\\n  color: \", \";\\n  font-style: italic;\\n\"], [\"\\n  \", \"\\n  color: \", \";\\n  font-style: italic;\\n\"\n    /**\n     * @deprecated Please use `<Typography italic />` component for plain text\n     * notations or the `<Required />` component for required notations. `Notation`\n     * will be removed in a future version.\n     */\n])), getTypographyIntent('small'), function (_a) {\n    var variant = _a.variant;\n    return variant ? colors[variantColorMap[variant]] : colors.gray15;\n});\n/**\n * @deprecated Please use `<Typography italic />` component for plain text\n * notations or the `<Required />` component for required notations. `Notation`\n * will be removed in a future version.\n */\nexport var Notation = React.forwardRef(function Notation(_a, ref) {\n    var children = _a.children, _b = _a.variant, variant = _b === void 0 ? '' : _b, props = __rest(_a, [\"children\", \"variant\"]);\n    useDeprecation({ oldThing: 'Notation', newThing: 'Typography or Required' });\n    return (React.createElement(StyledNotation, __assign({}, props, { variant: variant, ref: ref }), children));\n});\nNotation.displayName = 'Notation';\nexport default Notation;\nvar templateObject_1;\n"]},"metadata":{},"sourceType":"module"}