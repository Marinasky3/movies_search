{"ast":null,"code":"import { getFormatterLocale } from '../../utils/i18n';\nimport { fillDecimalScaleVariant } from './NumberInput.types';\nexport var defaultLocale = 'en-US';\nexport var minus = '-';\nexport var emptyString = '';\nexport var leftBrace = '(';\nexport var rightBrace = ')';\nexport var backspaceKey = 'Backspace';\nexport var deleteKey = 'Delete';\nexport var numericKeypadDel = 'Del'; // for delete key from numeric keypad in IE\n\nexport var periodKey = '.';\nexport var numericKeypadDecimal = 'Decimal'; // for period key from numeric keypad in IE\n\nexport var numericKeypadKey = 'Del'; // for delete key from numeric keypad in IE\n\nexport var androidUnidentifiedKey = 'Unidentified';\nexport var maxDigitLength = 15; // Safe length to avoid the loss of precision\n\nexport var maxDecimalScale = maxDigitLength - 1;\nexport var commaKey = ',';\nexport var metaKeyIdentifier = 'Meta';\nexport var controlKey = 'Control';\nexport var highlightAllKey = 'a';\nexport var copyKey = 'c'; // fixes binary rounding issues (e.g: (0.615).toFixed(2) returns 0.61)\n\nexport function toFixed(value, precision) {\n  var isExponentialRecord = value.toString().includes('e');\n  if (isExponentialRecord) return value;\n  return Number(Number(Math.round(Number(value + 'e' + precision)) + 'e-' + precision).toFixed(precision));\n}\nexport function formatterFactory(formatterLocale, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  try {\n    return new Intl.NumberFormat(formatterLocale, options);\n  } catch (error) {\n    console.error(\"@procore/core-react Intl.NumberFormat error for locale \".concat(formatterLocale, \". Will fall back to en-US\"), error);\n    return new Intl.NumberFormat('en-US', options);\n  }\n}\nexport function getSeparators(locale) {\n  var formatterLocale = getFormatterLocale(locale);\n  var formatter = formatterFactory(formatterLocale);\n  var value = formatter.format(1e9 + 0.1);\n  var refinedValue = value.replace(new RegExp(/\\d/, 'g'), emptyString);\n  return {\n    decimal: refinedValue.slice(-1),\n    group: refinedValue.slice(-2, -1)\n  };\n} // Check if a valid numeric string is a negative value\n\nexport var isValidNegative = function (value) {\n  var _a;\n\n  value = String(value);\n  var minusRegExp = new RegExp(\"\".concat(minus), 'g');\n  var numberOfMinuses = (_a = value.match(minusRegExp)) === null || _a === void 0 ? void 0 : _a.length;\n  var containsValidParenthesis = value.indexOf(leftBrace) === 0 && value.indexOf(rightBrace) === value.length - 1;\n  var isNegative = numberOfMinuses === 1 && !containsValidParenthesis || !numberOfMinuses && containsValidParenthesis;\n  return isNegative;\n};\nexport function verifyDecimalScale(decimalScale) {\n  if (decimalScale === true) {\n    return maxDecimalScale;\n  }\n\n  if (decimalScale === false) {\n    return 0;\n  }\n\n  if (decimalScale < 0) {\n    console.warn(\"WARNING: Decimal scale (\".concat(decimalScale, \") is out of range. It was reset to 0. Possible values are from 0 to \").concat(maxDecimalScale, \".\"));\n    return 0;\n  }\n\n  if (decimalScale > maxDecimalScale) {\n    console.warn(\"WARNING: Decimal scale (\".concat(decimalScale, \") is out of range. It was reset to the max value of \").concat(maxDecimalScale, \". Possible values are from 0 to \").concat(maxDecimalScale, \".\"));\n    return maxDecimalScale;\n  }\n\n  return decimalScale;\n}\nexport function unformat(locale, value, isNumericString) {\n  if (isNumericString === void 0) {\n    isNumericString = false;\n  }\n\n  var isValueNegative = isValidNegative(value);\n  var decimal = isNumericString || typeof value === 'number' ? periodKey : getSeparators(locale).decimal;\n  var numericRegExp = new RegExp(\"[^0-9\".concat(decimal, \"]\"), 'g');\n  var strValue = String(value); // Normalize value with numeric characters\n\n  strValue = strValue.replace(numericRegExp, emptyString); // Normalize \"minus\" sign for negatives\n\n  if (isValueNegative) {\n    strValue = \"\".concat(minus).concat(strValue);\n  } // Normalize integer and fraction parts of the value\n\n\n  var _a = strValue.split(decimal),\n      integer = _a[0],\n      fractions = _a.slice(1);\n\n  var fraction = fractions.join(emptyString);\n  return {\n    integer: integer,\n    decimal: strValue.includes(decimal) ? decimal : emptyString,\n    fraction: fraction,\n    parsedNumber: parseFloat(\"\".concat(integer).concat(periodKey).concat(fraction))\n  };\n}\nexport function refineIntegerFromLeadingZeroes(integer) {\n  var isNegativeValue = isValidNegative(integer);\n  var refinedFromMinus = integer.replace(minus, emptyString);\n  var hasLeadingZeroes = refinedFromMinus.slice(0, 1);\n  var refinedFromLeadingZeroes = refinedFromMinus.replace(/^0+/, emptyString);\n  var zeroPadded = hasLeadingZeroes && refinedFromLeadingZeroes === emptyString;\n  return \"\".concat(isNegativeValue ? minus : emptyString).concat(zeroPadded ? 0 : refinedFromLeadingZeroes);\n}\nexport function getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString) {\n  if (decimalScale === void 0) {\n    decimalScale = 0;\n  }\n\n  if (fillDecimalScale === void 0) {\n    fillDecimalScale = fillDecimalScaleVariant.none;\n  }\n\n  if (isNumericString === void 0) {\n    isNumericString = false;\n  }\n\n  var isNegativeValue = isValidNegative(value);\n\n  var _a = unformat(locale, value, isNumericString),\n      integer = _a.integer,\n      decimal = _a.decimal,\n      fraction = _a.fraction;\n\n  var integerRefinedFromLeadingZeros = refineIntegerFromLeadingZeroes(integer);\n\n  var getIntegerLength = function () {\n    var accountEmptyInteger = integer === emptyString && decimal && fraction.length > 0;\n    if (accountEmptyInteger) return 1;\n    var accountEmptyNegativeInteger = integer === minus && decimal && fraction.length > 0;\n    if (accountEmptyNegativeInteger) return 2;\n    var accountInteger = integer.length > 0 && integer !== emptyString && integer !== minus;\n    if (accountInteger) return integerRefinedFromLeadingZeros.length;\n    return 0;\n  };\n\n  var integerLength = getIntegerLength();\n  var fractionLength = fraction.length;\n  var length = integerLength + fractionLength;\n  var safeLength = maxDigitLength + (isNegativeValue ? 1 : 0);\n  var isSafeLength = safeLength - length > -1;\n  var isDecimalScaleNonFillable = fillDecimalScale === fillDecimalScaleVariant.none;\n  var safeIntegerLength = isDecimalScaleNonFillable ? safeLength : safeLength - decimalScale;\n  var safeFractionLength = isDecimalScaleNonFillable ? Math.min(safeLength - integerRefinedFromLeadingZeros.slice(0, safeIntegerLength).length, decimalScale) : decimalScale;\n  var isSafeIntegerLength = safeIntegerLength - integerLength > -1;\n  var isSafeFractionLength = safeFractionLength - fractionLength > -1;\n  var safelyTruncatedInteger = isSafeIntegerLength ? integerRefinedFromLeadingZeros : integerRefinedFromLeadingZeros.slice(0, safeIntegerLength);\n  var safelyTruncatedFraction = isSafeFractionLength ? fraction : fraction.slice(0, safeFractionLength);\n  var safelyTruncatedValue = \"\".concat(safelyTruncatedInteger).concat(decimal).concat(safelyTruncatedFraction);\n  return {\n    length: length,\n    safeLength: safeLength,\n    isSafeLength: isSafeLength,\n    safelyTruncatedValue: safelyTruncatedValue,\n    integerLength: integerLength,\n    safeIntegerLength: safeIntegerLength,\n    isSafeIntegerLength: isSafeIntegerLength,\n    fractionLength: fractionLength,\n    safeFractionLength: safeFractionLength,\n    isSafeFractionLength: isSafeFractionLength\n  };\n}\nexport function format(locale, decimalScale, fillDecimalScale, value, isNumericString) {\n  if (isNumericString === void 0) {\n    isNumericString = false;\n  }\n\n  var fixedDecimalScale = fillDecimalScale === fillDecimalScaleVariant.always;\n  var fillDecimalScaleOnBlur = fillDecimalScale === fillDecimalScaleVariant.onBlur;\n  var autoFilledScale = fixedDecimalScale || fillDecimalScaleOnBlur;\n\n  var _a = getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString),\n      length = _a.length,\n      safeLength = _a.safeLength,\n      isSafeLength = _a.isSafeLength,\n      safelyTruncatedValue = _a.safelyTruncatedValue;\n\n  var isTruncatedBeforeFormatting = autoFilledScale || !isSafeLength;\n  var valueOfVerifiedLength = isTruncatedBeforeFormatting ? safelyTruncatedValue : value;\n\n  var _b = unformat(locale, valueOfVerifiedLength, isNumericString || typeof value === 'number'),\n      integer = _b.integer,\n      decimal = _b.decimal,\n      fraction = _b.fraction;\n\n  var options = {\n    minimumFractionDigits: fixedDecimalScale ? decimalScale : Math.min(Math.max(0, (fraction === null || fraction === void 0 ? void 0 : fraction.length) || 0), decimalScale),\n    maximumFractionDigits: decimalScale\n  };\n  var formatterLocale = getFormatterLocale(locale);\n  var formatter = formatterFactory(formatterLocale, options);\n  var isDecimalAllowed = decimalScale > 0;\n  var isEmptyValue = integer === emptyString && !decimal && !fraction;\n  if (isEmptyValue) return emptyString;\n  var isMinusValue = integer === minus && !decimal && !fraction;\n  if (isMinusValue) return minus;\n  var isDecimalValue = integer === emptyString && decimal && !fraction && !fixedDecimalScale;\n  if (isDecimalValue) return isDecimalAllowed ? decimal : emptyString;\n  var isMinusDecimalValue = integer === minus && decimal && !fraction && !fixedDecimalScale;\n  if (isMinusDecimalValue) return \"\".concat(minus).concat(isDecimalAllowed ? decimal : emptyString);\n  var isFractionValueWithEmptyInteger = (integer === minus || integer === emptyString) && decimal && (fraction || !fraction && fixedDecimalScale);\n\n  if (isFractionValueWithEmptyInteger) {\n    var numberOfZerosToPad = decimalScale - fraction.length;\n    var preparedFraction = numberOfZerosToPad > 0 && fixedDecimalScale ? fraction.concat(Array.from({\n      length: numberOfZerosToPad\n    }, function (_) {\n      return '0';\n    }).join(emptyString)) : fraction.slice(0, decimalScale);\n    return \"\".concat(integer).concat(isDecimalAllowed ? decimal : emptyString).concat(preparedFraction);\n  }\n\n  if (typeof valueOfVerifiedLength === 'number') {\n    return formatter.format(valueOfVerifiedLength);\n  }\n\n  if (fraction) {\n    var number = parseFloat(\"\".concat(integer).concat(periodKey).concat(fraction.slice(0, options.maximumFractionDigits)));\n    if (isNaN(number)) return emptyString;\n    return formatter.format(number);\n  }\n\n  if (integer) {\n    var number = parseInt(integer, 10);\n    if (isNaN(number)) return emptyString;\n    var formatted = formatter.format(number);\n    var isDecimalAllowed_1 = !(options.minimumFractionDigits === 0 && options.maximumFractionDigits === 0);\n    var isDecimalAvailable = decimal && !formatted.includes(decimal) && length < safeLength;\n    return isDecimalAllowed_1 && isDecimalAvailable ? \"\".concat(formatted).concat(decimal) : formatted;\n  }\n\n  return emptyString;\n}\nexport function identifyPressedKey(decimalSeparatorKey, inputType, pressedKey, prevValue, value) {\n  if (pressedKey !== androidUnidentifiedKey) return pressedKey;\n  if (inputType === 'deleteContentBackward') return backspaceKey;\n\n  if (inputType === 'insertText') {\n    var diff = value.split(emptyString).find(function (char, i) {\n      return char !== prevValue.split(emptyString)[i];\n    });\n\n    switch (diff) {\n      case decimalSeparatorKey:\n        return decimalSeparatorKey;\n\n      case minus:\n        return minus;\n\n      default:\n        return pressedKey;\n    }\n  }\n\n  return pressedKey;\n}\nexport function getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale) {\n  var selectionStart = prevCursorPosition.selectionStart,\n      selectionEnd = prevCursorPosition.selectionEnd,\n      selection = prevCursorPosition.selection;\n  var backspaceWasPressed = pressedKey === backspaceKey;\n  var backspacedChar = backspaceWasPressed ? prevValue.slice(selectionStart + (selection ? 0 : -1), selectionEnd) : null;\n  var decimalWasPressed = [decimalSeparatorKey, numericKeypadDecimal].includes(pressedKey);\n  var decimalPressedForInteger = decimalWasPressed && verifiedDecimalScale === 0;\n  var deleteWasPressed = [deleteKey, numericKeypadDel].includes(pressedKey);\n  var deletedChar = deleteWasPressed ? prevValue.slice(selectionStart, selectionEnd + (selection ? 0 : 1)) : null;\n  var thousandsSeparatorWasBackspaced = backspaceWasPressed && backspacedChar === group;\n  var thousandsSeparatorWasDeleted = deleteWasPressed && deletedChar === group;\n  return {\n    backspaceWasPressed: backspaceWasPressed,\n    backspacedChar: backspacedChar,\n    decimalWasPressed: decimalWasPressed,\n    decimalPressedForInteger: decimalPressedForInteger,\n    deleteWasPressed: deleteWasPressed,\n    deletedChar: deletedChar,\n    thousandsSeparatorWasBackspaced: thousandsSeparatorWasBackspaced,\n    thousandsSeparatorWasDeleted: thousandsSeparatorWasDeleted\n  };\n}\nexport function prepareValueToFormatting(decimal, decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale, value) {\n  var _a = getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale),\n      decimalPressedForInteger = _a.decimalPressedForInteger,\n      thousandsSeparatorWasBackspaced = _a.thousandsSeparatorWasBackspaced,\n      thousandsSeparatorWasDeleted = _a.thousandsSeparatorWasDeleted; // Remove preceding/following integer digit instead of thousands separator\n\n\n  if (thousandsSeparatorWasBackspaced || thousandsSeparatorWasDeleted) {\n    var selectionEnd = prevCursorPosition.selectionEnd,\n        selection_1 = prevCursorPosition.selection;\n\n    var getCursorShift = function () {\n      if (thousandsSeparatorWasDeleted) {\n        var deletedAsSelection = selection_1 === group;\n        return deletedAsSelection ? 0 : 1;\n      }\n\n      if (thousandsSeparatorWasBackspaced) return -2;\n      return 0;\n    };\n\n    var indexOfIntegerDigitToRemove_1 = selectionEnd + getCursorShift();\n    return prevValue.split(emptyString).filter(function (_, i) {\n      return i !== indexOfIntegerDigitToRemove_1;\n    }).join(emptyString);\n  } // Ignore typing decimal separator for integer\n\n\n  if (decimalPressedForInteger) {\n    return value.replace(new RegExp(\"[\".concat(decimal, \"]\"), 'g'), emptyString);\n  }\n\n  return value;\n}\nexport function getNewCursorPosition(decimal, decimalSeparatorKey, group, newValue, pressedKey, prevCursorPosition, prevValue, value, verifiedDecimalScale, locale, fillDecimalScale) {\n  var fixedDecimalScale = fillDecimalScale === fillDecimalScaleVariant.always;\n\n  var _a = getLengthInfo(locale, prevValue, verifiedDecimalScale, fillDecimalScale),\n      prevLength = _a.length,\n      prevFractionLength = _a.fractionLength;\n\n  var _b = getLengthInfo(locale, newValue, verifiedDecimalScale, fillDecimalScale),\n      newLength = _b.length,\n      newSafeLength = _b.safeLength,\n      newIntegerLength = _b.integerLength,\n      newSafeIntegerLength = _b.safeIntegerLength,\n      newFractionLength = _b.fractionLength,\n      newSafeFractionLength = _b.safeFractionLength;\n\n  var _c = getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale),\n      backspaceWasPressed = _c.backspaceWasPressed,\n      backspacedChar = _c.backspacedChar,\n      decimalWasPressed = _c.decimalWasPressed,\n      deleteWasPressed = _c.deleteWasPressed,\n      thousandsSeparatorWasBackspaced = _c.thousandsSeparatorWasBackspaced;\n\n  var digitTyped = pressedKey && /\\d/g.test(pressedKey);\n  var digitBackspaced = backspaceWasPressed && backspacedChar && /\\d/g.test(backspacedChar);\n  var decimalBackspaced = backspaceWasPressed && backspacedChar === decimal;\n  var selectionStart = prevCursorPosition.selectionStart,\n      selectionEnd = prevCursorPosition.selectionEnd,\n      selection = prevCursorPosition.selection;\n  var defaultPosition = Math.max(selectionEnd + (newValue.length - prevValue.length), 0);\n  var isPrevValueNegative = isValidNegative(prevValue);\n  var isNewValueNegative = isValidNegative(newValue);\n  var isDecimalAllowed = verifiedDecimalScale > 0;\n  var digitTypedBeforeMinus = isPrevValueNegative && selectionEnd === 0 && digitTyped;\n  var leadingZeroAdded = pressedKey === '0' && selectionEnd === (isPrevValueNegative ? 1 : 0);\n  var prevIndexOfDecimalSeparator = prevValue.indexOf(decimal);\n  var prevCursorPositionInDecimalArea = prevIndexOfDecimalSeparator > -1 && prevIndexOfDecimalSeparator < selectionEnd;\n  var prevCursorPositionInIntegerArea = prevIndexOfDecimalSeparator === -1 || prevIndexOfDecimalSeparator >= selectionEnd;\n  var filledIntegerScaleDigitWasChanged = digitTyped && prevCursorPositionInIntegerArea && selectionEnd !== prevValue.length && newLength === prevLength && (newLength === newSafeLength || newIntegerLength === newSafeIntegerLength);\n  var isDecimalScaleFilled = isDecimalAllowed && newFractionLength === prevFractionLength && newFractionLength === newSafeFractionLength;\n  var filledDecimalScaleDigitWasBackspaced = isDecimalScaleFilled && prevCursorPositionInDecimalArea && digitBackspaced;\n  var filledDecimalScaleDigitWasChanged = isDecimalScaleFilled && prevCursorPositionInDecimalArea && digitTyped; // Manage cursor when decimalSeparator typed in a new place of a decimal-allowed number\n\n  var decimalNewPosition = newValue.indexOf(decimal);\n  var restructuredByDecimal = isDecimalAllowed && decimalWasPressed && decimalNewPosition > -1; // Preserve cursor after first typed digit and before decimal separator\n\n  var fixedDecimalScaleFirstTyping = fixedDecimalScale && value.length === (isNewValueNegative ? 2 : 1) && newValue.charAt(isNewValueNegative ? 1 : 0) === pressedKey; // Preserve cursor before \"negative\" sign\n\n  var isLeadingZerosRemovedOnPrecedingDigitBackspace = backspaceWasPressed && defaultPosition === 0 && selectionEnd - defaultPosition > 1;\n  var keepCursorBeforeNegativeSign = isNewValueNegative && isLeadingZerosRemovedOnPrecedingDigitBackspace;\n\n  var getPositionOnRestructuringByDecimal = function () {\n    return prevCursorPositionInDecimalArea ? newValue.length : decimalNewPosition + 1;\n  };\n\n  var getPositionOnDecimalBackspace = function () {\n    var removedCharShift = 1;\n    var valueLength = newValue.length;\n\n    if (prevFractionLength === 0) {\n      return valueLength;\n    }\n\n    var delta = 0;\n    var anchorDigitIndexFromTheEnd = 0;\n    newValue.split(emptyString).reverse().forEach(function (char, i) {\n      if (char === group) {\n        delta++;\n      }\n\n      if (i - delta === prevFractionLength - 1) {\n        anchorDigitIndexFromTheEnd = i;\n      }\n    });\n    return valueLength - removedCharShift - anchorDigitIndexFromTheEnd;\n  };\n\n  var getPositionOnDelete = function () {\n    var firstSymbolDeleted = selectionEnd === 0;\n\n    if (firstSymbolDeleted) {\n      return 0;\n    }\n\n    var removedCharShift = 1;\n    var anchorDigitIndex = prevValue.slice(0, selectionEnd).replace(new RegExp(\"[\".concat(group, \"]\"), 'g'), emptyString).length - 1;\n    var delta = 0;\n    var cursorPosition = 0;\n    newValue.split(emptyString).forEach(function (char, i) {\n      if (char === group) {\n        delta++;\n      }\n\n      if (i - delta === anchorDigitIndex) {\n        cursorPosition = i;\n      }\n    });\n    return cursorPosition + removedCharShift;\n  };\n\n  var getPositionOnFilledIntegerScaleDigitChange = function () {\n    var getGroupsNumber = function (value, start, end) {\n      var _a;\n\n      return ((_a = value.slice(start, end).match(new RegExp(\"[\".concat(group, \"]\"), 'g'))) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    };\n\n    var numberOfGroupsBeforeCursorPrevValue = getGroupsNumber(prevValue, 0, selectionEnd);\n    var numberOfGroupsBeforeCursorNewValue = getGroupsNumber(newValue, 0, selectionEnd + 1);\n    var groupsDiffBeforeCursor = numberOfGroupsBeforeCursorNewValue - numberOfGroupsBeforeCursorPrevValue;\n    var typedDigitShift = leadingZeroAdded ? 0 : 1;\n    return selectionEnd + groupsDiffBeforeCursor + typedDigitShift;\n  };\n\n  var getPositionOnSelectionChange = function () {\n    if (restructuredByDecimal) return getPositionOnRestructuringByDecimal();\n\n    var getPasteText = function () {\n      var beforeSelectionPartLength = prevValue.slice(0, selectionStart).length;\n      var afterSelectionPartLength = prevValue.slice(selectionEnd).length;\n      var valueWithoutBeforePart = value.slice(beforeSelectionPartLength);\n      var pasteText = valueWithoutBeforePart.slice(0, valueWithoutBeforePart.length - afterSelectionPartLength);\n      return pasteText;\n    };\n\n    var _a = unformat(locale, getPasteText()),\n        pasteInteger = _a.integer,\n        pasteDecimal = _a.decimal,\n        pasteFraction = _a.fraction;\n\n    var refinedPasteText = \"\".concat(selectionStart === 0 ? refineIntegerFromLeadingZeroes(pasteInteger) : pasteInteger).concat(pasteDecimal).concat(pasteFraction);\n    var refinedPasteTextLength = refinedPasteText.length;\n    var anchorDigitIndexRaw = prevValue.slice(0, selectionStart).replace(new RegExp(\"[\".concat(group).concat(decimal, \"]\"), 'g'), emptyString).length - 1;\n    var anchorDigitIndexBase = anchorDigitIndexRaw > -1 ? anchorDigitIndexRaw : 0;\n    var anchorDigitIndexShift = anchorDigitIndexRaw > -1 ? refinedPasteTextLength : Math.max(refinedPasteTextLength - 1, 0);\n    var anchorIndex = anchorDigitIndexBase + anchorDigitIndexShift;\n\n    var getCursorPositionShift = function () {\n      var negativeToPositiveConversion = isValidNegative(refinedPasteText) && isPrevValueNegative;\n      var integerZeroBasedSelectionRemoval = refinedPasteTextLength === 0 && selectionStart === 0;\n      var integerPartRemoved = integerZeroBasedSelectionRemoval && selectionEnd === prevIndexOfDecimalSeparator;\n      var fractionZeroBasedSelectionRemoval = (refinedPasteTextLength === 0 || refinedPasteText === minus) && selectionStart === prevIndexOfDecimalSeparator + 1;\n      var groupSelectionBackspaced = selection === group && thousandsSeparatorWasBackspaced;\n      if (negativeToPositiveConversion || integerPartRemoved) return -1;\n      if (integerZeroBasedSelectionRemoval || groupSelectionBackspaced) return 0;\n      if (fractionZeroBasedSelectionRemoval) return 2;\n      return 1;\n    };\n\n    var delta = 0;\n    var cursorPosition = 0;\n\n    for (var i = 0; i < newValue.length; i++) {\n      var char = newValue.charAt(i);\n      var isDeltaIncrementer = char === group || char === decimal && !pasteDecimal;\n\n      if (isDeltaIncrementer) {\n        delta++;\n      }\n\n      if (i - delta === anchorIndex) {\n        cursorPosition = i + getCursorPositionShift();\n        break;\n      }\n\n      if (i + 1 === newValue.length) {\n        cursorPosition = newValue.length;\n      }\n    }\n\n    return cursorPosition;\n  };\n\n  var getNewPosition = function () {\n    if (selection) {\n      return getPositionOnSelectionChange();\n    }\n\n    if (digitTypedBeforeMinus) {\n      return 2;\n    }\n\n    if (filledIntegerScaleDigitWasChanged) {\n      return getPositionOnFilledIntegerScaleDigitChange();\n    }\n\n    if (deleteWasPressed) {\n      return getPositionOnDelete();\n    }\n\n    if (decimalBackspaced) {\n      return getPositionOnDecimalBackspace();\n    }\n\n    if (filledDecimalScaleDigitWasBackspaced) {\n      return selectionEnd - 1;\n    }\n\n    if (filledDecimalScaleDigitWasChanged) {\n      return selectionEnd + 1;\n    }\n\n    if (restructuredByDecimal) {\n      return getPositionOnRestructuringByDecimal();\n    }\n\n    if (fixedDecimalScaleFirstTyping) {\n      return isNewValueNegative ? 2 : 1;\n    }\n\n    if (keepCursorBeforeNegativeSign) {\n      return 1;\n    }\n\n    return defaultPosition;\n  };\n\n  return getNewPosition();\n}","map":{"version":3,"sources":["../../../../src/components/NumberInput/NumberInput.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { getFormatterLocale } from '../../utils/i18n';\nimport { fillDecimalScaleVariant, } from './NumberInput.types';\nexport var defaultLocale = 'en-US';\nexport var minus = '-';\nexport var emptyString = '';\nexport var leftBrace = '(';\nexport var rightBrace = ')';\nexport var backspaceKey = 'Backspace';\nexport var deleteKey = 'Delete';\nexport var numericKeypadDel = 'Del'; // for delete key from numeric keypad in IE\nexport var periodKey = '.';\nexport var numericKeypadDecimal = 'Decimal'; // for period key from numeric keypad in IE\nexport var numericKeypadKey = 'Del'; // for delete key from numeric keypad in IE\nexport var androidUnidentifiedKey = 'Unidentified';\nexport var maxDigitLength = 15; // Safe length to avoid the loss of precision\nexport var maxDecimalScale = maxDigitLength - 1;\nexport var commaKey = ',';\nexport var metaKeyIdentifier = 'Meta';\nexport var controlKey = 'Control';\nexport var highlightAllKey = 'a';\nexport var copyKey = 'c';\n// fixes binary rounding issues (e.g: (0.615).toFixed(2) returns 0.61)\nexport function toFixed(value, precision) {\n    var isExponentialRecord = value.toString().includes('e');\n    if (isExponentialRecord)\n        return value;\n    return Number(Number(Math.round(Number(value + 'e' + precision)) + 'e-' + precision).toFixed(precision));\n}\nexport function formatterFactory(formatterLocale, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return new Intl.NumberFormat(formatterLocale, options);\n    }\n    catch (error) {\n        console.error(\"@procore/core-react Intl.NumberFormat error for locale \".concat(formatterLocale, \". Will fall back to en-US\"), error);\n        return new Intl.NumberFormat('en-US', options);\n    }\n}\nexport function getSeparators(locale) {\n    var formatterLocale = getFormatterLocale(locale);\n    var formatter = formatterFactory(formatterLocale);\n    var value = formatter.format(1e9 + 0.1);\n    var refinedValue = value.replace(new RegExp(/\\d/, 'g'), emptyString);\n    return {\n        decimal: refinedValue.slice(-1),\n        group: refinedValue.slice(-2, -1),\n    };\n}\n// Check if a valid numeric string is a negative value\nexport var isValidNegative = function (value) {\n    var _a;\n    value = String(value);\n    var minusRegExp = new RegExp(\"\".concat(minus), 'g');\n    var numberOfMinuses = (_a = value.match(minusRegExp)) === null || _a === void 0 ? void 0 : _a.length;\n    var containsValidParenthesis = value.indexOf(leftBrace) === 0 &&\n        value.indexOf(rightBrace) === value.length - 1;\n    var isNegative = (numberOfMinuses === 1 && !containsValidParenthesis) ||\n        (!numberOfMinuses && containsValidParenthesis);\n    return isNegative;\n};\nexport function verifyDecimalScale(decimalScale) {\n    if (decimalScale === true) {\n        return maxDecimalScale;\n    }\n    if (decimalScale === false) {\n        return 0;\n    }\n    if (decimalScale < 0) {\n        console.warn(\"WARNING: Decimal scale (\".concat(decimalScale, \") is out of range. It was reset to 0. Possible values are from 0 to \").concat(maxDecimalScale, \".\"));\n        return 0;\n    }\n    if (decimalScale > maxDecimalScale) {\n        console.warn(\"WARNING: Decimal scale (\".concat(decimalScale, \") is out of range. It was reset to the max value of \").concat(maxDecimalScale, \". Possible values are from 0 to \").concat(maxDecimalScale, \".\"));\n        return maxDecimalScale;\n    }\n    return decimalScale;\n}\nexport function unformat(locale, value, isNumericString) {\n    if (isNumericString === void 0) { isNumericString = false; }\n    var isValueNegative = isValidNegative(value);\n    var decimal = isNumericString || typeof value === 'number'\n        ? periodKey\n        : getSeparators(locale).decimal;\n    var numericRegExp = new RegExp(\"[^0-9\".concat(decimal, \"]\"), 'g');\n    var strValue = String(value);\n    // Normalize value with numeric characters\n    strValue = strValue.replace(numericRegExp, emptyString);\n    // Normalize \"minus\" sign for negatives\n    if (isValueNegative) {\n        strValue = \"\".concat(minus).concat(strValue);\n    }\n    // Normalize integer and fraction parts of the value\n    var _a = strValue.split(decimal), integer = _a[0], fractions = _a.slice(1);\n    var fraction = fractions.join(emptyString);\n    return {\n        integer: integer,\n        decimal: strValue.includes(decimal) ? decimal : emptyString,\n        fraction: fraction,\n        parsedNumber: parseFloat(\"\".concat(integer).concat(periodKey).concat(fraction)),\n    };\n}\nexport function refineIntegerFromLeadingZeroes(integer) {\n    var isNegativeValue = isValidNegative(integer);\n    var refinedFromMinus = integer.replace(minus, emptyString);\n    var hasLeadingZeroes = refinedFromMinus.slice(0, 1);\n    var refinedFromLeadingZeroes = refinedFromMinus.replace(/^0+/, emptyString);\n    var zeroPadded = hasLeadingZeroes && refinedFromLeadingZeroes === emptyString;\n    return \"\".concat(isNegativeValue ? minus : emptyString).concat(zeroPadded ? 0 : refinedFromLeadingZeroes);\n}\nexport function getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString) {\n    if (decimalScale === void 0) { decimalScale = 0; }\n    if (fillDecimalScale === void 0) { fillDecimalScale = fillDecimalScaleVariant.none; }\n    if (isNumericString === void 0) { isNumericString = false; }\n    var isNegativeValue = isValidNegative(value);\n    var _a = unformat(locale, value, isNumericString), integer = _a.integer, decimal = _a.decimal, fraction = _a.fraction;\n    var integerRefinedFromLeadingZeros = refineIntegerFromLeadingZeroes(integer);\n    var getIntegerLength = function () {\n        var accountEmptyInteger = integer === emptyString && decimal && fraction.length > 0;\n        if (accountEmptyInteger)\n            return 1;\n        var accountEmptyNegativeInteger = integer === minus && decimal && fraction.length > 0;\n        if (accountEmptyNegativeInteger)\n            return 2;\n        var accountInteger = integer.length > 0 && integer !== emptyString && integer !== minus;\n        if (accountInteger)\n            return integerRefinedFromLeadingZeros.length;\n        return 0;\n    };\n    var integerLength = getIntegerLength();\n    var fractionLength = fraction.length;\n    var length = integerLength + fractionLength;\n    var safeLength = maxDigitLength + (isNegativeValue ? 1 : 0);\n    var isSafeLength = safeLength - length > -1;\n    var isDecimalScaleNonFillable = fillDecimalScale === fillDecimalScaleVariant.none;\n    var safeIntegerLength = isDecimalScaleNonFillable\n        ? safeLength\n        : safeLength - decimalScale;\n    var safeFractionLength = isDecimalScaleNonFillable\n        ? Math.min(safeLength -\n            integerRefinedFromLeadingZeros.slice(0, safeIntegerLength).length, decimalScale)\n        : decimalScale;\n    var isSafeIntegerLength = safeIntegerLength - integerLength > -1;\n    var isSafeFractionLength = safeFractionLength - fractionLength > -1;\n    var safelyTruncatedInteger = isSafeIntegerLength\n        ? integerRefinedFromLeadingZeros\n        : integerRefinedFromLeadingZeros.slice(0, safeIntegerLength);\n    var safelyTruncatedFraction = isSafeFractionLength\n        ? fraction\n        : fraction.slice(0, safeFractionLength);\n    var safelyTruncatedValue = \"\".concat(safelyTruncatedInteger).concat(decimal).concat(safelyTruncatedFraction);\n    return {\n        length: length,\n        safeLength: safeLength,\n        isSafeLength: isSafeLength,\n        safelyTruncatedValue: safelyTruncatedValue,\n        integerLength: integerLength,\n        safeIntegerLength: safeIntegerLength,\n        isSafeIntegerLength: isSafeIntegerLength,\n        fractionLength: fractionLength,\n        safeFractionLength: safeFractionLength,\n        isSafeFractionLength: isSafeFractionLength,\n    };\n}\nexport function format(locale, decimalScale, fillDecimalScale, value, isNumericString) {\n    if (isNumericString === void 0) { isNumericString = false; }\n    var fixedDecimalScale = fillDecimalScale === fillDecimalScaleVariant.always;\n    var fillDecimalScaleOnBlur = fillDecimalScale === fillDecimalScaleVariant.onBlur;\n    var autoFilledScale = fixedDecimalScale || fillDecimalScaleOnBlur;\n    var _a = getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString), length = _a.length, safeLength = _a.safeLength, isSafeLength = _a.isSafeLength, safelyTruncatedValue = _a.safelyTruncatedValue;\n    var isTruncatedBeforeFormatting = autoFilledScale || !isSafeLength;\n    var valueOfVerifiedLength = isTruncatedBeforeFormatting\n        ? safelyTruncatedValue\n        : value;\n    var _b = unformat(locale, valueOfVerifiedLength, isNumericString || typeof value === 'number'), integer = _b.integer, decimal = _b.decimal, fraction = _b.fraction;\n    var options = {\n        minimumFractionDigits: fixedDecimalScale\n            ? decimalScale\n            : Math.min(Math.max(0, (fraction === null || fraction === void 0 ? void 0 : fraction.length) || 0), decimalScale),\n        maximumFractionDigits: decimalScale,\n    };\n    var formatterLocale = getFormatterLocale(locale);\n    var formatter = formatterFactory(formatterLocale, options);\n    var isDecimalAllowed = decimalScale > 0;\n    var isEmptyValue = integer === emptyString && !decimal && !fraction;\n    if (isEmptyValue)\n        return emptyString;\n    var isMinusValue = integer === minus && !decimal && !fraction;\n    if (isMinusValue)\n        return minus;\n    var isDecimalValue = integer === emptyString && decimal && !fraction && !fixedDecimalScale;\n    if (isDecimalValue)\n        return isDecimalAllowed ? decimal : emptyString;\n    var isMinusDecimalValue = integer === minus && decimal && !fraction && !fixedDecimalScale;\n    if (isMinusDecimalValue)\n        return \"\".concat(minus).concat(isDecimalAllowed ? decimal : emptyString);\n    var isFractionValueWithEmptyInteger = (integer === minus || integer === emptyString) &&\n        decimal &&\n        (fraction || (!fraction && fixedDecimalScale));\n    if (isFractionValueWithEmptyInteger) {\n        var numberOfZerosToPad = decimalScale - fraction.length;\n        var preparedFraction = numberOfZerosToPad > 0 && fixedDecimalScale\n            ? fraction.concat(Array.from({ length: numberOfZerosToPad }, function (_) { return '0'; }).join(emptyString))\n            : fraction.slice(0, decimalScale);\n        return \"\".concat(integer).concat(isDecimalAllowed ? decimal : emptyString).concat(preparedFraction);\n    }\n    if (typeof valueOfVerifiedLength === 'number') {\n        return formatter.format(valueOfVerifiedLength);\n    }\n    if (fraction) {\n        var number = parseFloat(\"\".concat(integer).concat(periodKey).concat(fraction.slice(0, options.maximumFractionDigits)));\n        if (isNaN(number))\n            return emptyString;\n        return formatter.format(number);\n    }\n    if (integer) {\n        var number = parseInt(integer, 10);\n        if (isNaN(number))\n            return emptyString;\n        var formatted = formatter.format(number);\n        var isDecimalAllowed_1 = !(options.minimumFractionDigits === 0 && options.maximumFractionDigits === 0);\n        var isDecimalAvailable = decimal && !formatted.includes(decimal) && length < safeLength;\n        return isDecimalAllowed_1 && isDecimalAvailable\n            ? \"\".concat(formatted).concat(decimal)\n            : formatted;\n    }\n    return emptyString;\n}\nexport function identifyPressedKey(decimalSeparatorKey, inputType, pressedKey, prevValue, value) {\n    if (pressedKey !== androidUnidentifiedKey)\n        return pressedKey;\n    if (inputType === 'deleteContentBackward')\n        return backspaceKey;\n    if (inputType === 'insertText') {\n        var diff = value\n            .split(emptyString)\n            .find(function (char, i) { return char !== prevValue.split(emptyString)[i]; });\n        switch (diff) {\n            case decimalSeparatorKey:\n                return decimalSeparatorKey;\n            case minus:\n                return minus;\n            default:\n                return pressedKey;\n        }\n    }\n    return pressedKey;\n}\nexport function getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale) {\n    var selectionStart = prevCursorPosition.selectionStart, selectionEnd = prevCursorPosition.selectionEnd, selection = prevCursorPosition.selection;\n    var backspaceWasPressed = pressedKey === backspaceKey;\n    var backspacedChar = backspaceWasPressed\n        ? prevValue.slice(selectionStart + (selection ? 0 : -1), selectionEnd)\n        : null;\n    var decimalWasPressed = [\n        decimalSeparatorKey,\n        numericKeypadDecimal,\n    ].includes(pressedKey);\n    var decimalPressedForInteger = decimalWasPressed && verifiedDecimalScale === 0;\n    var deleteWasPressed = [deleteKey, numericKeypadDel].includes(pressedKey);\n    var deletedChar = deleteWasPressed\n        ? prevValue.slice(selectionStart, selectionEnd + (selection ? 0 : 1))\n        : null;\n    var thousandsSeparatorWasBackspaced = backspaceWasPressed && backspacedChar === group;\n    var thousandsSeparatorWasDeleted = deleteWasPressed && deletedChar === group;\n    return {\n        backspaceWasPressed: backspaceWasPressed,\n        backspacedChar: backspacedChar,\n        decimalWasPressed: decimalWasPressed,\n        decimalPressedForInteger: decimalPressedForInteger,\n        deleteWasPressed: deleteWasPressed,\n        deletedChar: deletedChar,\n        thousandsSeparatorWasBackspaced: thousandsSeparatorWasBackspaced,\n        thousandsSeparatorWasDeleted: thousandsSeparatorWasDeleted,\n    };\n}\nexport function prepareValueToFormatting(decimal, decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale, value) {\n    var _a = getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale), decimalPressedForInteger = _a.decimalPressedForInteger, thousandsSeparatorWasBackspaced = _a.thousandsSeparatorWasBackspaced, thousandsSeparatorWasDeleted = _a.thousandsSeparatorWasDeleted;\n    // Remove preceding/following integer digit instead of thousands separator\n    if (thousandsSeparatorWasBackspaced || thousandsSeparatorWasDeleted) {\n        var selectionEnd = prevCursorPosition.selectionEnd, selection_1 = prevCursorPosition.selection;\n        var getCursorShift = function () {\n            if (thousandsSeparatorWasDeleted) {\n                var deletedAsSelection = selection_1 === group;\n                return deletedAsSelection ? 0 : 1;\n            }\n            if (thousandsSeparatorWasBackspaced)\n                return -2;\n            return 0;\n        };\n        var indexOfIntegerDigitToRemove_1 = selectionEnd + getCursorShift();\n        return prevValue\n            .split(emptyString)\n            .filter(function (_, i) { return i !== indexOfIntegerDigitToRemove_1; })\n            .join(emptyString);\n    }\n    // Ignore typing decimal separator for integer\n    if (decimalPressedForInteger) {\n        return value.replace(new RegExp(\"[\".concat(decimal, \"]\"), 'g'), emptyString);\n    }\n    return value;\n}\nexport function getNewCursorPosition(decimal, decimalSeparatorKey, group, newValue, pressedKey, prevCursorPosition, prevValue, value, verifiedDecimalScale, locale, fillDecimalScale) {\n    var fixedDecimalScale = fillDecimalScale === fillDecimalScaleVariant.always;\n    var _a = getLengthInfo(locale, prevValue, verifiedDecimalScale, fillDecimalScale), prevLength = _a.length, prevFractionLength = _a.fractionLength;\n    var _b = getLengthInfo(locale, newValue, verifiedDecimalScale, fillDecimalScale), newLength = _b.length, newSafeLength = _b.safeLength, newIntegerLength = _b.integerLength, newSafeIntegerLength = _b.safeIntegerLength, newFractionLength = _b.fractionLength, newSafeFractionLength = _b.safeFractionLength;\n    var _c = getPressedKeyInfo(decimalSeparatorKey, group, pressedKey, prevCursorPosition, prevValue, verifiedDecimalScale), backspaceWasPressed = _c.backspaceWasPressed, backspacedChar = _c.backspacedChar, decimalWasPressed = _c.decimalWasPressed, deleteWasPressed = _c.deleteWasPressed, thousandsSeparatorWasBackspaced = _c.thousandsSeparatorWasBackspaced;\n    var digitTyped = pressedKey && /\\d/g.test(pressedKey);\n    var digitBackspaced = backspaceWasPressed && backspacedChar && /\\d/g.test(backspacedChar);\n    var decimalBackspaced = backspaceWasPressed && backspacedChar === decimal;\n    var selectionStart = prevCursorPosition.selectionStart, selectionEnd = prevCursorPosition.selectionEnd, selection = prevCursorPosition.selection;\n    var defaultPosition = Math.max(selectionEnd + (newValue.length - prevValue.length), 0);\n    var isPrevValueNegative = isValidNegative(prevValue);\n    var isNewValueNegative = isValidNegative(newValue);\n    var isDecimalAllowed = verifiedDecimalScale > 0;\n    var digitTypedBeforeMinus = isPrevValueNegative && selectionEnd === 0 && digitTyped;\n    var leadingZeroAdded = pressedKey === '0' && selectionEnd === (isPrevValueNegative ? 1 : 0);\n    var prevIndexOfDecimalSeparator = prevValue.indexOf(decimal);\n    var prevCursorPositionInDecimalArea = prevIndexOfDecimalSeparator > -1 &&\n        prevIndexOfDecimalSeparator < selectionEnd;\n    var prevCursorPositionInIntegerArea = prevIndexOfDecimalSeparator === -1 ||\n        prevIndexOfDecimalSeparator >= selectionEnd;\n    var filledIntegerScaleDigitWasChanged = digitTyped &&\n        prevCursorPositionInIntegerArea &&\n        selectionEnd !== prevValue.length &&\n        newLength === prevLength &&\n        (newLength === newSafeLength || newIntegerLength === newSafeIntegerLength);\n    var isDecimalScaleFilled = isDecimalAllowed &&\n        newFractionLength === prevFractionLength &&\n        newFractionLength === newSafeFractionLength;\n    var filledDecimalScaleDigitWasBackspaced = isDecimalScaleFilled && prevCursorPositionInDecimalArea && digitBackspaced;\n    var filledDecimalScaleDigitWasChanged = isDecimalScaleFilled && prevCursorPositionInDecimalArea && digitTyped;\n    // Manage cursor when decimalSeparator typed in a new place of a decimal-allowed number\n    var decimalNewPosition = newValue.indexOf(decimal);\n    var restructuredByDecimal = isDecimalAllowed && decimalWasPressed && decimalNewPosition > -1;\n    // Preserve cursor after first typed digit and before decimal separator\n    var fixedDecimalScaleFirstTyping = fixedDecimalScale &&\n        value.length === (isNewValueNegative ? 2 : 1) &&\n        newValue.charAt(isNewValueNegative ? 1 : 0) === pressedKey;\n    // Preserve cursor before \"negative\" sign\n    var isLeadingZerosRemovedOnPrecedingDigitBackspace = backspaceWasPressed &&\n        defaultPosition === 0 &&\n        selectionEnd - defaultPosition > 1;\n    var keepCursorBeforeNegativeSign = isNewValueNegative && isLeadingZerosRemovedOnPrecedingDigitBackspace;\n    var getPositionOnRestructuringByDecimal = function () {\n        return prevCursorPositionInDecimalArea\n            ? newValue.length\n            : decimalNewPosition + 1;\n    };\n    var getPositionOnDecimalBackspace = function () {\n        var removedCharShift = 1;\n        var valueLength = newValue.length;\n        if (prevFractionLength === 0) {\n            return valueLength;\n        }\n        var delta = 0;\n        var anchorDigitIndexFromTheEnd = 0;\n        newValue\n            .split(emptyString)\n            .reverse()\n            .forEach(function (char, i) {\n            if (char === group) {\n                delta++;\n            }\n            if (i - delta === prevFractionLength - 1) {\n                anchorDigitIndexFromTheEnd = i;\n            }\n        });\n        return valueLength - removedCharShift - anchorDigitIndexFromTheEnd;\n    };\n    var getPositionOnDelete = function () {\n        var firstSymbolDeleted = selectionEnd === 0;\n        if (firstSymbolDeleted) {\n            return 0;\n        }\n        var removedCharShift = 1;\n        var anchorDigitIndex = prevValue\n            .slice(0, selectionEnd)\n            .replace(new RegExp(\"[\".concat(group, \"]\"), 'g'), emptyString).length - 1;\n        var delta = 0;\n        var cursorPosition = 0;\n        newValue.split(emptyString).forEach(function (char, i) {\n            if (char === group) {\n                delta++;\n            }\n            if (i - delta === anchorDigitIndex) {\n                cursorPosition = i;\n            }\n        });\n        return cursorPosition + removedCharShift;\n    };\n    var getPositionOnFilledIntegerScaleDigitChange = function () {\n        var getGroupsNumber = function (value, start, end) {\n            var _a;\n            return (((_a = value.slice(start, end).match(new RegExp(\"[\".concat(group, \"]\"), 'g'))) === null || _a === void 0 ? void 0 : _a.length) ||\n                0);\n        };\n        var numberOfGroupsBeforeCursorPrevValue = getGroupsNumber(prevValue, 0, selectionEnd);\n        var numberOfGroupsBeforeCursorNewValue = getGroupsNumber(newValue, 0, selectionEnd + 1);\n        var groupsDiffBeforeCursor = numberOfGroupsBeforeCursorNewValue - numberOfGroupsBeforeCursorPrevValue;\n        var typedDigitShift = leadingZeroAdded ? 0 : 1;\n        return selectionEnd + groupsDiffBeforeCursor + typedDigitShift;\n    };\n    var getPositionOnSelectionChange = function () {\n        if (restructuredByDecimal)\n            return getPositionOnRestructuringByDecimal();\n        var getPasteText = function () {\n            var beforeSelectionPartLength = prevValue.slice(0, selectionStart).length;\n            var afterSelectionPartLength = prevValue.slice(selectionEnd).length;\n            var valueWithoutBeforePart = value.slice(beforeSelectionPartLength);\n            var pasteText = valueWithoutBeforePart.slice(0, valueWithoutBeforePart.length - afterSelectionPartLength);\n            return pasteText;\n        };\n        var _a = unformat(locale, getPasteText()), pasteInteger = _a.integer, pasteDecimal = _a.decimal, pasteFraction = _a.fraction;\n        var refinedPasteText = \"\".concat(selectionStart === 0\n            ? refineIntegerFromLeadingZeroes(pasteInteger)\n            : pasteInteger).concat(pasteDecimal).concat(pasteFraction);\n        var refinedPasteTextLength = refinedPasteText.length;\n        var anchorDigitIndexRaw = prevValue\n            .slice(0, selectionStart)\n            .replace(new RegExp(\"[\".concat(group).concat(decimal, \"]\"), 'g'), emptyString).length -\n            1;\n        var anchorDigitIndexBase = anchorDigitIndexRaw > -1 ? anchorDigitIndexRaw : 0;\n        var anchorDigitIndexShift = anchorDigitIndexRaw > -1\n            ? refinedPasteTextLength\n            : Math.max(refinedPasteTextLength - 1, 0);\n        var anchorIndex = anchorDigitIndexBase + anchorDigitIndexShift;\n        var getCursorPositionShift = function () {\n            var negativeToPositiveConversion = isValidNegative(refinedPasteText) && isPrevValueNegative;\n            var integerZeroBasedSelectionRemoval = refinedPasteTextLength === 0 && selectionStart === 0;\n            var integerPartRemoved = integerZeroBasedSelectionRemoval &&\n                selectionEnd === prevIndexOfDecimalSeparator;\n            var fractionZeroBasedSelectionRemoval = (refinedPasteTextLength === 0 || refinedPasteText === minus) &&\n                selectionStart === prevIndexOfDecimalSeparator + 1;\n            var groupSelectionBackspaced = selection === group && thousandsSeparatorWasBackspaced;\n            if (negativeToPositiveConversion || integerPartRemoved)\n                return -1;\n            if (integerZeroBasedSelectionRemoval || groupSelectionBackspaced)\n                return 0;\n            if (fractionZeroBasedSelectionRemoval)\n                return 2;\n            return 1;\n        };\n        var delta = 0;\n        var cursorPosition = 0;\n        for (var i = 0; i < newValue.length; i++) {\n            var char = newValue.charAt(i);\n            var isDeltaIncrementer = char === group || (char === decimal && !pasteDecimal);\n            if (isDeltaIncrementer) {\n                delta++;\n            }\n            if (i - delta === anchorIndex) {\n                cursorPosition = i + getCursorPositionShift();\n                break;\n            }\n            if (i + 1 === newValue.length) {\n                cursorPosition = newValue.length;\n            }\n        }\n        return cursorPosition;\n    };\n    var getNewPosition = function () {\n        if (selection) {\n            return getPositionOnSelectionChange();\n        }\n        if (digitTypedBeforeMinus) {\n            return 2;\n        }\n        if (filledIntegerScaleDigitWasChanged) {\n            return getPositionOnFilledIntegerScaleDigitChange();\n        }\n        if (deleteWasPressed) {\n            return getPositionOnDelete();\n        }\n        if (decimalBackspaced) {\n            return getPositionOnDecimalBackspace();\n        }\n        if (filledDecimalScaleDigitWasBackspaced) {\n            return selectionEnd - 1;\n        }\n        if (filledDecimalScaleDigitWasChanged) {\n            return selectionEnd + 1;\n        }\n        if (restructuredByDecimal) {\n            return getPositionOnRestructuringByDecimal();\n        }\n        if (fixedDecimalScaleFirstTyping) {\n            return isNewValueNegative ? 2 : 1;\n        }\n        if (keepCursorBeforeNegativeSign) {\n            return 1;\n        }\n        return defaultPosition;\n    };\n    return getNewPosition();\n}\n"]},"metadata":{},"sourceType":"module"}