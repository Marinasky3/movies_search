{"ast":null,"code":"/**\n * This implementation provides item and item's index to the predicate function and works only with arrays.\n * ramda's partition - doesn't provide indexes, but works with any iterable object\n * */\nexport function partition(predicate, list) {\n  return list.reduce(function (_a, item, index) {\n    var resolved = _a[0],\n        rejected = _a[1];\n    predicate(item, index) ? resolved.push(item) : rejected.push(item);\n    return [resolved, rejected];\n  }, [[], []]);\n}","map":{"version":3,"sources":["../../../src/utils/partition.ts"],"names":[],"mappings":"AAAA;;;AAGK;AACL,OAAM,SAAU,SAAV,CACJ,SADI,EAEJ,IAFI,EAEc;AAElB,SAAO,IAAI,CAAC,MAAL,CACL,UAAC,EAAD,EAAuB,IAAvB,EAA6B,KAA7B,EAAkC;QAAhC,QAAQ,GAAA,EAAA,CAAA,CAAA,C;QAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,C;AAClB,IAAA,SAAS,CAAC,IAAD,EAAO,KAAP,CAAT,GAAyB,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAzB,GAA+C,QAAQ,CAAC,IAAT,CAAc,IAAd,CAA/C;AAEA,WAAO,CAAC,QAAD,EAAW,QAAX,CAAP;AACD,GALI,EAML,CAAC,EAAD,EAAY,EAAZ,CANK,CAAP;AAQD","sourcesContent":["/**\n * This implementation provides item and item's index to the predicate function and works only with arrays.\n * ramda's partition - doesn't provide indexes, but works with any iterable object\n * */\nexport function partition(predicate, list) {\n    return list.reduce(function (_a, item, index) {\n        var resolved = _a[0], rejected = _a[1];\n        predicate(item, index) ? resolved.push(item) : rejected.push(item);\n        return [resolved, rejected];\n    }, [[], []]);\n}\n"]},"metadata":{},"sourceType":"module"}