{"ast":null,"code":"import { getFormatterLocale } from './i18n';\nvar dateTimePresets = {\n  time: {\n    hour: 'numeric',\n    minute: 'numeric',\n    timeZoneName: 'short'\n  },\n  'abbr-weekday-abbr-date': {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  },\n  date: {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  },\n  'weekday-date': {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  },\n  none: {},\n  'numeric-date': {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric'\n  }\n};\nexport var getPresetDateTimeOptions = function (type) {\n  return dateTimePresets[type] || dateTimePresets.none;\n};\n\nvar pseudoDate = function (date) {\n  return date.replace(/[\\/\\-\\,\\:]/g, '.');\n};\n\nvar pseudoFormatPart = function (_a) {\n  var type = _a.type,\n      value = _a.value;\n  return type === 'literal' ? {\n    type: type,\n    value: '.'\n  } : {\n    type: type,\n    value: value\n  };\n};\n\nfunction formatterFactory(formatterLocale, options) {\n  try {\n    return new Intl.DateTimeFormat(formatterLocale, options);\n  } catch (error) {\n    console.error(\"@procore/core-react Intl.DateTimeFormat error for locale \".concat(formatterLocale, \". Will fall back to en-US\"), error);\n    return new Intl.DateTimeFormat('en-US', options);\n  }\n}\n\nvar mapFormatToParts = function (parts) {\n  return parts.map(pseudoFormatPart);\n};\n\nexport function intlDateTimeFormat(locale, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!locale) {\n    throw new Error('Locale is a required parameter.');\n  }\n\n  var formatterLocale = getFormatterLocale(locale);\n  var formatter = formatterFactory(formatterLocale, options);\n  return locale === 'pseudo' ? {\n    format: function (date) {\n      return pseudoDate(formatter.format(date));\n    },\n    formatToParts: function (date) {\n      return mapFormatToParts(formatter.formatToParts(date));\n    },\n    resolvedOptions: function () {\n      return formatter.resolvedOptions();\n    }\n  } : formatter;\n}\nexport function toDate(date, log) {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (!isNaN(Date.parse(date))) {\n    return new Date(date);\n  }\n\n  if (log) {\n    console.warn(\"@procore/core-react: \".concat(log, \"; toDate invalid date format\"), date);\n  }\n\n  return date;\n} // Date should already be shifted to the time zone, meaning we already have the date in location and\n// now we need it in a specific style https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#valid_datetime_values\n// toLocaleDateString uses Intl DateTimeFormat\n// alternative toLocaleDateString('en-GB', { timeZone })\n\nexport function formatMachineDate(date) {\n  return date.toLocaleDateString('en-GB').split('/').reverse().join('-');\n}","map":{"version":3,"sources":["../../../src/utils/dateTime.ts"],"names":[],"mappings":"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","sourcesContent":["import { getFormatterLocale } from './i18n';\nvar dateTimePresets = {\n    time: {\n        hour: 'numeric',\n        minute: 'numeric',\n        timeZoneName: 'short',\n    },\n    'abbr-weekday-abbr-date': {\n        weekday: 'short',\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n    },\n    date: {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    },\n    'weekday-date': {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    },\n    none: {},\n    'numeric-date': {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    },\n};\nexport var getPresetDateTimeOptions = function (type) {\n    return dateTimePresets[type] || dateTimePresets.none;\n};\nvar pseudoDate = function (date) { return date.replace(/[\\/\\-\\,\\:]/g, '.'); };\nvar pseudoFormatPart = function (_a) {\n    var type = _a.type, value = _a.value;\n    return type === 'literal' ? { type: type, value: '.' } : { type: type, value: value };\n};\nfunction formatterFactory(formatterLocale, options) {\n    try {\n        return new Intl.DateTimeFormat(formatterLocale, options);\n    }\n    catch (error) {\n        console.error(\"@procore/core-react Intl.DateTimeFormat error for locale \".concat(formatterLocale, \". Will fall back to en-US\"), error);\n        return new Intl.DateTimeFormat('en-US', options);\n    }\n}\nvar mapFormatToParts = function (parts) { return parts.map(pseudoFormatPart); };\nexport function intlDateTimeFormat(locale, options) {\n    if (options === void 0) { options = {}; }\n    if (!locale) {\n        throw new Error('Locale is a required parameter.');\n    }\n    var formatterLocale = getFormatterLocale(locale);\n    var formatter = formatterFactory(formatterLocale, options);\n    return locale === 'pseudo'\n        ? {\n            format: function (date) { return pseudoDate(formatter.format(date)); },\n            formatToParts: function (date) {\n                return mapFormatToParts(formatter.formatToParts(date));\n            },\n            resolvedOptions: function () { return formatter.resolvedOptions(); },\n        }\n        : formatter;\n}\nexport function toDate(date, log) {\n    if (date instanceof Date) {\n        return date;\n    }\n    if (!isNaN(Date.parse(date))) {\n        return new Date(date);\n    }\n    if (log) {\n        console.warn(\"@procore/core-react: \".concat(log, \"; toDate invalid date format\"), date);\n    }\n    return date;\n}\n// Date should already be shifted to the time zone, meaning we already have the date in location and\n// now we need it in a specific style https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#valid_datetime_values\n// toLocaleDateString uses Intl DateTimeFormat\n// alternative toLocaleDateString('en-GB', { timeZone })\nexport function formatMachineDate(date) {\n    return date.toLocaleDateString('en-GB').split('/').reverse().join('-');\n}\n"]},"metadata":{},"sourceType":"module"}