{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { addSubcomponents } from '../../utils/addSubcomponents';\nimport { Tooltip as TooltipBase } from '../Tooltip';\nimport { StyledContainer, StyledLabel, StyledSegment } from './SegmentedController.styles';\n\nfunction noop() {}\n\nfunction isSegment(node) {\n  return typeof node === 'object' && node.type === Segment;\n}\n\nvar SegmentedController_ = React.forwardRef(function SegmentedController(_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.block,\n      block = _b === void 0 ? false : _b,\n      active = _a.active,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _a.onChange,\n      onChange = _d === void 0 ? noop : _d,\n      props = __rest(_a, [\"children\", \"className\", \"block\", \"active\", \"disabled\", \"onChange\"]);\n\n  return React.createElement(StyledContainer, __assign({\n    block: block,\n    ref: ref\n  }, props), React.Children.toArray(children).filter(function (child) {\n    return isSegment(child);\n  }).map(function (child, i) {\n    return React.cloneElement(child, {\n      active: active === i || child.props.active,\n      disabled: disabled || child.props.disabled,\n      onClick: child.props.onClick ? child.props.onClick : function () {\n        return onChange === null || onChange === void 0 ? void 0 : onChange(i);\n      }\n    });\n  }));\n});\nexport var Segment = React.forwardRef(function Segment(_a, ref) {\n  var _b = _a.active,\n      active = _b === void 0 ? false : _b,\n      children = _a.children,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _a.placement,\n      placement = _d === void 0 ? 'top' : _d,\n      tooltip = _a.tooltip,\n      props = __rest(_a, [\"active\", \"children\", \"disabled\", \"placement\", \"tooltip\"]);\n\n  return React.createElement(Tooltip, {\n    overlay: tooltip,\n    placement: placement\n  }, React.createElement(StyledSegment, __assign({}, props, {\n    ref: ref,\n    active: active,\n    disabled: disabled,\n    \"aria-selected\": active,\n    type: \"button\"\n  }), React.createElement(StyledLabel, null, children)));\n});\n/**\n * @deprecated\n *\n * The `SegmentedController.Tooltip` component has been deprecated will be\n * removed in a future version.\n *\n * Tooltips are now built into `SegmentedController.Segment`s, and can be added\n * by configuring the `tooltip` prop.\n *\n * **Before**\n *\n * ```\n * <SegmentedController>\n *   <SegmentedController.Tooltip tooltip=\"Item 1 is the first item\">\n *     <SegmentedController.Segment>\n *       Item 1\n *     </SegmentedController.Segment>\n *   </SegmentedController.Tooltip>\n * </SegmentedController>\n * ```\n *\n * **After**\n *\n * ```\n * <SegmentedController>\n *   <SegmentedController.Segment tooltip=\"Item 1 is the first item\">\n *     Item 1\n *   </SegmentedController.Segment>\n * </SegmentedController>\n * ```\n *\n * @deprecatedSince 10.20.0\n */\n\nexport var Tooltip = React.forwardRef(function Tooltip(_a, ref) {\n  var children = _a.children,\n      overlay = _a.overlay,\n      props = __rest(_a, [\"children\", \"overlay\"]);\n\n  return overlay ? React.createElement(TooltipBase, __assign({}, props, {\n    overlay: overlay,\n    ref: ref,\n    trigger: \"hover\"\n  }), children) : React.createElement(React.Fragment, null, children);\n});\n\nvar withState = function (config) {\n  return function (Component) {\n    return function (props) {\n      var _a = React.useState(0),\n          selectedIndex = _a[0],\n          setSelected = _a[1];\n\n      return React.createElement(Component, __assign({}, __assign(__assign({}, props), {\n        selectedIndex: selectedIndex,\n        setSelected: setSelected\n      })));\n    };\n  };\n};\n/**\n * @deprecated\n *\n * This `SegmentedController.State` utility has been deprecated. Please just\n * use a simple state management hook instead.\n *\n *\n * **Before**\n *\n * ```\n * <SegmentedController.State>\n *   {({ selectedIndex, setSelected }) => (\n *     <SegmentedController>\n *       <SegmentedController.Segment onClick={() => setSelected(0)} active={selectedIndex === 0}>\n *         Item 1\n *       </SegmentedController.Segment>\n *     </SegmentedController>\n *   )}\n * </SegmentedController.State>\n * ```\n *\n * **After**\n *\n * ```\n * const [selected, setSelected] = React.useState(0)\n *\n * <SegmentedController onChange={setSelected}>\n *   <SegmentedController.Segment active={selectedIndex === 0}>\n *     Item 1\n *   </SegmentedController.Segment>\n * </SegmentedController>\n * ```\n *\n * @deprecatedSince 10.20.0\n */\n\n\nexport var State = withState({})(function (_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return children(props);\n});\nSegmentedController_.displayName = 'SegmentedController';\nSegment.displayName = 'SegmentedController.Segment';\nTooltip.displayName = 'SegmentedController.Tooltip';\nexport var SegmentedController = addSubcomponents({\n  Segment: Segment,\n  State: State,\n  Tooltip: Tooltip\n}, SegmentedController_);","map":{"version":3,"sources":["../../../../src/components/SegmentedController/SegmentedController.tsx"],"names":[],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport { addSubcomponents } from '../../utils/addSubcomponents';\nimport { Tooltip as TooltipBase } from '../Tooltip';\nimport { StyledContainer, StyledLabel, StyledSegment, } from './SegmentedController.styles';\nfunction noop() { }\nfunction isSegment(node) {\n    return typeof node === 'object' && node.type === Segment;\n}\nvar SegmentedController_ = React.forwardRef(function SegmentedController(_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.block, block = _b === void 0 ? false : _b, active = _a.active, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.onChange, onChange = _d === void 0 ? noop : _d, props = __rest(_a, [\"children\", \"className\", \"block\", \"active\", \"disabled\", \"onChange\"]);\n    return (React.createElement(StyledContainer, __assign({ block: block, ref: ref }, props), React.Children.toArray(children)\n        .filter(function (child) { return isSegment(child); })\n        .map(function (child, i) {\n        return React.cloneElement(child, {\n            active: active === i || child.props.active,\n            disabled: disabled || child.props.disabled,\n            onClick: child.props.onClick\n                ? child.props.onClick\n                : function () { return onChange === null || onChange === void 0 ? void 0 : onChange(i); },\n        });\n    })));\n});\nexport var Segment = React.forwardRef(function Segment(_a, ref) {\n    var _b = _a.active, active = _b === void 0 ? false : _b, children = _a.children, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.placement, placement = _d === void 0 ? 'top' : _d, tooltip = _a.tooltip, props = __rest(_a, [\"active\", \"children\", \"disabled\", \"placement\", \"tooltip\"]);\n    return (React.createElement(Tooltip, { overlay: tooltip, placement: placement },\n        React.createElement(StyledSegment, __assign({}, props, { ref: ref, active: active, disabled: disabled, \"aria-selected\": active, type: \"button\" }),\n            React.createElement(StyledLabel, null, children))));\n});\n/**\n * @deprecated\n *\n * The `SegmentedController.Tooltip` component has been deprecated will be\n * removed in a future version.\n *\n * Tooltips are now built into `SegmentedController.Segment`s, and can be added\n * by configuring the `tooltip` prop.\n *\n * **Before**\n *\n * ```\n * <SegmentedController>\n *   <SegmentedController.Tooltip tooltip=\"Item 1 is the first item\">\n *     <SegmentedController.Segment>\n *       Item 1\n *     </SegmentedController.Segment>\n *   </SegmentedController.Tooltip>\n * </SegmentedController>\n * ```\n *\n * **After**\n *\n * ```\n * <SegmentedController>\n *   <SegmentedController.Segment tooltip=\"Item 1 is the first item\">\n *     Item 1\n *   </SegmentedController.Segment>\n * </SegmentedController>\n * ```\n *\n * @deprecatedSince 10.20.0\n */\nexport var Tooltip = React.forwardRef(function Tooltip(_a, ref) {\n    var children = _a.children, overlay = _a.overlay, props = __rest(_a, [\"children\", \"overlay\"]);\n    return overlay ? (React.createElement(TooltipBase, __assign({}, props, { overlay: overlay, ref: ref, trigger: \"hover\" }), children)) : (React.createElement(React.Fragment, null, children));\n});\nvar withState = function (config) { return function (Component) { return function (props) {\n    var _a = React.useState(0), selectedIndex = _a[0], setSelected = _a[1];\n    return React.createElement(Component, __assign({}, __assign(__assign({}, props), { selectedIndex: selectedIndex, setSelected: setSelected })));\n}; }; };\n/**\n * @deprecated\n *\n * This `SegmentedController.State` utility has been deprecated. Please just\n * use a simple state management hook instead.\n *\n *\n * **Before**\n *\n * ```\n * <SegmentedController.State>\n *   {({ selectedIndex, setSelected }) => (\n *     <SegmentedController>\n *       <SegmentedController.Segment onClick={() => setSelected(0)} active={selectedIndex === 0}>\n *         Item 1\n *       </SegmentedController.Segment>\n *     </SegmentedController>\n *   )}\n * </SegmentedController.State>\n * ```\n *\n * **After**\n *\n * ```\n * const [selected, setSelected] = React.useState(0)\n *\n * <SegmentedController onChange={setSelected}>\n *   <SegmentedController.Segment active={selectedIndex === 0}>\n *     Item 1\n *   </SegmentedController.Segment>\n * </SegmentedController>\n * ```\n *\n * @deprecatedSince 10.20.0\n */\nexport var State = withState({})(function (_a) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    return children(props);\n});\nSegmentedController_.displayName = 'SegmentedController';\nSegment.displayName = 'SegmentedController.Segment';\nTooltip.displayName = 'SegmentedController.Tooltip';\nexport var SegmentedController = addSubcomponents({\n    Segment: Segment,\n    State: State,\n    Tooltip: Tooltip,\n}, SegmentedController_);\n"]},"metadata":{},"sourceType":"module"}