{"ast":null,"code":"import { useEventListener } from './EventListener'; // to support MenuRef had to change to any. Could manually do <HTMLElement & MenuRef> but seems brittle\n\nexport function isEventSource(ref, event) {\n  if ((ref === null || ref === void 0 ? void 0 : ref.current) && event && (event.target instanceof HTMLElement || event.target instanceof SVGElement)) {\n    return ref.current.contains(event.target);\n  } else {\n    return false;\n  }\n}\nexport function useClickOutside(_a) {\n  var _b = _a.refs,\n      refs = _b === void 0 ? [] : _b,\n      onClickOutside = _a.onClickOutside;\n\n  var handler = function (event) {\n    if (onClickOutside && !refs.find(function (ref) {\n      return isEventSource(ref, event);\n    })) {\n      onClickOutside(event);\n    }\n  };\n\n  var options = {\n    capture: true\n  };\n  useEventListener({\n    event: 'click',\n    handler: handler,\n    options: options\n  });\n  useEventListener({\n    event: 'touchend',\n    handler: handler,\n    options: options\n  });\n}","map":{"version":3,"sources":["../../../src/effects/ClickOutside.ts"],"names":[],"mappings":"AACA,SAAS,gBAAT,QAAiC,iBAAjC,C,CAWA;;AACA,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAmD,KAAnD,EAA+D;AACnE,MACE,CAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,OAAL,KACA,KADA,KAEC,KAAK,CAAC,MAAN,YAAwB,WAAxB,IAAuC,KAAK,CAAC,MAAN,YAAwB,UAFhE,CADF,EAIE;AACA,WAAO,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAqB,KAAK,CAAC,MAA3B,CAAP;AACD,GAND,MAMO;AACL,WAAO,KAAP;AACD;AACF;AAED,OAAM,SAAU,eAAV,CAA0B,EAA1B,EAGe;MAFnB,EAAA,GAAA,EAAA,CAAA,I;MAAA,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,E;MACT,cAAc,GAAA,EAAA,CAAA,c;;AAEd,MAAM,OAAO,GAAG,UAAC,KAAD,EAAkB;AAChC,QAAI,cAAc,IAAI,CAAC,IAAI,CAAC,IAAL,CAAU,UAAC,GAAD,EAAI;AAAK,aAAA,aAAa,CAAC,GAAD,EAAb,KAAa,CAAb;AAAyB,KAA5C,CAAvB,EAAsE;AACpE,MAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GAJD;;AAMA,MAAM,OAAO,GAAG;AAAE,IAAA,OAAO,EAAE;AAAX,GAAhB;AAEA,EAAA,gBAAgB,CAAC;AAAE,IAAA,KAAK,EAAE,OAAT;AAAkB,IAAA,OAAO,EAAA,OAAzB;AAA2B,IAAA,OAAO,EAAA;AAAlC,GAAD,CAAhB;AAEA,EAAA,gBAAgB,CAAC;AAAE,IAAA,KAAK,EAAE,UAAT;AAAqB,IAAA,OAAO,EAAA,OAA5B;AAA8B,IAAA,OAAO,EAAA;AAArC,GAAD,CAAhB;AACD","sourcesContent":["import { useEventListener } from './EventListener';\n// to support MenuRef had to change to any. Could manually do <HTMLElement & MenuRef> but seems brittle\nexport function isEventSource(ref, event) {\n    if ((ref === null || ref === void 0 ? void 0 : ref.current) &&\n        event &&\n        (event.target instanceof HTMLElement || event.target instanceof SVGElement)) {\n        return ref.current.contains(event.target);\n    }\n    else {\n        return false;\n    }\n}\nexport function useClickOutside(_a) {\n    var _b = _a.refs, refs = _b === void 0 ? [] : _b, onClickOutside = _a.onClickOutside;\n    var handler = function (event) {\n        if (onClickOutside && !refs.find(function (ref) { return isEventSource(ref, event); })) {\n            onClickOutside(event);\n        }\n    };\n    var options = { capture: true };\n    useEventListener({ event: 'click', handler: handler, options: options });\n    useEventListener({ event: 'touchend', handler: handler, options: options });\n}\n"]},"metadata":{},"sourceType":"module"}