{"ast":null,"code":"import React from 'react'; // Browsers occasionally miscalculate scroll and client width/height by one pixel up or down\n//  so we're use |x| > 1 instead of x > 0 assertion eliminating the issue at the cost of\n//  a false-negative result if the content is overflowing by just 1 pixel\n\nfunction isContentOverflowing(length, visibleLength) {\n  return Math.abs(length - visibleLength) > 1;\n}\n\nfunction isContentOverflowingX(node) {\n  return isContentOverflowing(node.scrollWidth, node.clientWidth);\n}\n\nfunction isContentOverflowingY(node) {\n  return isContentOverflowing(node.scrollHeight, node.clientHeight);\n}\n\nexport function useOverflowObserver() {\n  var _a = React.useState(false),\n      isOverflowingX = _a[0],\n      setIsOverflowingX = _a[1];\n\n  var _b = React.useState(false),\n      isOverflowingY = _b[0],\n      setIsOverflowingY = _b[1];\n\n  var ref = function (node) {\n    if (!node) {\n      return;\n    }\n\n    var newIsOverflowingX = isContentOverflowingX(node);\n\n    if (newIsOverflowingX !== isOverflowingX) {\n      setIsOverflowingX(newIsOverflowingX);\n    }\n\n    var newIsOverflowingY = isContentOverflowingY(node);\n\n    if (newIsOverflowingY !== isOverflowingY) {\n      setIsOverflowingY(newIsOverflowingY);\n    }\n  };\n\n  return {\n    ref: ref,\n    isOverflowingX: isOverflowingX,\n    isOverflowingY: isOverflowingY,\n    isOverflowing: isOverflowingX || isOverflowingY\n  };\n}\nexport function OverflowObserver(_a) {\n  var children = _a.children;\n\n  var _b = useOverflowObserver(),\n      ref = _b.ref,\n      isOverflowing = _b.isOverflowing,\n      isOverflowingX = _b.isOverflowingX,\n      isOverflowingY = _b.isOverflowingY;\n\n  if (typeof children !== 'function') {\n    console.warn(\"OverflowObserver: expected a function as \\\"children\\\" prop, received \".concat(typeof children));\n    return children;\n  }\n\n  return children({\n    ref: ref,\n    isOverflowing: isOverflowing,\n    isOverflowingX: isOverflowingX,\n    isOverflowingY: isOverflowingY\n  });\n}","map":{"version":3,"sources":["../../../../src/effects/OverflowObserver/OverflowObserver.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;;AACA,SAAS,oBAAT,CAA8B,MAA9B,EAA8C,aAA9C,EAAmE;AACjE,SAAO,IAAI,CAAC,GAAL,CAAS,MAAM,GAAG,aAAlB,IAAmC,CAA1C;AACD;;AAED,SAAS,qBAAT,CAA+B,IAA/B,EAAgD;AAC9C,SAAO,oBAAoB,CAAC,IAAI,CAAC,WAAN,EAAmB,IAAI,CAAC,WAAxB,CAA3B;AACD;;AAED,SAAS,qBAAT,CAA+B,IAA/B,EAAgD;AAC9C,SAAO,oBAAoB,CAAC,IAAI,CAAC,YAAN,EAAoB,IAAI,CAAC,YAAzB,CAA3B;AACD;;AAED,OAAM,SAAU,mBAAV,GAA6B;AAC3B,MAAA,EAAA,GAAsC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAtC;AAAA,MAAC,cAAc,GAAA,EAAA,CAAA,CAAA,CAAf;AAAA,MAAiB,iBAAiB,GAAA,EAAA,CAAA,CAAA,CAAlC;;AACA,MAAA,EAAA,GAAsC,KAAK,CAAC,QAAN,CAAe,KAAf,CAAtC;AAAA,MAAC,cAAc,GAAA,EAAA,CAAA,CAAA,CAAf;AAAA,MAAiB,iBAAiB,GAAA,EAAA,CAAA,CAAA,CAAlC;;AAEN,MAAM,GAAG,GAAG,UAAC,IAAD,EAAyB;AACnC,QAAI,CAAC,IAAL,EAAW;AACT;AACD;;AAED,QAAM,iBAAiB,GAAG,qBAAqB,CAAC,IAAD,CAA/C;;AACA,QAAI,iBAAiB,KAAK,cAA1B,EAA0C;AACxC,MAAA,iBAAiB,CAAC,iBAAD,CAAjB;AACD;;AAED,QAAM,iBAAiB,GAAG,qBAAqB,CAAC,IAAD,CAA/C;;AACA,QAAI,iBAAiB,KAAK,cAA1B,EAA0C;AACxC,MAAA,iBAAiB,CAAC,iBAAD,CAAjB;AACD;AACF,GAdD;;AAgBA,SAAO;AACL,IAAA,GAAG,EAAA,GADE;AAEL,IAAA,cAAc,EAAA,cAFT;AAGL,IAAA,cAAc,EAAA,cAHT;AAIL,IAAA,aAAa,EAAE,cAAc,IAAI;AAJ5B,GAAP;AAMD;AAED,OAAM,SAAU,gBAAV,CAA2B,EAA3B,EAA8D;MAAjC,QAAQ,GAAA,EAAA,CAAA,Q;;AACnC,MAAA,EAAA,GACJ,mBAAmB,EADf;AAAA,MAAE,GAAG,GAAA,EAAA,CAAA,GAAL;AAAA,MAAO,aAAa,GAAA,EAAA,CAAA,aAApB;AAAA,MAAsB,cAAc,GAAA,EAAA,CAAA,cAApC;AAAA,MAAsC,cAAc,GAAA,EAAA,CAAA,cAApD;;AAGN,MAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,IAAA,OAAO,CAAC,IAAR,CACE,wEAAA,MAAA,CAAsE,OAAO,QAA7E,CADF;AAGA,WAAO,QAAP;AACD;;AAED,SAAO,QAAQ,CAAC;AAAE,IAAA,GAAG,EAAA,GAAL;AAAO,IAAA,aAAa,EAAA,aAApB;AAAsB,IAAA,cAAc,EAAA,cAApC;AAAsC,IAAA,cAAc,EAAA;AAApD,GAAD,CAAf;AACD","sourcesContent":["import React from 'react';\n// Browsers occasionally miscalculate scroll and client width/height by one pixel up or down\n//  so we're use |x| > 1 instead of x > 0 assertion eliminating the issue at the cost of\n//  a false-negative result if the content is overflowing by just 1 pixel\nfunction isContentOverflowing(length, visibleLength) {\n    return Math.abs(length - visibleLength) > 1;\n}\nfunction isContentOverflowingX(node) {\n    return isContentOverflowing(node.scrollWidth, node.clientWidth);\n}\nfunction isContentOverflowingY(node) {\n    return isContentOverflowing(node.scrollHeight, node.clientHeight);\n}\nexport function useOverflowObserver() {\n    var _a = React.useState(false), isOverflowingX = _a[0], setIsOverflowingX = _a[1];\n    var _b = React.useState(false), isOverflowingY = _b[0], setIsOverflowingY = _b[1];\n    var ref = function (node) {\n        if (!node) {\n            return;\n        }\n        var newIsOverflowingX = isContentOverflowingX(node);\n        if (newIsOverflowingX !== isOverflowingX) {\n            setIsOverflowingX(newIsOverflowingX);\n        }\n        var newIsOverflowingY = isContentOverflowingY(node);\n        if (newIsOverflowingY !== isOverflowingY) {\n            setIsOverflowingY(newIsOverflowingY);\n        }\n    };\n    return {\n        ref: ref,\n        isOverflowingX: isOverflowingX,\n        isOverflowingY: isOverflowingY,\n        isOverflowing: isOverflowingX || isOverflowingY,\n    };\n}\nexport function OverflowObserver(_a) {\n    var children = _a.children;\n    var _b = useOverflowObserver(), ref = _b.ref, isOverflowing = _b.isOverflowing, isOverflowingX = _b.isOverflowingX, isOverflowingY = _b.isOverflowingY;\n    if (typeof children !== 'function') {\n        console.warn(\"OverflowObserver: expected a function as \\\"children\\\" prop, received \".concat(typeof children));\n        return children;\n    }\n    return children({ ref: ref, isOverflowing: isOverflowing, isOverflowingX: isOverflowingX, isOverflowingY: isOverflowingY });\n}\n"]},"metadata":{},"sourceType":"module"}