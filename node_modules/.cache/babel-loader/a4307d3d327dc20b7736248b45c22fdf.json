{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport React from 'react';\nimport { fillDecimalScaleVariant } from './NumberInput.types';\nimport { defaultLocale, verifyDecimalScale, getLengthInfo, format } from './NumberInput.utils';\nexport function usePrevious(value) {\n  var ref = React.useRef();\n  React.useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\nexport function useNumberFormat(_a) {\n  var _b = _a.decimalScale,\n      _decimalScale = _b === void 0 ? true : _b,\n      _c = _a.fillDecimalScale,\n      fillDecimalScale = _c === void 0 ? fillDecimalScaleVariant.none : _c,\n      _d = _a.locale,\n      _locale = _d === void 0 ? defaultLocale : _d;\n\n  var locale = React.useMemo(function () {\n    return __spreadArray(__spreadArray([], Array.isArray(_locale) ? _locale : [_locale], true), [defaultLocale], false);\n  }, [_locale]);\n\n  var _e = React.useMemo(function () {\n    return {\n      fixedDecimalScale: fillDecimalScale === fillDecimalScaleVariant.always,\n      fillDecimalScaleOnBlur: fillDecimalScale === fillDecimalScaleVariant.onBlur\n    };\n  }, [fillDecimalScale]),\n      fixedDecimalScale = _e.fixedDecimalScale,\n      fillDecimalScaleOnBlur = _e.fillDecimalScaleOnBlur;\n\n  var decimalScale = React.useMemo(function () {\n    return verifyDecimalScale(_decimalScale);\n  }, [_decimalScale]);\n  var formatValue = React.useCallback(function (value) {\n    return format(locale, decimalScale, fillDecimalScale, value);\n  }, [locale, decimalScale, fillDecimalScale]);\n  var getValueLengthInfo = React.useCallback(function (value, isNumericString) {\n    if (isNumericString === void 0) {\n      isNumericString = false;\n    }\n\n    return getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString);\n  }, [locale, decimalScale, fillDecimalScale]);\n  return {\n    formatValue: formatValue,\n    getValueLengthInfo: getValueLengthInfo,\n    locale: locale,\n    fixedDecimalScale: fixedDecimalScale,\n    fillDecimalScaleOnBlur: fillDecimalScaleOnBlur,\n    decimalScale: decimalScale\n  };\n}","map":{"version":3,"sources":["../../../../src/components/NumberInput/NumberInput.hooks.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SACE,uBADF,QAIO,qBAJP;AAKA,SACE,aADF,EAEE,kBAFF,EAGE,aAHF,EAIE,MAJF,QAKO,qBALP;AAOA,OAAM,SAAU,WAAV,CAAyB,KAAzB,EAAiC;AACrC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAN,EAAZ;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,IAAA,GAAG,CAAC,OAAJ,GAAc,KAAd;AACD,GAFD;AAGA,SAAO,GAAG,CAAC,OAAX;AACD;AAED,OAAM,SAAU,eAAV,CAA0B,EAA1B,EAIkB;MAHtB,EAAA,GAAA,EAAA,CAAA,Y;MAAc,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;MAClC,EAAA,GAAA,EAAA,CAAA,gB;MAAA,gBAAgB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,uBAAuB,CAAC,IAA3B,GAA+B,E;MAC/C,EAAA,GAAA,EAAA,CAAA,M;MAAQ,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,aAAH,GAAgB,E;;AAE/B,MAAM,MAAM,GAAG,KAAK,CAAC,OAAN,CACb,YAAA;AAAM,WAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAK,KAAK,CAAC,OAAN,CAAc,OAAd,IAAyB,OAAzB,GAAmC,CAAC,OAAD,CAAxC,EAAkD,IAAlD,CAAA,EAAkD,CAAE,aAAF,CAAlD,EAAA,KAAA,CAAA;AAAkE,GAD3D,EAEb,CAAC,OAAD,CAFa,CAAf;;AAKM,MAAA,EAAA,GAAgD,KAAK,CAAC,OAAN,CACpD,YAAA;AAAM,WAAC;AACL,MAAA,iBAAiB,EAAE,gBAAgB,KAAK,uBAAuB,CAAC,MAD3D;AAEL,MAAA,sBAAsB,EACpB,gBAAgB,KAAK,uBAAuB,CAAC;AAH1C,KAAD;AAIJ,GALkD,EAMpD,CAAC,gBAAD,CANoD,CAAhD;AAAA,MAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAnB;AAAA,MAAqB,sBAAsB,GAAA,EAAA,CAAA,sBAA3C;;AASN,MAAM,YAAY,GAAG,KAAK,CAAC,OAAN,CACnB,YAAA;AAAM,WAAA,kBAAkB,CAAlB,aAAkB,CAAlB;AAAiC,GADpB,EAEnB,CAAC,aAAD,CAFmB,CAArB;AAKA,MAAM,WAAW,GAAG,KAAK,CAAC,WAAN,CAClB,UAAC,KAAD,EAAkB;AAChB,WAAA,MAAM,CAAC,MAAD,EAAS,YAAT,EAAuB,gBAAvB,EAAyC,KAAzC,CAAN;AAAqD,GAFrC,EAGlB,CAAC,MAAD,EAAS,YAAT,EAAuB,gBAAvB,CAHkB,CAApB;AAMA,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAN,CACzB,UAAC,KAAD,EAAoB,eAApB,EAA2C;AAAvB,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAA,KAAA;AAAuB;;AACzC,WAAA,aAAa,CACX,MADW,EAEX,KAFW,EAGX,YAHW,EAIX,gBAJW,EAKX,eALW,CAAb;AAMC,GARsB,EASzB,CAAC,MAAD,EAAS,YAAT,EAAuB,gBAAvB,CATyB,CAA3B;AAYA,SAAO;AACL,IAAA,WAAW,EAAA,WADN;AAEL,IAAA,kBAAkB,EAAA,kBAFb;AAGL,IAAA,MAAM,EAAA,MAHD;AAIL,IAAA,iBAAiB,EAAA,iBAJZ;AAKL,IAAA,sBAAsB,EAAA,sBALjB;AAML,IAAA,YAAY,EAAA;AANP,GAAP;AAQD","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React from 'react';\nimport { fillDecimalScaleVariant, } from './NumberInput.types';\nimport { defaultLocale, verifyDecimalScale, getLengthInfo, format, } from './NumberInput.utils';\nexport function usePrevious(value) {\n    var ref = React.useRef();\n    React.useEffect(function () {\n        ref.current = value;\n    });\n    return ref.current;\n}\nexport function useNumberFormat(_a) {\n    var _b = _a.decimalScale, _decimalScale = _b === void 0 ? true : _b, _c = _a.fillDecimalScale, fillDecimalScale = _c === void 0 ? fillDecimalScaleVariant.none : _c, _d = _a.locale, _locale = _d === void 0 ? defaultLocale : _d;\n    var locale = React.useMemo(function () { return __spreadArray(__spreadArray([], (Array.isArray(_locale) ? _locale : [_locale]), true), [defaultLocale], false); }, [_locale]);\n    var _e = React.useMemo(function () { return ({\n        fixedDecimalScale: fillDecimalScale === fillDecimalScaleVariant.always,\n        fillDecimalScaleOnBlur: fillDecimalScale === fillDecimalScaleVariant.onBlur,\n    }); }, [fillDecimalScale]), fixedDecimalScale = _e.fixedDecimalScale, fillDecimalScaleOnBlur = _e.fillDecimalScaleOnBlur;\n    var decimalScale = React.useMemo(function () { return verifyDecimalScale(_decimalScale); }, [_decimalScale]);\n    var formatValue = React.useCallback(function (value) {\n        return format(locale, decimalScale, fillDecimalScale, value);\n    }, [locale, decimalScale, fillDecimalScale]);\n    var getValueLengthInfo = React.useCallback(function (value, isNumericString) {\n        if (isNumericString === void 0) { isNumericString = false; }\n        return getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString);\n    }, [locale, decimalScale, fillDecimalScale]);\n    return {\n        formatValue: formatValue,\n        getValueLengthInfo: getValueLengthInfo,\n        locale: locale,\n        fixedDecimalScale: fixedDecimalScale,\n        fillDecimalScaleOnBlur: fillDecimalScaleOnBlur,\n        decimalScale: decimalScale,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}