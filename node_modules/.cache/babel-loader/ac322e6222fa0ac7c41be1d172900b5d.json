{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __await = this && this.__await || function (v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\n\nvar __asyncGenerator = this && this.__asyncGenerator || function (thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n};\n\nimport axios from 'axios';\nimport { isFunction } from 'formik';\nimport { runInQueue } from '../utils/runInQueue'; // max number of concurrent connections in most modern browsers\n\nvar maxConcurrentUpload = 6;\nvar progressUpdateInterval = 750;\n\nfunction coroutine(generatorFunction) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var generatorObject = generatorFunction.apply(void 0, args);\n    generatorObject.next();\n    return generatorObject;\n  };\n}\n\nfunction uploadQueue() {\n  return __asyncGenerator(this, arguments, function uploadQueue_1() {\n    var uploadProcess;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          uploadProcess = function () {\n            return Promise.resolve();\n          };\n\n          _a.label = 1;\n\n        case 1:\n          if (!true) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(uploadProcess())];\n\n        case 2:\n          return [4\n          /*yield*/\n          , __await.apply(void 0, [_a.sent()])];\n\n        case 3:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 4:\n          uploadProcess = _a.sent();\n          return [3\n          /*break*/\n          , 1];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nvar queue = coroutine(uploadQueue)();\nexport function useFileUploader(_a) {\n  var _this = this;\n\n  var externalGetEndpoint = _a.getEndpoint,\n      getMethod = _a.getMethod,\n      getPayload = _a.getPayload,\n      getPayloadKey = _a.getPayloadKey,\n      getHeaders = _a.getHeaders,\n      uploadFile = _a.uploadFile;\n\n  if (!externalGetEndpoint && !uploadFile) {\n    throw new Error('FileSelect.LocalSource: neither \"getEndpoint\" nor \"uploadFile\" is defined');\n  }\n\n  return {\n    uploadFiles: function (files, _a) {\n      var onCompleteAll = _a.onCompleteAll,\n          onComplete = _a.onComplete,\n          onError = _a.onError,\n          onProgress = _a.onProgress;\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , queue.next(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var uploadProgressState, updateProgress, completeProgressUpdate, notifyProgress, upload, progressNotifierId;\n\n                  var _this = this;\n\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        uploadProgressState = new Map();\n\n                        updateProgress = function (id, progress) {\n                          var _a;\n\n                          var isCompleted = ((_a = uploadProgressState.get(id)) === null || _a === void 0 ? void 0 : _a.done) || false;\n\n                          if (!isCompleted) {\n                            uploadProgressState.set(id, {\n                              progress: progress,\n                              done: isCompleted\n                            });\n                          }\n                        };\n\n                        completeProgressUpdate = function (fileId) {\n                          uploadProgressState.set(fileId, {\n                            progress: 100,\n                            done: true\n                          });\n                        };\n\n                        notifyProgress = function () {\n                          if (isFunction(onProgress)) {\n                            uploadProgressState.forEach(function (_a, fileId) {\n                              var progress = _a.progress,\n                                  done = _a.done;\n\n                              if (!done) {\n                                onProgress(fileId, progress);\n                              }\n                            });\n                          }\n                        };\n\n                        upload = function (file) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var getEndpoint, execFileUpload, response, err_1;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  getEndpoint = externalGetEndpoint;\n                                  execFileUpload = uploadFile !== null && uploadFile !== void 0 ? uploadFile : uploadFileViaNetwork.bind(null, {\n                                    getEndpoint: getEndpoint,\n                                    getMethod: getMethod,\n                                    getPayload: getPayload,\n                                    getPayloadKey: getPayloadKey,\n                                    getHeaders: getHeaders\n                                  });\n                                  _a.label = 1;\n\n                                case 1:\n                                  _a.trys.push([1, 3, 4, 5]);\n\n                                  return [4\n                                  /*yield*/\n                                  , new Promise(function (resolve, reject) {\n                                    execFileUpload(file.blob, {\n                                      onSuccess: resolve,\n                                      onProgress: function (progress) {\n                                        updateProgress(file.id, progress);\n                                      },\n                                      onError: reject\n                                    });\n                                  })];\n\n                                case 2:\n                                  response = _a.sent();\n                                  onComplete === null || onComplete === void 0 ? void 0 : onComplete(file.id, response);\n                                  return [3\n                                  /*break*/\n                                  , 5];\n\n                                case 3:\n                                  err_1 = _a.sent();\n                                  onError === null || onError === void 0 ? void 0 : onError(file.id, err_1);\n                                  return [3\n                                  /*break*/\n                                  , 5];\n\n                                case 4:\n                                  completeProgressUpdate(file.id);\n                                  return [7\n                                  /*endfinally*/\n                                  ];\n\n                                case 5:\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        };\n\n                        progressNotifierId = setInterval(notifyProgress, progressUpdateInterval);\n                        return [4\n                        /*yield*/\n                        , Promise.all(runInQueue(files, upload, maxConcurrentUpload))];\n\n                      case 1:\n                        _a.sent();\n\n                        clearInterval(progressNotifierId);\n                        onCompleteAll === null || onCompleteAll === void 0 ? void 0 : onCompleteAll();\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              })];\n\n            case 1:\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  };\n}\n\nfunction getDefaultPayload(key, file) {\n  var payload = new FormData();\n  payload.append(key, file);\n  return payload;\n}\n\nfunction uploadFileViaNetwork(_a, file, _b) {\n  var getEndpoint = _a.getEndpoint,\n      _c = _a.getMethod,\n      getMethod = _c === void 0 ? function () {\n    return 'POST';\n  } : _c,\n      _d = _a.getHeaders,\n      getHeaders = _d === void 0 ? function () {\n    return {};\n  } : _d,\n      getPayload = _a.getPayload,\n      _e = _a.getPayloadKey,\n      getPayloadKey = _e === void 0 ? function () {\n    return 'file';\n  } : _e;\n  var onProgress = _b.onProgress,\n      onSuccess = _b.onSuccess,\n      onError = _b.onError;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, method, headers, payload, response, err_2;\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          endpoint = getEndpoint(file);\n          method = getMethod(file);\n          headers = getHeaders(file);\n          payload = isFunction(getPayload) ? getPayload(file) : getDefaultPayload(getPayloadKey(file), file);\n          _f.label = 1;\n\n        case 1:\n          _f.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , axios({\n            url: endpoint,\n            method: method,\n            data: payload,\n            headers: headers,\n            onUploadProgress: function (e) {\n              var progress = Math.floor(e.loaded / e.total * 100);\n              onProgress(progress);\n            }\n          })];\n\n        case 2:\n          response = _f.sent();\n          onSuccess(response.data);\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          err_2 = _f.sent();\n          onError(err_2);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/effects/useFileUploader.tsx"],"names":[],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport axios from 'axios';\nimport { isFunction } from 'formik';\nimport { runInQueue } from '../utils/runInQueue';\n// max number of concurrent connections in most modern browsers\nvar maxConcurrentUpload = 6;\nvar progressUpdateInterval = 750;\nfunction coroutine(generatorFunction) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var generatorObject = generatorFunction.apply(void 0, args);\n        generatorObject.next();\n        return generatorObject;\n    };\n}\nfunction uploadQueue() {\n    return __asyncGenerator(this, arguments, function uploadQueue_1() {\n        var uploadProcess;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    uploadProcess = function () { return Promise.resolve(); };\n                    _a.label = 1;\n                case 1:\n                    if (!true) return [3 /*break*/, 5];\n                    return [4 /*yield*/, __await(uploadProcess())];\n                case 2: return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];\n                case 3: return [4 /*yield*/, _a.sent()];\n                case 4:\n                    uploadProcess = _a.sent();\n                    return [3 /*break*/, 1];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\nvar queue = coroutine(uploadQueue)();\nexport function useFileUploader(_a) {\n    var _this = this;\n    var externalGetEndpoint = _a.getEndpoint, getMethod = _a.getMethod, getPayload = _a.getPayload, getPayloadKey = _a.getPayloadKey, getHeaders = _a.getHeaders, uploadFile = _a.uploadFile;\n    if (!externalGetEndpoint && !uploadFile) {\n        throw new Error('FileSelect.LocalSource: neither \"getEndpoint\" nor \"uploadFile\" is defined');\n    }\n    return {\n        uploadFiles: function (files, _a) {\n            var onCompleteAll = _a.onCompleteAll, onComplete = _a.onComplete, onError = _a.onError, onProgress = _a.onProgress;\n            return __awaiter(_this, void 0, void 0, function () {\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, queue.next(function () { return __awaiter(_this, void 0, void 0, function () {\n                                var uploadProgressState, updateProgress, completeProgressUpdate, notifyProgress, upload, progressNotifierId;\n                                var _this = this;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            uploadProgressState = new Map();\n                                            updateProgress = function (id, progress) {\n                                                var _a;\n                                                var isCompleted = ((_a = uploadProgressState.get(id)) === null || _a === void 0 ? void 0 : _a.done) || false;\n                                                if (!isCompleted) {\n                                                    uploadProgressState.set(id, {\n                                                        progress: progress,\n                                                        done: isCompleted,\n                                                    });\n                                                }\n                                            };\n                                            completeProgressUpdate = function (fileId) {\n                                                uploadProgressState.set(fileId, {\n                                                    progress: 100,\n                                                    done: true,\n                                                });\n                                            };\n                                            notifyProgress = function () {\n                                                if (isFunction(onProgress)) {\n                                                    uploadProgressState.forEach(function (_a, fileId) {\n                                                        var progress = _a.progress, done = _a.done;\n                                                        if (!done) {\n                                                            onProgress(fileId, progress);\n                                                        }\n                                                    });\n                                                }\n                                            };\n                                            upload = function (file) { return __awaiter(_this, void 0, void 0, function () {\n                                                var getEndpoint, execFileUpload, response, err_1;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            getEndpoint = externalGetEndpoint;\n                                                            execFileUpload = uploadFile !== null && uploadFile !== void 0 ? uploadFile : uploadFileViaNetwork.bind(null, {\n                                                                getEndpoint: getEndpoint,\n                                                                getMethod: getMethod,\n                                                                getPayload: getPayload,\n                                                                getPayloadKey: getPayloadKey,\n                                                                getHeaders: getHeaders,\n                                                            });\n                                                            _a.label = 1;\n                                                        case 1:\n                                                            _a.trys.push([1, 3, 4, 5]);\n                                                            return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                                    execFileUpload(file.blob, {\n                                                                        onSuccess: resolve,\n                                                                        onProgress: function (progress) {\n                                                                            updateProgress(file.id, progress);\n                                                                        },\n                                                                        onError: reject,\n                                                                    });\n                                                                })];\n                                                        case 2:\n                                                            response = _a.sent();\n                                                            onComplete === null || onComplete === void 0 ? void 0 : onComplete(file.id, response);\n                                                            return [3 /*break*/, 5];\n                                                        case 3:\n                                                            err_1 = _a.sent();\n                                                            onError === null || onError === void 0 ? void 0 : onError(file.id, err_1);\n                                                            return [3 /*break*/, 5];\n                                                        case 4:\n                                                            completeProgressUpdate(file.id);\n                                                            return [7 /*endfinally*/];\n                                                        case 5: return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); };\n                                            progressNotifierId = setInterval(notifyProgress, progressUpdateInterval);\n                                            return [4 /*yield*/, Promise.all(runInQueue(files, upload, maxConcurrentUpload))];\n                                        case 1:\n                                            _a.sent();\n                                            clearInterval(progressNotifierId);\n                                            onCompleteAll === null || onCompleteAll === void 0 ? void 0 : onCompleteAll();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                        case 1:\n                            _b.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        },\n    };\n}\nfunction getDefaultPayload(key, file) {\n    var payload = new FormData();\n    payload.append(key, file);\n    return payload;\n}\nfunction uploadFileViaNetwork(_a, file, _b) {\n    var getEndpoint = _a.getEndpoint, _c = _a.getMethod, getMethod = _c === void 0 ? function () { return 'POST'; } : _c, _d = _a.getHeaders, getHeaders = _d === void 0 ? function () { return ({}); } : _d, getPayload = _a.getPayload, _e = _a.getPayloadKey, getPayloadKey = _e === void 0 ? function () { return 'file'; } : _e;\n    var onProgress = _b.onProgress, onSuccess = _b.onSuccess, onError = _b.onError;\n    return __awaiter(this, void 0, void 0, function () {\n        var endpoint, method, headers, payload, response, err_2;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    endpoint = getEndpoint(file);\n                    method = getMethod(file);\n                    headers = getHeaders(file);\n                    payload = isFunction(getPayload)\n                        ? getPayload(file)\n                        : getDefaultPayload(getPayloadKey(file), file);\n                    _f.label = 1;\n                case 1:\n                    _f.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, axios({\n                            url: endpoint,\n                            method: method,\n                            data: payload,\n                            headers: headers,\n                            onUploadProgress: function (e) {\n                                var progress = Math.floor((e.loaded / e.total) * 100);\n                                onProgress(progress);\n                            },\n                        })];\n                case 2:\n                    response = _f.sent();\n                    onSuccess(response.data);\n                    return [3 /*break*/, 4];\n                case 3:\n                    err_2 = _f.sent();\n                    onError(err_2);\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}