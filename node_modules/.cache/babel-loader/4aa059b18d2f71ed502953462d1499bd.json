{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ChevronDown, ChevronRight, File, Folder } from '@procore/core-icons/dist';\nimport React from 'react';\nimport { areEqual, FixedSizeList } from 'react-window';\nimport { useIntersectionObserver } from '../../effects/IntersectionObserver';\nimport { mergeRefs } from '../../effects/mergeRefs';\nimport { useResizeObserver } from '../../effects/ResizeObserver';\nimport { useI18nContext } from '../../state/I18n';\nimport { useTimer } from '../../state/Timer';\nimport { useVisibility } from '../../state/Visibility';\nimport { parseFilename } from '../../utils/filename';\nimport { Overlay } from '../Overlay';\nimport { Spinner } from '../Spinner';\nimport { Tooltip } from '../Tooltip';\nimport { useTree } from './Tree.hooks';\nimport { StyledChevronContainer, StyledFilenameCaption, StyledIconContainer, StyledTree, StyledTreeRowContainer, StyledTreeRowContent, StyledTreeRowWrapper } from './Tree.styles';\nvar spacing = 32;\nvar rootSpacing = 24;\nvar rowHeight = 36; // Selected nodes have a bold text, and browsers occasionally miscalculate scrollWidth by one pixel down.\n// That situations might cause an issue when we get a second horizontal scrollbar.\n// This padding serves as compensation to prevent the described issue.\n\nvar rowRightPadding = 12; // For most of browsers it usually varies between 12px and 20px.\n// To avoid tricky cross-browser calculations of scrollbar width. The maximum width is used.\n\nvar scrollbarWidth = 20;\n\nfunction getPadding(level) {\n  return rootSpacing + level * spacing;\n}\n\nvar intersectionThresholds = Array.from({\n  length: 101\n}).map(function (_, index) {\n  return index / 100;\n});\nvar tooltipDelay = 300; // TODO refactor this to not be upper snake case\n\nexport var ROOT_NODE_ID = 'ROOT_ID';\n\nvar defaultIsExpandable = function (node) {\n  return defaultGetType(node) === 'branch';\n};\n\nvar defaultIsSelectable = function (node) {\n  return node.type === 'leaf';\n};\n\nvar defaultGetType = function (node) {\n  return node.type;\n};\n\nvar defaultGetParentId = function (node) {\n  return node.parentId;\n};\n\nvar defaultGetLabel = function (node) {\n  return node.name;\n};\n\nfunction noop() {}\n\nexport var Tree = React.forwardRef(function (_a, ref) {\n  var options = _a.options,\n      _b = _a.expanded,\n      expanded = _b === void 0 ? [] : _b,\n      _c = _a.selected,\n      selected = _c === void 0 ? [] : _c,\n      _d = _a.selectionLimit,\n      selectionLimit = _d === void 0 ? Infinity : _d,\n      getRootBase = _a.getRoot,\n      getChildrenBase = _a.getChildren,\n      getIconBase = _a.getIcon,\n      _e = _a.getLabel,\n      getLabel = _e === void 0 ? defaultGetLabel : _e,\n      _f = _a.getParentId,\n      getParentId = _f === void 0 ? defaultGetParentId : _f,\n      _g = _a.getType,\n      getType = _g === void 0 ? defaultGetType : _g,\n      _h = _a.isExpandable,\n      isExpandable = _h === void 0 ? defaultIsExpandable : _h,\n      _j = _a.isSelectable,\n      isSelectable = _j === void 0 ? defaultIsSelectable : _j,\n      _k = _a.multiple,\n      multiple = _k === void 0 ? true : _k,\n      _l = _a.onSelect,\n      onSelect = _l === void 0 ? noop : _l,\n      _m = _a.onCollapse,\n      onCollapse = _m === void 0 ? noop : _m,\n      _o = _a.onExpand,\n      onExpand = _o === void 0 ? function () {\n    return Promise.resolve();\n  } : _o,\n      rowRendererBase = _a.rowRenderer,\n      _p = _a.maxVisibleNodes,\n      maxVisibleNodes = _p === void 0 ? Infinity : _p,\n      visibleHeight = _a.visibleHeight,\n      _q = _a.autoExpandParent,\n      autoExpandParent = _q === void 0 ? true : _q,\n      innerElementType = _a.innerElementType,\n      outerElementType = _a.outerElementType,\n      onKeyDown = _a.onKeyDown,\n      children = _a.children,\n      props = __rest(_a, [\"options\", \"expanded\", \"selected\", \"selectionLimit\", \"getRoot\", \"getChildren\", \"getIcon\", \"getLabel\", \"getParentId\", \"getType\", \"isExpandable\", \"isSelectable\", \"multiple\", \"onSelect\", \"onCollapse\", \"onExpand\", \"rowRenderer\", \"maxVisibleNodes\", \"visibleHeight\", \"autoExpandParent\", \"innerElementType\", \"outerElementType\", \"onKeyDown\", \"children\"]);\n\n  var wrapperRef = React.useRef(null);\n  var listRef = React.useRef(null);\n  var listInnerRef = React.useRef(null);\n  var listOuterRefRef = React.useRef(null);\n\n  var _r = React.useState(0),\n      contentMaxWidth = _r[0],\n      setContentMaxWidth = _r[1];\n\n  var defaultGetRoot = React.useCallback(function (nodes) {\n    return nodes.find(function (node) {\n      return defaultGetParentId(node) === ROOT_NODE_ID;\n    });\n  }, []);\n  var getRoot = getRootBase || defaultGetRoot;\n  var rootNode = React.useMemo(function () {\n    return getRoot(options);\n  }, [options, getRoot]);\n\n  var _s = React.useState(false),\n      isTreeFocused = _s[0],\n      setIsTreeFocused = _s[1];\n\n  var _t = React.useState({\n    width: 0,\n    height: 0\n  }),\n      containerSize = _t[0],\n      setContainerSize = _t[1];\n\n  var handleContainerResize = React.useCallback(function (entries) {\n    if (entries[0]) {\n      var _a = entries[0].target,\n          height = _a.clientHeight,\n          width = _a.clientWidth;\n      setContainerSize({\n        width: width,\n        height: height\n      });\n    }\n  }, [setContainerSize]);\n  var setResizeObserverTarget = useResizeObserver(handleContainerResize);\n  var defaultGetChildren = React.useCallback(function (node) {\n    return Array.isArray(options) ? options.filter(function (childNode) {\n      return getParentId(childNode) === node.id;\n    }) : [];\n  }, [getParentId, options]);\n  var getChildren = getChildrenBase || defaultGetChildren;\n\n  var _u = useTree({\n    options: options,\n    expanded: expanded,\n    selected: selected,\n    selectionLimit: selectionLimit,\n    multiple: multiple,\n    autoExpandParent: autoExpandParent,\n    onSelect: onSelect,\n    onCollapse: onCollapse,\n    onExpand: onExpand,\n    getRoot: getRoot,\n    getChildren: getChildren,\n    getParentId: getParentId\n  }),\n      nodes = _u.nodes,\n      isExpanded = _u.isExpanded,\n      isSelected = _u.isSelected,\n      isLoading = _u.isLoading,\n      highlightedNode = _u.highlightedNode,\n      isNodeHighlighted = _u.isHighlighted,\n      highlight = _u.highlight,\n      handleSelection = _u.handleSelection,\n      handleExpansion = _u.handleExpansion,\n      _setExpanded = _u.setExpanded,\n      _setSelected = _u.setSelected,\n      isFileLimitReached = _u.isFileLimitReached,\n      listNavigation = _u.listNavigation;\n\n  var setSelected = React.useCallback(function (selected) {\n    var nodes = Array.isArray(selected) ? selected : [selected];\n\n    _setSelected(new Set(nodes.map(function (node) {\n      return node.id;\n    })));\n  }, [_setSelected]);\n  var setExpanded = React.useCallback(function (expanded) {\n    var nodes = Array.isArray(expanded) ? expanded : [expanded];\n\n    _setExpanded(new Set(nodes.map(function (node) {\n      return node.id;\n    })));\n  }, [_setExpanded]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      rootEl: wrapperRef.current,\n      setSelected: setSelected,\n      setExpanded: setExpanded,\n      toggleSelected: function (node) {\n        return handleSelection(node);\n      },\n      toggleExpanded: function (node) {\n        return handleExpansion(node);\n      }\n    };\n  });\n  var defaultGetIcon = React.useCallback(function (node) {\n    var isFolder = getType(node) === 'branch';\n    return isFolder ? React.createElement(Folder, null) : React.createElement(File, null);\n  }, [getType]);\n  var getIcon = getIconBase || defaultGetIcon;\n  var isHighlighted = React.useCallback(function (node) {\n    return isTreeFocused && isNodeHighlighted(node);\n  }, [isNodeHighlighted, isTreeFocused]);\n\n  var handleAccessibility = function (e) {\n    onKeyDown && onKeyDown(e);\n    var key = e.key;\n\n    switch (key) {\n      case 'Enter':\n        e.preventDefault();\n        isSelectable(highlightedNode) && handleSelection(highlightedNode);\n        break;\n\n      case 'Space Bar':\n      case ' ':\n        e.preventDefault();\n        isExpandable(highlightedNode) && handleExpansion(highlightedNode);\n        break;\n\n      case 'ArrowDown':\n      case 'Down':\n        e.preventDefault();\n        listNavigation.increment();\n        break;\n\n      case 'ArrowUp':\n      case 'Up':\n        e.preventDefault();\n        listNavigation.decrement();\n        break;\n    }\n  };\n\n  React.useEffect(function () {\n    var _a;\n\n    if (isTreeFocused) {\n      (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.scrollToItem(listNavigation.index);\n    }\n  }, [isTreeFocused, listNavigation.index]);\n  var defaultRowRenderer = React.useCallback(function (props) {\n    return React.createElement(TreeRow, __assign({}, props));\n  }, []);\n  React.useEffect(function () {\n    var _a;\n\n    var rowContentSizes = [];\n    var childNodes = Array.from(((_a = listInnerRef.current) === null || _a === void 0 ? void 0 : _a.childNodes) || []);\n    childNodes.forEach(function (child) {\n      var _a;\n\n      var rowContent = child.querySelector('[data-row-content]');\n\n      if (rowContent) {\n        var leftPadding = (_a = child.dataset.padding) !== null && _a !== void 0 ? _a : '0';\n        rowContentSizes.push(rowContent.scrollWidth + parseInt(leftPadding, 10) + rowRightPadding);\n      }\n    });\n    var maxSizeRowContent = Math.max.apply(Math, rowContentSizes) + scrollbarWidth;\n    setContentMaxWidth(maxSizeRowContent);\n  });\n  var rowRenderer = rowRendererBase || defaultRowRenderer;\n  var itemData = React.useMemo(function () {\n    return {\n      nodes: nodes,\n      getIcon: getIcon,\n      getLabel: getLabel,\n      getType: getType,\n      isExpandable: isExpandable,\n      isSelectable: isSelectable,\n      isExpanded: isExpanded,\n      isSelected: isSelected,\n      isLoading: isLoading,\n      highlight: highlight,\n      isHighlighted: isHighlighted,\n      handleSelection: handleSelection,\n      handleExpansion: handleExpansion,\n      rowRenderer: rowRenderer,\n      isFileLimitReached: isFileLimitReached,\n      selectionLimit: selectionLimit,\n      isTreeFocused: isTreeFocused,\n      treeContainer: wrapperRef.current\n    };\n  }, [getIcon, getLabel, getType, handleExpansion, handleSelection, highlight, isExpandable, isExpanded, isFileLimitReached, isHighlighted, isLoading, isSelectable, isSelected, isTreeFocused, nodes, rowRenderer, selectionLimit]);\n\n  if (!rootNode) {\n    console.error('Tree must have a valid root node');\n    return null;\n  }\n\n  return React.createElement(StyledTree, __assign({}, props, {\n    ref: mergeRefs(wrapperRef, setResizeObserverTarget),\n    tabIndex: 0,\n    onFocus: function () {\n      return setIsTreeFocused(true);\n    },\n    onBlur: function () {\n      return setIsTreeFocused(false);\n    },\n    onKeyDown: handleAccessibility\n  }), React.createElement(FixedSizeList, {\n    ref: listRef,\n    height: visibleHeight || Math.min(nodes.length * rowHeight, rowHeight * maxVisibleNodes),\n    innerRef: listInnerRef,\n    outerRef: listOuterRefRef,\n    itemCount: nodes.length,\n    itemSize: rowHeight,\n    innerElementType: innerElementType,\n    outerElementType: outerElementType,\n    itemData: itemData,\n    width: Math.max(contentMaxWidth, containerSize.width)\n  }, TreeNode));\n});\nvar TreeNode = React.memo(function (_a) {\n  var _b = _a.data,\n      nodes = _b.nodes,\n      rowRenderer = _b.rowRenderer,\n      highlight = _b.highlight,\n      isTreeFocused = _b.isTreeFocused,\n      props = __rest(_b, [\"nodes\", \"rowRenderer\", \"highlight\", \"isTreeFocused\"]),\n      index = _a.index,\n      style = _a.style;\n\n  var node = nodes[index];\n  var isHighlighted = props.isHighlighted(node);\n\n  var _c = React.useState(false),\n      isMouseOver = _c[0],\n      setMouseOver = _c[1];\n\n  var timer = useTimer({});\n\n  var _d = useVisibility({}),\n      shouldShowTooltip = _d.isVisible,\n      showTooltip = _d.show,\n      hideTooltip = _d.hide;\n\n  React.useEffect(function () {\n    if (isHighlighted && !shouldShowTooltip) {\n      timer.setTimer(showTooltip, tooltipDelay);\n    }\n\n    return function () {\n      if (isTreeFocused && !isHighlighted && shouldShowTooltip) {\n        hideTooltip();\n      }\n    };\n  });\n\n  var onMouseEnter = function () {\n    setMouseOver(true);\n\n    if (!shouldShowTooltip) {\n      timer.setTimer(showTooltip, tooltipDelay);\n    }\n\n    highlight(node);\n  };\n\n  var onMouseLeave = function () {\n    setMouseOver(false);\n    timer.cancel();\n    hideTooltip();\n  };\n\n  return React.createElement(StyledTreeRowWrapper, {\n    tabIndex: -1,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    style: style,\n    \"data-padding\": getPadding(node.level)\n  }, rowRenderer(__assign({\n    node: node,\n    shouldShowTooltip: shouldShowTooltip,\n    isMouseOver: isMouseOver\n  }, props)));\n}, areEqual);\n\nvar TreeRow = function (_a) {\n  var node = _a.node,\n      getIcon = _a.getIcon,\n      getLabel = _a.getLabel,\n      handleExpansion = _a.handleExpansion,\n      handleSelection = _a.handleSelection,\n      selectionLimit = _a.selectionLimit,\n      isFileLimitReached = _a.isFileLimitReached,\n      shouldShowTooltip = _a.shouldShowTooltip,\n      isMouseOver = _a.isMouseOver,\n      treeContainer = _a.treeContainer,\n      props = __rest(_a, [\"node\", \"getIcon\", \"getLabel\", \"handleExpansion\", \"handleSelection\", \"selectionLimit\", \"isFileLimitReached\", \"shouldShowTooltip\", \"isMouseOver\", \"treeContainer\"]);\n\n  var expanderRef = React.useRef(null);\n  var isSelected = props.isSelected(node);\n  var isSelectable = props.isSelectable(node);\n  var isExpandable = props.isExpandable(node);\n  var isExpanded = props.isExpanded(node);\n  var isLoading = props.isLoading(node);\n  var isHighlighted = props.isHighlighted(node);\n  var nodeType = props.getType(node);\n  var rowLabel = getLabel(node);\n  var onClick = React.useCallback(function (event) {\n    if (isSelectable && isExpandable) {\n      event.target === expanderRef.current ? handleExpansion(node) : handleSelection(node);\n    } else if (isSelectable) {\n      handleSelection(node);\n    } else if (isExpandable) {\n      handleExpansion(node);\n    }\n  }, [handleExpansion, handleSelection, isExpandable, isSelectable, node]);\n  var onMouseDown = React.useCallback(function (e) {\n    e.preventDefault();\n    treeContainer.focus();\n  }, [treeContainer]);\n  return React.createElement(TreeRowContainer, {\n    level: node.level,\n    onClick: onClick,\n    onMouseDown: onMouseDown,\n    isSelected: isSelected,\n    isSelectable: isSelectable,\n    isExpandable: isExpandable,\n    isHighlighted: isHighlighted,\n    isFileLimitReached: isFileLimitReached,\n    \"data-qa\": \"core-tree-row-container\"\n  }, React.createElement(StyledTreeRowContent, {\n    \"data-row-content\": true\n  }, React.createElement(TreeRowChevron, {\n    ref: expanderRef,\n    isExpandable: isExpandable,\n    isExpanded: isExpanded\n  }), React.createElement(TreeRowIcon, {\n    isLoading: isLoading,\n    isSelected: isSelected,\n    icon: getIcon(node)\n  }), React.createElement(TreeRowTooltip, {\n    isSelected: isSelected,\n    isSelectable: isSelectable,\n    isHighlighted: isHighlighted,\n    selectionLimit: selectionLimit,\n    isFileLimitReached: isFileLimitReached,\n    shouldShowTooltip: shouldShowTooltip,\n    isMouseOver: isMouseOver,\n    fileName: rowLabel,\n    nodeType: nodeType,\n    treeContainer: treeContainer\n  }, React.createElement(TreeRowName, {\n    value: rowLabel\n  }))));\n};\n\nvar IconContainer = function (_a) {\n  var children = _a.children,\n      isSelected = _a.isSelected,\n      props = __rest(_a, [\"children\", \"isSelected\"]);\n\n  return React.createElement(StyledIconContainer, __assign({\n    \"$isSelected\": isSelected\n  }, props), children);\n};\n\nvar TreeRowChevron = React.forwardRef(function (_a, ref) {\n  var isExpanded = _a.isExpanded,\n      isExpandable = _a.isExpandable;\n  var icon = isExpanded ? React.createElement(ChevronDown, {\n    ref: ref\n  }) : React.createElement(ChevronRight, {\n    ref: ref\n  });\n  return React.createElement(StyledChevronContainer, null, isExpandable ? icon : null);\n});\n\nvar TreeRowIcon = function (_a) {\n  var isSelected = _a.isSelected,\n      isLoading = _a.isLoading,\n      icon = _a.icon;\n  return React.createElement(IconContainer, {\n    isSelected: isSelected,\n    marginLeft: \"sm\",\n    marginRight: \"sm\"\n  }, isLoading ? React.createElement(Spinner, {\n    size: \"sm\"\n  }) : icon);\n};\n\nvar TreeRowName = function (_a) {\n  var value = _a.value;\n  return React.createElement(StyledFilenameCaption, null, value);\n};\n\nvar TreeRowOverlay = function (_a) {\n  var _b = _a.message,\n      key = _b.key,\n      _c = _b.options,\n      options = _c === void 0 ? {} : _c,\n      props = __rest(_a, [\"message\"]);\n\n  var I18n = useI18nContext();\n  return React.createElement(Overlay, __assign({}, __assign(__assign({}, props), {\n    placement: 'top-left'\n  })), React.createElement(Tooltip.Content, null, I18n.t(\"core.tree.\".concat(key), options)));\n};\n\nvar getSelectionLimitMessage = function (selectionLimit) {\n  return {\n    key: 'selectionLimit',\n    options: {\n      count: selectionLimit\n    }\n  };\n};\n\nvar getUnsupportedFileTypeMessage = function (fileName) {\n  var _a = parseFilename(fileName),\n      extension = _a.extension,\n      isFilename = _a.isFilename;\n\n  var key = isFilename ? 'specific' : 'unspecific';\n  return {\n    key: \"unsupportedFileType.\".concat(key),\n    options: {\n      fileType: \".\".concat(extension.toUpperCase())\n    }\n  };\n};\n\nvar TreeRowTooltip = function (_a) {\n  var children = _a.children,\n      isFocused = _a.isHighlighted,\n      isFileLimitReached = _a.isFileLimitReached,\n      isSelectable = _a.isSelectable,\n      isSelected = _a.isSelected,\n      nodeType = _a.nodeType,\n      selectionLimit = _a.selectionLimit,\n      shouldShowTooltip = _a.shouldShowTooltip,\n      isMouseOver = _a.isMouseOver,\n      fileName = _a.fileName,\n      treeContainer = _a.treeContainer;\n  var rowRef = React.useRef(null);\n  var overlayRef = React.useRef(null);\n  var isUserInteracting = isFocused || isMouseOver;\n  var isTooltipVisible = isUserInteracting && shouldShowTooltip && !isSelected;\n  var isFile = nodeType === 'leaf';\n\n  var _b = React.useState(false),\n      isCropped = _b[0],\n      setCropped = _b[1];\n\n  var registerRowEl = useIntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (entry.rootBounds && entry.rootBounds.left - entry.boundingClientRect.left >= 0) {\n        setCropped(true);\n        return;\n      }\n\n      setCropped(false);\n    });\n  }, {\n    root: treeContainer,\n    rootMargin: '0px',\n    threshold: intersectionThresholds\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    ref: mergeRefs(rowRef, registerRowEl)\n  }, children), isTooltipVisible && !isCropped && React.createElement(React.Fragment, null, isFileLimitReached && isSelectable && React.createElement(TreeRowOverlay, {\n    overlayRef: overlayRef,\n    targetRef: rowRef,\n    message: getSelectionLimitMessage(selectionLimit)\n  }), !isSelectable && isFile && React.createElement(TreeRowOverlay, {\n    overlayRef: overlayRef,\n    targetRef: rowRef,\n    message: getUnsupportedFileTypeMessage(fileName)\n  })));\n};\n\nvar TreeRowContainer = function (_a) {\n  var children = _a.children,\n      isHighlighted = _a.isHighlighted,\n      isSelected = _a.isSelected,\n      isSelectable = _a.isSelectable,\n      isExpandable = _a.isExpandable,\n      isFileLimitReached = _a.isFileLimitReached,\n      level = _a.level,\n      props = __rest(_a, [\"children\", \"isHighlighted\", \"isSelected\", \"isSelectable\", \"isExpandable\", \"isFileLimitReached\", \"level\"]);\n\n  return React.createElement(StyledTreeRowContainer, __assign({\n    isSelectable: isSelectable && (isFileLimitReached && isSelected || !isFileLimitReached) || isExpandable,\n    isHighlighted: isHighlighted,\n    isSelected: isSelected,\n    style: {\n      paddingLeft: getPadding(level)\n    }\n  }, props), children);\n};","map":{"version":3,"sources":["../../../../src/components/Tree/Tree.tsx"],"names":[],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ChevronDown, ChevronRight, File, Folder, } from '@procore/core-icons/dist';\nimport React from 'react';\nimport { areEqual, FixedSizeList } from 'react-window';\nimport { useIntersectionObserver } from '../../effects/IntersectionObserver';\nimport { mergeRefs } from '../../effects/mergeRefs';\nimport { useResizeObserver } from '../../effects/ResizeObserver';\nimport { useI18nContext } from '../../state/I18n';\nimport { useTimer } from '../../state/Timer';\nimport { useVisibility } from '../../state/Visibility';\nimport { parseFilename } from '../../utils/filename';\nimport { Overlay } from '../Overlay';\nimport { Spinner } from '../Spinner';\nimport { Tooltip } from '../Tooltip';\nimport { useTree } from './Tree.hooks';\nimport { StyledChevronContainer, StyledFilenameCaption, StyledIconContainer, StyledTree, StyledTreeRowContainer, StyledTreeRowContent, StyledTreeRowWrapper, } from './Tree.styles';\nvar spacing = 32;\nvar rootSpacing = 24;\nvar rowHeight = 36;\n// Selected nodes have a bold text, and browsers occasionally miscalculate scrollWidth by one pixel down.\n// That situations might cause an issue when we get a second horizontal scrollbar.\n// This padding serves as compensation to prevent the described issue.\nvar rowRightPadding = 12;\n// For most of browsers it usually varies between 12px and 20px.\n// To avoid tricky cross-browser calculations of scrollbar width. The maximum width is used.\nvar scrollbarWidth = 20;\nfunction getPadding(level) {\n    return rootSpacing + level * spacing;\n}\nvar intersectionThresholds = Array.from({ length: 101 }).map(function (_, index) { return index / 100; });\nvar tooltipDelay = 300;\n// TODO refactor this to not be upper snake case\nexport var ROOT_NODE_ID = 'ROOT_ID';\nvar defaultIsExpandable = function (node) { return defaultGetType(node) === 'branch'; };\nvar defaultIsSelectable = function (node) { return node.type === 'leaf'; };\nvar defaultGetType = function (node) {\n    return node.type;\n};\nvar defaultGetParentId = function (node) { return node.parentId; };\nvar defaultGetLabel = function (node) { return node.name; };\nfunction noop() { }\nexport var Tree = React.forwardRef(function (_a, ref) {\n    var options = _a.options, _b = _a.expanded, expanded = _b === void 0 ? [] : _b, _c = _a.selected, selected = _c === void 0 ? [] : _c, _d = _a.selectionLimit, selectionLimit = _d === void 0 ? Infinity : _d, getRootBase = _a.getRoot, getChildrenBase = _a.getChildren, getIconBase = _a.getIcon, _e = _a.getLabel, getLabel = _e === void 0 ? defaultGetLabel : _e, _f = _a.getParentId, getParentId = _f === void 0 ? defaultGetParentId : _f, _g = _a.getType, getType = _g === void 0 ? defaultGetType : _g, _h = _a.isExpandable, isExpandable = _h === void 0 ? defaultIsExpandable : _h, _j = _a.isSelectable, isSelectable = _j === void 0 ? defaultIsSelectable : _j, _k = _a.multiple, multiple = _k === void 0 ? true : _k, _l = _a.onSelect, onSelect = _l === void 0 ? noop : _l, _m = _a.onCollapse, onCollapse = _m === void 0 ? noop : _m, _o = _a.onExpand, onExpand = _o === void 0 ? function () { return Promise.resolve(); } : _o, rowRendererBase = _a.rowRenderer, _p = _a.maxVisibleNodes, maxVisibleNodes = _p === void 0 ? Infinity : _p, visibleHeight = _a.visibleHeight, _q = _a.autoExpandParent, autoExpandParent = _q === void 0 ? true : _q, innerElementType = _a.innerElementType, outerElementType = _a.outerElementType, onKeyDown = _a.onKeyDown, children = _a.children, props = __rest(_a, [\"options\", \"expanded\", \"selected\", \"selectionLimit\", \"getRoot\", \"getChildren\", \"getIcon\", \"getLabel\", \"getParentId\", \"getType\", \"isExpandable\", \"isSelectable\", \"multiple\", \"onSelect\", \"onCollapse\", \"onExpand\", \"rowRenderer\", \"maxVisibleNodes\", \"visibleHeight\", \"autoExpandParent\", \"innerElementType\", \"outerElementType\", \"onKeyDown\", \"children\"]);\n    var wrapperRef = React.useRef(null);\n    var listRef = React.useRef(null);\n    var listInnerRef = React.useRef(null);\n    var listOuterRefRef = React.useRef(null);\n    var _r = React.useState(0), contentMaxWidth = _r[0], setContentMaxWidth = _r[1];\n    var defaultGetRoot = React.useCallback(function (nodes) {\n        return nodes.find(function (node) { return defaultGetParentId(node) === ROOT_NODE_ID; });\n    }, []);\n    var getRoot = getRootBase || defaultGetRoot;\n    var rootNode = React.useMemo(function () { return getRoot(options); }, [options, getRoot]);\n    var _s = React.useState(false), isTreeFocused = _s[0], setIsTreeFocused = _s[1];\n    var _t = React.useState({\n        width: 0,\n        height: 0,\n    }), containerSize = _t[0], setContainerSize = _t[1];\n    var handleContainerResize = React.useCallback(function (entries) {\n        if (entries[0]) {\n            var _a = entries[0]\n                .target, height = _a.clientHeight, width = _a.clientWidth;\n            setContainerSize({ width: width, height: height });\n        }\n    }, [setContainerSize]);\n    var setResizeObserverTarget = useResizeObserver(handleContainerResize);\n    var defaultGetChildren = React.useCallback(function (node) {\n        return Array.isArray(options)\n            ? options.filter(function (childNode) { return getParentId(childNode) === node.id; })\n            : [];\n    }, [getParentId, options]);\n    var getChildren = getChildrenBase || defaultGetChildren;\n    var _u = useTree({\n        options: options,\n        expanded: expanded,\n        selected: selected,\n        selectionLimit: selectionLimit,\n        multiple: multiple,\n        autoExpandParent: autoExpandParent,\n        onSelect: onSelect,\n        onCollapse: onCollapse,\n        onExpand: onExpand,\n        getRoot: getRoot,\n        getChildren: getChildren,\n        getParentId: getParentId,\n    }), nodes = _u.nodes, isExpanded = _u.isExpanded, isSelected = _u.isSelected, isLoading = _u.isLoading, highlightedNode = _u.highlightedNode, isNodeHighlighted = _u.isHighlighted, highlight = _u.highlight, handleSelection = _u.handleSelection, handleExpansion = _u.handleExpansion, _setExpanded = _u.setExpanded, _setSelected = _u.setSelected, isFileLimitReached = _u.isFileLimitReached, listNavigation = _u.listNavigation;\n    var setSelected = React.useCallback(function (selected) {\n        var nodes = Array.isArray(selected) ? selected : [selected];\n        _setSelected(new Set(nodes.map(function (node) { return node.id; })));\n    }, [_setSelected]);\n    var setExpanded = React.useCallback(function (expanded) {\n        var nodes = Array.isArray(expanded) ? expanded : [expanded];\n        _setExpanded(new Set(nodes.map(function (node) { return node.id; })));\n    }, [_setExpanded]);\n    React.useImperativeHandle(ref, function () { return ({\n        rootEl: wrapperRef.current,\n        setSelected: setSelected,\n        setExpanded: setExpanded,\n        toggleSelected: function (node) { return handleSelection(node); },\n        toggleExpanded: function (node) { return handleExpansion(node); },\n    }); });\n    var defaultGetIcon = React.useCallback(function (node) {\n        var isFolder = getType(node) === 'branch';\n        return isFolder ? React.createElement(Folder, null) : React.createElement(File, null);\n    }, [getType]);\n    var getIcon = getIconBase || defaultGetIcon;\n    var isHighlighted = React.useCallback(function (node) { return isTreeFocused && isNodeHighlighted(node); }, [isNodeHighlighted, isTreeFocused]);\n    var handleAccessibility = function (e) {\n        onKeyDown && onKeyDown(e);\n        var key = e.key;\n        switch (key) {\n            case 'Enter':\n                e.preventDefault();\n                isSelectable(highlightedNode) && handleSelection(highlightedNode);\n                break;\n            case 'Space Bar':\n            case ' ':\n                e.preventDefault();\n                isExpandable(highlightedNode) && handleExpansion(highlightedNode);\n                break;\n            case 'ArrowDown':\n            case 'Down':\n                e.preventDefault();\n                listNavigation.increment();\n                break;\n            case 'ArrowUp':\n            case 'Up':\n                e.preventDefault();\n                listNavigation.decrement();\n                break;\n        }\n    };\n    React.useEffect(function () {\n        var _a;\n        if (isTreeFocused) {\n            (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.scrollToItem(listNavigation.index);\n        }\n    }, [isTreeFocused, listNavigation.index]);\n    var defaultRowRenderer = React.useCallback(function (props) { return React.createElement(TreeRow, __assign({}, props)); }, []);\n    React.useEffect(function () {\n        var _a;\n        var rowContentSizes = [];\n        var childNodes = Array.from(((_a = listInnerRef.current) === null || _a === void 0 ? void 0 : _a.childNodes) || []);\n        childNodes.forEach(function (child) {\n            var _a;\n            var rowContent = child.querySelector('[data-row-content]');\n            if (rowContent) {\n                var leftPadding = (_a = child.dataset.padding) !== null && _a !== void 0 ? _a : '0';\n                rowContentSizes.push(rowContent.scrollWidth + parseInt(leftPadding, 10) + rowRightPadding);\n            }\n        });\n        var maxSizeRowContent = Math.max.apply(Math, rowContentSizes) + scrollbarWidth;\n        setContentMaxWidth(maxSizeRowContent);\n    });\n    var rowRenderer = rowRendererBase || defaultRowRenderer;\n    var itemData = React.useMemo(function () { return ({\n        nodes: nodes,\n        getIcon: getIcon,\n        getLabel: getLabel,\n        getType: getType,\n        isExpandable: isExpandable,\n        isSelectable: isSelectable,\n        isExpanded: isExpanded,\n        isSelected: isSelected,\n        isLoading: isLoading,\n        highlight: highlight,\n        isHighlighted: isHighlighted,\n        handleSelection: handleSelection,\n        handleExpansion: handleExpansion,\n        rowRenderer: rowRenderer,\n        isFileLimitReached: isFileLimitReached,\n        selectionLimit: selectionLimit,\n        isTreeFocused: isTreeFocused,\n        treeContainer: wrapperRef.current,\n    }); }, [\n        getIcon,\n        getLabel,\n        getType,\n        handleExpansion,\n        handleSelection,\n        highlight,\n        isExpandable,\n        isExpanded,\n        isFileLimitReached,\n        isHighlighted,\n        isLoading,\n        isSelectable,\n        isSelected,\n        isTreeFocused,\n        nodes,\n        rowRenderer,\n        selectionLimit,\n    ]);\n    if (!rootNode) {\n        console.error('Tree must have a valid root node');\n        return null;\n    }\n    return (React.createElement(StyledTree, __assign({}, props, { ref: mergeRefs(wrapperRef, setResizeObserverTarget), tabIndex: 0, onFocus: function () { return setIsTreeFocused(true); }, onBlur: function () { return setIsTreeFocused(false); }, onKeyDown: handleAccessibility }),\n        React.createElement(FixedSizeList, { ref: listRef, height: visibleHeight ||\n                Math.min(nodes.length * rowHeight, rowHeight * maxVisibleNodes), innerRef: listInnerRef, outerRef: listOuterRefRef, itemCount: nodes.length, itemSize: rowHeight, innerElementType: innerElementType, outerElementType: outerElementType, itemData: itemData, width: Math.max(contentMaxWidth, containerSize.width) }, TreeNode)));\n});\nvar TreeNode = React.memo(function (_a) {\n    var _b = _a.data, nodes = _b.nodes, rowRenderer = _b.rowRenderer, highlight = _b.highlight, isTreeFocused = _b.isTreeFocused, props = __rest(_b, [\"nodes\", \"rowRenderer\", \"highlight\", \"isTreeFocused\"]), index = _a.index, style = _a.style;\n    var node = nodes[index];\n    var isHighlighted = props.isHighlighted(node);\n    var _c = React.useState(false), isMouseOver = _c[0], setMouseOver = _c[1];\n    var timer = useTimer({});\n    var _d = useVisibility({}), shouldShowTooltip = _d.isVisible, showTooltip = _d.show, hideTooltip = _d.hide;\n    React.useEffect(function () {\n        if (isHighlighted && !shouldShowTooltip) {\n            timer.setTimer(showTooltip, tooltipDelay);\n        }\n        return function () {\n            if (isTreeFocused && !isHighlighted && shouldShowTooltip) {\n                hideTooltip();\n            }\n        };\n    });\n    var onMouseEnter = function () {\n        setMouseOver(true);\n        if (!shouldShowTooltip) {\n            timer.setTimer(showTooltip, tooltipDelay);\n        }\n        highlight(node);\n    };\n    var onMouseLeave = function () {\n        setMouseOver(false);\n        timer.cancel();\n        hideTooltip();\n    };\n    return (React.createElement(StyledTreeRowWrapper, { tabIndex: -1, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, style: style, \"data-padding\": getPadding(node.level) }, rowRenderer(__assign({ node: node, shouldShowTooltip: shouldShowTooltip, isMouseOver: isMouseOver }, props))));\n}, areEqual);\nvar TreeRow = function (_a) {\n    var node = _a.node, getIcon = _a.getIcon, getLabel = _a.getLabel, handleExpansion = _a.handleExpansion, handleSelection = _a.handleSelection, selectionLimit = _a.selectionLimit, isFileLimitReached = _a.isFileLimitReached, shouldShowTooltip = _a.shouldShowTooltip, isMouseOver = _a.isMouseOver, treeContainer = _a.treeContainer, props = __rest(_a, [\"node\", \"getIcon\", \"getLabel\", \"handleExpansion\", \"handleSelection\", \"selectionLimit\", \"isFileLimitReached\", \"shouldShowTooltip\", \"isMouseOver\", \"treeContainer\"]);\n    var expanderRef = React.useRef(null);\n    var isSelected = props.isSelected(node);\n    var isSelectable = props.isSelectable(node);\n    var isExpandable = props.isExpandable(node);\n    var isExpanded = props.isExpanded(node);\n    var isLoading = props.isLoading(node);\n    var isHighlighted = props.isHighlighted(node);\n    var nodeType = props.getType(node);\n    var rowLabel = getLabel(node);\n    var onClick = React.useCallback(function (event) {\n        if (isSelectable && isExpandable) {\n            event.target === expanderRef.current\n                ? handleExpansion(node)\n                : handleSelection(node);\n        }\n        else if (isSelectable) {\n            handleSelection(node);\n        }\n        else if (isExpandable) {\n            handleExpansion(node);\n        }\n    }, [handleExpansion, handleSelection, isExpandable, isSelectable, node]);\n    var onMouseDown = React.useCallback(function (e) {\n        e.preventDefault();\n        treeContainer.focus();\n    }, [treeContainer]);\n    return (React.createElement(TreeRowContainer, { level: node.level, onClick: onClick, onMouseDown: onMouseDown, isSelected: isSelected, isSelectable: isSelectable, isExpandable: isExpandable, isHighlighted: isHighlighted, isFileLimitReached: isFileLimitReached, \"data-qa\": \"core-tree-row-container\" },\n        React.createElement(StyledTreeRowContent, { \"data-row-content\": true },\n            React.createElement(TreeRowChevron, { ref: expanderRef, isExpandable: isExpandable, isExpanded: isExpanded }),\n            React.createElement(TreeRowIcon, { isLoading: isLoading, isSelected: isSelected, icon: getIcon(node) }),\n            React.createElement(TreeRowTooltip, { isSelected: isSelected, isSelectable: isSelectable, isHighlighted: isHighlighted, selectionLimit: selectionLimit, isFileLimitReached: isFileLimitReached, shouldShowTooltip: shouldShowTooltip, isMouseOver: isMouseOver, fileName: rowLabel, nodeType: nodeType, treeContainer: treeContainer },\n                React.createElement(TreeRowName, { value: rowLabel })))));\n};\nvar IconContainer = function (_a) {\n    var children = _a.children, isSelected = _a.isSelected, props = __rest(_a, [\"children\", \"isSelected\"]);\n    return (React.createElement(StyledIconContainer, __assign({ \"$isSelected\": isSelected }, props), children));\n};\nvar TreeRowChevron = React.forwardRef(function (_a, ref) {\n    var isExpanded = _a.isExpanded, isExpandable = _a.isExpandable;\n    var icon = isExpanded ? (React.createElement(ChevronDown, { ref: ref })) : (React.createElement(ChevronRight, { ref: ref }));\n    return (React.createElement(StyledChevronContainer, null, isExpandable ? icon : null));\n});\nvar TreeRowIcon = function (_a) {\n    var isSelected = _a.isSelected, isLoading = _a.isLoading, icon = _a.icon;\n    return (React.createElement(IconContainer, { isSelected: isSelected, marginLeft: \"sm\", marginRight: \"sm\" }, isLoading ? React.createElement(Spinner, { size: \"sm\" }) : icon));\n};\nvar TreeRowName = function (_a) {\n    var value = _a.value;\n    return (React.createElement(StyledFilenameCaption, null, value));\n};\nvar TreeRowOverlay = function (_a) {\n    var _b = _a.message, key = _b.key, _c = _b.options, options = _c === void 0 ? {} : _c, props = __rest(_a, [\"message\"]);\n    var I18n = useI18nContext();\n    return (React.createElement(Overlay, __assign({}, __assign(__assign({}, props), { placement: 'top-left' })),\n        React.createElement(Tooltip.Content, null, I18n.t(\"core.tree.\".concat(key), options))));\n};\nvar getSelectionLimitMessage = function (selectionLimit) { return ({\n    key: 'selectionLimit',\n    options: {\n        count: selectionLimit,\n    },\n}); };\nvar getUnsupportedFileTypeMessage = function (fileName) {\n    var _a = parseFilename(fileName), extension = _a.extension, isFilename = _a.isFilename;\n    var key = isFilename ? 'specific' : 'unspecific';\n    return {\n        key: \"unsupportedFileType.\".concat(key),\n        options: {\n            fileType: \".\".concat(extension.toUpperCase()),\n        },\n    };\n};\nvar TreeRowTooltip = function (_a) {\n    var children = _a.children, isFocused = _a.isHighlighted, isFileLimitReached = _a.isFileLimitReached, isSelectable = _a.isSelectable, isSelected = _a.isSelected, nodeType = _a.nodeType, selectionLimit = _a.selectionLimit, shouldShowTooltip = _a.shouldShowTooltip, isMouseOver = _a.isMouseOver, fileName = _a.fileName, treeContainer = _a.treeContainer;\n    var rowRef = React.useRef(null);\n    var overlayRef = React.useRef(null);\n    var isUserInteracting = isFocused || isMouseOver;\n    var isTooltipVisible = isUserInteracting && shouldShowTooltip && !isSelected;\n    var isFile = nodeType === 'leaf';\n    var _b = React.useState(false), isCropped = _b[0], setCropped = _b[1];\n    var registerRowEl = useIntersectionObserver(function (entries) {\n        entries.forEach(function (entry) {\n            if (entry.rootBounds &&\n                entry.rootBounds.left - entry.boundingClientRect.left >= 0) {\n                setCropped(true);\n                return;\n            }\n            setCropped(false);\n        });\n    }, {\n        root: treeContainer,\n        rootMargin: '0px',\n        threshold: intersectionThresholds,\n    });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { ref: mergeRefs(rowRef, registerRowEl) }, children),\n        isTooltipVisible && !isCropped && (React.createElement(React.Fragment, null,\n            isFileLimitReached && isSelectable && (React.createElement(TreeRowOverlay, { overlayRef: overlayRef, targetRef: rowRef, message: getSelectionLimitMessage(selectionLimit) })),\n            !isSelectable && isFile && (React.createElement(TreeRowOverlay, { overlayRef: overlayRef, targetRef: rowRef, message: getUnsupportedFileTypeMessage(fileName) }))))));\n};\nvar TreeRowContainer = function (_a) {\n    var children = _a.children, isHighlighted = _a.isHighlighted, isSelected = _a.isSelected, isSelectable = _a.isSelectable, isExpandable = _a.isExpandable, isFileLimitReached = _a.isFileLimitReached, level = _a.level, props = __rest(_a, [\"children\", \"isHighlighted\", \"isSelected\", \"isSelectable\", \"isExpandable\", \"isFileLimitReached\", \"level\"]);\n    return (React.createElement(StyledTreeRowContainer, __assign({ isSelectable: (isSelectable &&\n            ((isFileLimitReached && isSelected) || !isFileLimitReached)) ||\n            isExpandable, isHighlighted: isHighlighted, isSelected: isSelected, style: { paddingLeft: getPadding(level) } }, props), children));\n};\n"]},"metadata":{},"sourceType":"module"}