{"ast":null,"code":"export var empty = [];\nexport var hideKeys = {\n  overlay: ['Escape', 'Esc'],\n  target: ['Escape', 'Esc']\n};\nexport function defaultGetGroupId(tier) {\n  return tier.groupId;\n}\nexport function defaultGetId(tier) {\n  return tier.id;\n}\nexport function defaultGetLabel(tier) {\n  return tier.label;\n}\nexport function defaultGetNextGroupId(tier) {\n  return tier.nextGroupId;\n}\nexport function defaultIsTierDisabled(tier) {\n  return Boolean(tier.disabled);\n}\nexport function noop() {}\nexport function always() {\n  return true;\n}\n/**\n * Helper function to find path in tiered structure\n * @param optionsByNextGroupId\n * @param item\n * @param getGroupId\n * @param getNextGroupId\n * @returns\n */\n\nexport function findPath(optionsByNextGroupId, item, getGroupId) {\n  var path = [item];\n  var currentItem = item;\n\n  while (getGroupId(currentItem)) {\n    var groupId = getGroupId(currentItem);\n\n    if (groupId) {\n      var parent_1 = optionsByNextGroupId[groupId];\n      path.push(parent_1);\n      currentItem = parent_1;\n    } else {\n      break;\n    }\n  }\n\n  return path.reverse();\n}\n/**\n * Helper function to generate a path key\n * @param path\n * @param getLabel\n * @returns\n */\n\nexport function getPathKey(path, getLabel) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  return path.map(function (node) {\n    return getLabel(node);\n  }).join(' > ');\n}","map":{"version":3,"sources":["../../../../src/components/TieredDropdown/TieredDropdown.helpers.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,KAAK,GAAU,EAArB;AAEP,OAAO,IAAM,QAAQ,GAAG;AACtB,EAAA,OAAO,EAAE,CAAC,QAAD,EAAW,KAAX,CADa;AAEtB,EAAA,MAAM,EAAE,CAAC,QAAD,EAAW,KAAX;AAFc,CAAjB;AAKP,OAAM,SAAU,iBAAV,CAIJ,IAJI,EAIG;AACP,SAAO,IAAI,CAAC,OAAZ;AACD;AAED,OAAM,SAAU,YAAV,CAIJ,IAJI,EAIG;AACP,SAAO,IAAI,CAAC,EAAZ;AACD;AAED,OAAM,SAAU,eAAV,CAAuD,IAAvD,EAA8D;AAClE,SAAO,IAAI,CAAC,KAAZ;AACD;AAED,OAAM,SAAU,qBAAV,CAAgE,IAAhE,EAAuE;AAC3E,SAAO,IAAI,CAAC,WAAZ;AACD;AAED,OAAM,SAAU,qBAAV,CACJ,IADI,EACG;AAEP,SAAO,OAAO,CAAC,IAAI,CAAC,QAAN,CAAd;AACD;AAED,OAAM,SAAU,IAAV,GAAc,CAAK;AAEzB,OAAM,SAAU,MAAV,GAAgB;AACpB,SAAO,IAAP;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,QAAV,CACJ,oBADI,EAEJ,IAFI,EAGJ,UAHI,EAGoB;AAExB,MAAM,IAAI,GAAQ,CAAC,IAAD,CAAlB;AACA,MAAI,WAAW,GAAG,IAAlB;;AAEA,SAAO,UAAU,CAAC,WAAD,CAAjB,EAAgC;AAC9B,QAAM,OAAO,GAAG,UAAU,CAAC,WAAD,CAA1B;;AACA,QAAI,OAAJ,EAAa;AACX,UAAM,QAAM,GAAG,oBAAoB,CAAC,OAAD,CAAnC;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,QAAV;AACA,MAAA,WAAW,GAAG,QAAd;AACD,KAJD,MAIO;AACL;AACD;AACF;;AAED,SAAO,IAAI,CAAC,OAAL,EAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,UAAV,CACJ,IADI,EAEJ,QAFI,EAEqC;AADzC,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,EAAA;AAAc;;AAGd,SAAO,IAAI,CAAC,GAAL,CAAS,UAAC,IAAD,EAAK;AAAK,WAAA,QAAQ,CAAR,IAAQ,CAAR;AAAc,GAAjC,EAAmC,IAAnC,CAAwC,KAAxC,CAAP;AACD","sourcesContent":["export var empty = [];\nexport var hideKeys = {\n    overlay: ['Escape', 'Esc'],\n    target: ['Escape', 'Esc'],\n};\nexport function defaultGetGroupId(tier) {\n    return tier.groupId;\n}\nexport function defaultGetId(tier) {\n    return tier.id;\n}\nexport function defaultGetLabel(tier) {\n    return tier.label;\n}\nexport function defaultGetNextGroupId(tier) {\n    return tier.nextGroupId;\n}\nexport function defaultIsTierDisabled(tier) {\n    return Boolean(tier.disabled);\n}\nexport function noop() { }\nexport function always() {\n    return true;\n}\n/**\n * Helper function to find path in tiered structure\n * @param optionsByNextGroupId\n * @param item\n * @param getGroupId\n * @param getNextGroupId\n * @returns\n */\nexport function findPath(optionsByNextGroupId, item, getGroupId) {\n    var path = [item];\n    var currentItem = item;\n    while (getGroupId(currentItem)) {\n        var groupId = getGroupId(currentItem);\n        if (groupId) {\n            var parent_1 = optionsByNextGroupId[groupId];\n            path.push(parent_1);\n            currentItem = parent_1;\n        }\n        else {\n            break;\n        }\n    }\n    return path.reverse();\n}\n/**\n * Helper function to generate a path key\n * @param path\n * @param getLabel\n * @returns\n */\nexport function getPathKey(path, getLabel) {\n    if (path === void 0) { path = []; }\n    return path.map(function (node) { return getLabel(node); }).join(' > ');\n}\n"]},"metadata":{},"sourceType":"module"}