var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import { css } from 'styled-components';
import { typographyLineHeight } from '../components/Typography/Typography.styles';
import { colors } from './colors';
export var focusable = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  &.focus,\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px ", ", inset 0 0 0 1px ", ";\n  }\n"], ["\n  &.focus,\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px ", ", inset 0 0 0 1px ", ";\n  }\n"])), colors.blue40, colors.blue40);
export var defaultTransition = css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  transition: all 0.2s ease-in;\n"], ["\n  transition: all 0.2s ease-in;\n"])));
export function getEllipsis() {
    return css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  "], ["\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  "])));
}
/**
 * `border` is used instead of `outline` intentionally - as `outline` can't handle `border-radius`
 * (rounded elements will still have square outline)
 */
export function getFocus() {
    return css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    border-style: solid;\n    border-width: 1px;\n    border-color: ", ";\n    box-shadow: 0 0 0 1px ", ";\n    outline: none;\n  "], ["\n    border-style: solid;\n    border-width: 1px;\n    border-color: ", ";\n    box-shadow: 0 0 0 1px ", ";\n    outline: none;\n  "])), colors.blue40, colors.blue40);
}
export function getLineClamp(lines) {
    if (lines === void 0) { lines = 2; }
    return css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    display: -webkit-box;\n    -webkit-line-clamp: ", ";\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    ", "\n  "], ["\n    display: -webkit-box;\n    -webkit-line-clamp: ", ";\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    ", "\n  "])), lines, function (_a) {
        var _b = _a.intent, intent = _b === void 0 ? 'body' : _b;
        return css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      // limit height for browsers that do not support line-clamp CSS prop\n      max-height: ", "px;\n    "], ["\n      // limit height for browsers that do not support line-clamp CSS prop\n      max-height: ", "px;\n    "])), typographyLineHeight[intent] * 2);
    });
}
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=mixins.js.map