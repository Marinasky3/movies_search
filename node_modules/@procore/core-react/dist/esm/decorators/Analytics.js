import React from 'react';
import Analytics from '../utils/genericAnalyticsClient';
var defaultTrackEvent = function (e, params) {
    console.log('analytics::trackEvent', e, params);
};
export var AnalyticsContext = React.createContext({});
export function AnalyticsProvider(_a) {
    var analytics = _a.analytics, children = _a.children;
    return (React.createElement(AnalyticsContext.Provider, { value: { trackEvent: (analytics === null || analytics === void 0 ? void 0 : analytics.trackEvent) || defaultTrackEvent } }, children));
}
var isAnalyticsHydrated = function (analytics) {
    return Object.keys(analytics).length > 0;
};
export var useAnalyticsContext = function () {
    var context = React.useContext(AnalyticsContext);
    if (!isAnalyticsHydrated(context)) {
        throw new Error('Must wrap app in Analytics.Provider');
    }
    return context;
};
export default {
    Client: Analytics,
    Consumer: AnalyticsContext.Consumer,
    Provider: AnalyticsProvider,
    Context: AnalyticsContext,
};
//# sourceMappingURL=Analytics.js.map