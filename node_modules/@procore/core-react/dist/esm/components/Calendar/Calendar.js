var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ChevronLeft, ChevronRight } from '@procore/core-icons/dist';
import { isAfter, startOfDay } from 'date-fns';
import { range } from 'ramda';
import React from 'react';
import { useDateTime } from '../../state/DateTime';
import { useI18nContext } from '../../state/I18n';
import { addSubcomponents } from '../../utils/addSubcomponents';
import { addMonths, format, getDates, getDayOfWeekLabel, getMonth, getMonthLabel, getMonthOptions, getRows, getYear, getYearOptions, isSameDay, isSameMonth, isWithinRange, getStartDayOfWeek, subMonths, updateMonth, updateYear, } from '../../utils/CalendarHelpers';
import { Select as SelectBase } from '../Select';
import { StyledContainer, StyledDayCell, StyledDayHeaderCell, StyledNavigation, StyledPaginator, StyledSelect, StyledWeekRow, } from './Calendar.styles';
function noop() { }
function returnFalse() {
    return false;
}
export function Body(_a) {
    var dueDateTime_ = _a.dueDateTime, displayDate_ = _a.displayDate, disabledDate = _a.disabledDate, _b = _a.onSelect, onSelect_ = _b === void 0 ? noop : _b, selectedEnd_ = _a.selectedEnd, selectedStart_ = _a.selectedStart, props = __rest(_a, ["dueDateTime", "displayDate", "disabledDate", "onSelect", "selectedEnd", "selectedStart"]);
    var dateTime = useDateTime();
    var displayDate = dateTime.shiftUtcToZonedTime(displayDate_) || dateTime.newDate();
    var locale = useI18nContext().locale;
    var dates = getDates(displayDate, locale);
    var dueDateTime = dateTime.shiftUtcToZonedTime(dueDateTime_);
    var selectedEnd = dateTime.shiftUtcToZonedTime(selectedEnd_);
    var selectedStart = dateTime.shiftUtcToZonedTime(selectedStart_);
    var onSelect = function (day) {
        onSelect_(dateTime.shiftZonedTimeToUtc(day, 'Calendar Body onSelect'));
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Weekdays, null),
        getRows(dates).map(function (row) { return (React.createElement(Week, { key: "week-".concat(format(row[0], 'yyyy-MMMM-dddd')) }, row.map(function (day) { return (React.createElement(Day, __assign({ "aria-label": dateTime.format(day, 'weekday-date', {
                timeZone: undefined,
            }), disabled: disabledDate &&
                disabledDate(day, startOfDay(dateTime.newDate())), isCurrentMonth: isSameMonth(day, displayDate), isRangeEnd: selectedEnd && isSameDay(day, selectedEnd), isRangeStart: selectedStart && isSameDay(day, selectedStart), isToday: isSameDay(day, startOfDay(dateTime.newDate())), key: "day-".concat(format(day, 'yyyy-MMMM-dddd')), onClick: function () { return onSelect(day); }, selected: isWithinRange(day, selectedStart, selectedEnd) }, props),
            format(day, 'd'),
            dueDateTime && isSameDay(day, startOfDay(dueDateTime)) && (React.createElement("div", null,
                React.createElement("em", { style: isAfter(dateTime.newDate(), dueDateTime)
                        ? {
                            color: 'red',
                        }
                        : undefined }, dateTime.format(dueDateTime_, 'time')))))); }))); })));
}
export var Container = React.forwardRef(function Container(props, ref) {
    return React.createElement(StyledContainer, __assign({ ref: ref }, props));
});
export var Day = React.forwardRef(function Day(_a, ref) {
    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.isCurrentMonth, isCurrentMonth = _c === void 0 ? false : _c, _d = _a.isRangeEnd, isRangeEnd = _d === void 0 ? false : _d, _e = _a.isRangeStart, isRangeStart = _e === void 0 ? false : _e, _f = _a.isToday, isToday = _f === void 0 ? false : _f, onClick = _a.onClick, _g = _a.selected, selected = _g === void 0 ? false : _g, props = __rest(_a, ["disabled", "isCurrentMonth", "isRangeEnd", "isRangeStart", "isToday", "onClick", "selected"]);
    return (React.createElement(StyledDayCell, __assign({ "aria-current": isToday ? 'date' : undefined, "aria-disabled": disabled || undefined, "aria-selected": selected || undefined }, props, { onClick: disabled ? undefined : onClick, ref: ref, "$disabled": disabled, "$selected": selected, "$isCurrentMonth": isCurrentMonth, "$isRangeStart": isRangeStart, "$isRangeEnd": isRangeEnd, "$isToday": isToday })));
});
export var Navigation = React.forwardRef(function Navigation(props, ref) {
    return React.createElement(StyledNavigation, __assign({}, props, { ref: ref }));
});
export var Next = React.forwardRef(function Next(_a, ref) {
    var props = __rest(_a, []);
    return (React.createElement(StyledPaginator, __assign({}, props, { ref: ref, icon: React.createElement(ChevronRight, null), variant: "tertiary" })));
});
export var Prev = React.forwardRef(function Prev(props, ref) {
    return (React.createElement(StyledPaginator, __assign({}, props, { ref: ref, icon: React.createElement(ChevronLeft, null), variant: "tertiary" })));
});
export var Week = React.forwardRef(function Week(props, ref) {
    return React.createElement(StyledWeekRow, __assign({ ref: ref }, props));
});
export var Weekdays = React.forwardRef(function Weekdays(props, ref) {
    var locale = useI18nContext().locale;
    var startDayOfWeek = getStartDayOfWeek(locale);
    return (React.createElement(StyledWeekRow, __assign({ ref: ref, "aria-hidden": "true" }, props), range(startDayOfWeek, startDayOfWeek + 7).map(function (day) { return (React.createElement(StyledDayHeaderCell, { key: "day-".concat(day) }, getDayOfWeekLabel(day, locale))); })));
});
export var Select = React.forwardRef(function Select(_a, ref) {
    var children = _a.children, label = _a.label, onSelect = _a.onSelect, _b = _a.options, options = _b === void 0 ? [] : _b, _c = _a.selected, selected = _c === void 0 ? '' : _c, props = __rest(_a, ["children", "label", "onSelect", "options", "selected"]);
    return (React.createElement(StyledSelect, null,
        React.createElement(SelectBase, __assign({}, props, { block: true, label: label, onSelect: function (selection) {
                onSelect(selection.item);
            }, optionsRef: ref, tabIndex: 0 }), options.map(function (_a) {
            var value = _a.value, label = _a.label;
            return (React.createElement(SelectBase.Option, { value: value, selected: value === selected, key: value }, label));
        }))));
});
export var Calendar_ = React.forwardRef(function Calendar(_a, ref) {
    var dueDateTime = _a.dueDateTime, displayDate_ = _a.displayDate, _b = _a.disabledDate, disabledDate = _b === void 0 ? returnFalse : _b, monthRef = _a.monthRef, _c = _a.onNavigate, onNavigate = _c === void 0 ? noop : _c, _d = _a.onSelect, onSelect = _d === void 0 ? noop : _d, selectedEnd = _a.selectedEnd, selectedStart = _a.selectedStart, yearRef = _a.yearRef, props = __rest(_a, ["dueDateTime", "displayDate", "disabledDate", "monthRef", "onNavigate", "onSelect", "selectedEnd", "selectedStart", "yearRef"]);
    var locale = useI18nContext().locale;
    var _e = useDateTime(), newDate = _e.newDate, shiftUtcToZonedTime = _e.shiftUtcToZonedTime;
    var monthSelectRef = monthRef || React.createRef();
    var yearSelectRef = yearRef || React.createRef();
    var displayDate = shiftUtcToZonedTime(displayDate_) || newDate();
    return (React.createElement(Container, __assign({}, props, { ref: ref }),
        React.createElement(Navigation, null,
            React.createElement(Prev, { onClick: function () { return onNavigate(subMonths(displayDate, 1)); } }),
            React.createElement(Select, { options: getMonthOptions(locale), label: getMonthLabel(getMonth(displayDate), locale), onSelect: function (value) {
                    onNavigate(updateMonth(displayDate, value));
                }, selected: getMonth(displayDate), ref: monthSelectRef }),
            React.createElement(Select, { options: getYearOptions(displayDate), label: String(getYear(displayDate)).padStart(4, '0'), onSelect: function (value) {
                    onNavigate(updateYear(displayDate, value));
                }, selected: getYear(displayDate), ref: yearSelectRef }),
            React.createElement(Next, { onClick: function () { return onNavigate(addMonths(displayDate, 1)); } })),
        React.createElement(Body, { dueDateTime: dueDateTime, 
            // intentionally pass unshifted value. next component's responsibility to manage
            displayDate: displayDate_, disabledDate: disabledDate, onSelect: onSelect, selectedEnd: selectedEnd, selectedStart: selectedStart })));
});
Calendar_.displayName = 'Calendar';
Body.displayName = 'Calendar.Body';
Container.displayName = 'Calendar.Container';
Day.displayName = 'Calendar.Day';
Navigation.displayName = 'Calendar.Navigation';
Next.displayName = 'Calendar.Next';
Prev.displayName = 'Calendar.Prev';
Select.displayName = 'Calendar.Select';
Week.displayName = 'Calendar.Week';
Weekdays.displayName = 'Calendar.Weekdays';
export var Calendar = addSubcomponents({
    Body: Body,
    Container: Container,
    Day: Day,
    Navigation: Navigation,
    Next: Next,
    Prev: Prev,
    Select: Select,
    Week: Week,
    Weekdays: Weekdays,
}, Calendar_);
//# sourceMappingURL=Calendar.js.map