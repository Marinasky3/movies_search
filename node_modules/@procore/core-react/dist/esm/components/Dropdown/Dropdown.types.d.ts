import { Placement } from '../../utils/types';
import { ButtonProps } from '../Button';
import { MenuRef, Selection } from '../MenuImperative/MenuImperative.types';
import { OverlayTriggerProps } from '../OverlayTrigger';
declare type HTMLButtonProps = React.ComponentPropsWithoutRef<'button'>;
declare type HTMLDivProps = React.ComponentPropsWithoutRef<'div'>;
export declare type DropdownPlacement = Extract<Placement, 'bottom' | 'bottom-left' | 'bottom-right' | 'top' | 'top-left' | 'top-right'>;
export interface DropdownProps extends Omit<HTMLButtonProps, 'onSelect'> {
    afterHide?: OverlayTriggerProps['afterHide'];
    afterShow?: OverlayTriggerProps['afterShow'];
    beforeHide?: OverlayTriggerProps['beforeHide'];
    beforeShow?: OverlayTriggerProps['beforeShow'];
    block?: ButtonProps['block'];
    className?: ButtonProps['className'];
    disabled?: ButtonProps['disabled'];
    error?: boolean;
    /**
     * Content to render in a footer.
     */
    footer?: React.ReactNode;
    /**
     * The i18n key to use for the dropdowns's configurable strings.
     * Defaults to using the core library's default strings.
     */
    i18nScope?: string;
    /**
     * @remarks string icons have been deprecated, please pass a component from `@procore/core-icons`
     */
    icon?: ButtonProps['icon'];
    /**
     * The button text.
     */
    label?: string;
    loading?: ButtonProps['loading'];
    /**
     * Adds a search bar to the dropdown.
     */
    onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * <div>
     *  <div>Callback for selecting an item from the menu
     *    <CodeBlock>
     *    { '({ event: ReactEvent, item: Menu.Item.props.item, group: bool }) => void' }
     *    </CodeBlock>
     *  </div>
     *  <div>
     *    <Code>item</Code> will be the <Code>item</Code> prop supplied to the{' '}
     *    <Code>Item</Code> component
     *  </div>
     * </div>
     */
    onSelect?: (selection: Selection) => void;
    /**
     * The placement of the overlay.
     * @default 'bottom-left'
     */
    placement?: DropdownPlacement;
    /**
     * The button size
     * @default 'md'
     */
    size?: ButtonProps['size'];
    trigger?: OverlayTriggerProps['trigger'];
    type?: ButtonProps['type'];
    /**
     * @default 'secondary'
     */
    variant?: ButtonProps['variant'];
}
export interface DropdownButtonProps extends ButtonProps {
    /**
     * Shows the arrow when activated
     */
    arrow?: boolean;
    /**
     * Shows the button spinner
     */
    loading?: boolean;
    /**
     * Changes the direction of the arrow if shown
     */
    open?: boolean;
}
export interface DropdownMenuProps extends Omit<HTMLDivProps, 'onSelect'> {
    footer?: React.ReactNode;
    menuRef: React.RefObject<MenuRef>;
    i18nScope?: string;
    onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onSelect?: (selection: Selection) => void;
}
export interface ConsumerProps {
    children: (api: any) => JSX.Element;
}
export {};
