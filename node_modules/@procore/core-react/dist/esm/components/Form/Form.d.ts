import { Form as FormikForm, FormikContextType } from 'formik';
import React from 'react';
import { Props } from '../../utils/types';
import { InputProps } from '../Input';
import { BaseFieldProps, ComponentWithFieldProp, FieldAPI, FieldCheckboxComponentProps, FieldCheckboxesComponentProps, FieldCheckboxesProps, FieldCheckboxesValueType, FieldCheckboxProps, FieldConfig, FieldCurrencyComponentProps, FieldCurrencyProps, FieldDateComponentProps, FieldDateProps, FieldDateValueType, FieldGroupSelectComponentProps, FieldGroupSelectProps, FieldGroupSelectValueType, FieldMultiSelectComponentProps, FieldMultiSelectProps, FieldMultiSelectValueType, FieldNumberComponentProps, FieldNumberProps, FieldPillSelectComponentProps, FieldPillSelectProps, FieldProps, FieldRadioButtonsComponentProps, FieldRadioButtonsProps, FieldRichTextComponentProps, FieldRichTextProps, FieldSelectComponentProps, FieldSelectProps, FieldTextAreaComponentProps, FieldTextAreaProps, FieldTextComponentProps, FieldTextProps, FieldTieredSelectComponentProps, FieldTieredSelectProps, FieldTieredSelectValueType, FormContextAPI, FormErrorBannerProps, FormProps, GroupedOptionsConfig, OptionList, TraditionalBaseFieldProps, ValueComponentProps, ViewFieldProps } from './Form.types';
export declare const FormContext: React.Context<FormContextAPI>;
export declare function useFormContext<Values = any>(): FormikContextType<Values> & FormContextAPI;
export declare function getPrimitiveValue(value: any, getId?: (option: any) => string | number): string | number;
export declare function useField<Value = any>({ disabled: _disabled, error: _error, getId, required: _required, name, validate, view: _view, }?: FieldConfig): FieldAPI<Value>;
declare function Form_<Values = any>({ initialValues, onSubmit: _onSubmit, disabled, enableConfirmNavigation, variant, validationSchema, view, ...props }: FormProps<Values>): JSX.Element;
export declare function FormForm({ children, className, onKeyDown, style, ...props }: React.ComponentPropsWithoutRef<typeof FormikForm>): JSX.Element;
export declare function FormErrorBanner({ item, i18nScope, }: FormErrorBannerProps): JSX.Element | null;
export declare function isEmptyField(val: any): boolean;
export declare function WXPField<Value, ComponentProps extends ValueComponentProps<Value>>({ as: AsComponent, children, colStart, colWidth, disabled, error, label, name, required, tooltip, validate, view, ...props }: BaseFieldProps<Value, ComponentProps> & {
    getId?: OptionList<Value>['getId'];
}): JSX.Element;
export declare function TraditionalField<Value, ComponentProps extends ValueComponentProps<Value>>({ as: AsComponent, children, colWidth, disabled, error, label, name, required, tooltip, validate, view, ...props }: TraditionalBaseFieldProps<Value, ComponentProps> & {
    getId?: OptionList<Value>['getId'];
}): JSX.Element;
export declare function Row({ children, ...props }: Props): JSX.Element;
export declare function BaseField<Value, ComponentProps extends ValueComponentProps<Value>>(props: BaseFieldProps<Value, ComponentProps> | TraditionalBaseFieldProps<Value, ComponentProps>): JSX.Element;
export declare function makeField<Value, FieldTypeProps extends FieldProps<Value>, ComponentProps extends ValueComponentProps<Value>>(editComponent: ComponentWithFieldProp<Value, ComponentProps>, showComponent: ComponentWithFieldProp<Value, ComponentProps>, options?: {
    emptyState: boolean;
}): (({ children, ...props }: FieldTypeProps) => JSX.Element) & {
    Create: (props: ViewFieldProps<Value, FieldTypeProps, ComponentProps>) => JSX.Element | null;
    Read: (props: ViewFieldProps<Value, FieldTypeProps, ComponentProps>) => JSX.Element | null;
    Update: (props: ViewFieldProps<Value, FieldTypeProps, ComponentProps>) => JSX.Element | null;
};
export declare function withDefaultEmptyState<Value, TProps extends ValueComponentProps>(OutputComponent: ComponentWithFieldProp<Value, TProps>): React.ForwardRefExoticComponent<React.PropsWithoutRef<TProps> & React.RefAttributes<HTMLSpanElement>>;
export declare const TextInput: React.ForwardRefExoticComponent<FieldTextComponentProps<string> & React.RefAttributes<HTMLInputElement>>;
export declare const TextOutput: React.ForwardRefExoticComponent<FieldTextComponentProps<string> & React.RefAttributes<HTMLSpanElement>>;
export declare const NumberInput: React.ForwardRefExoticComponent<FieldNumberComponentProps<import("../NumberInput/NumberInput.types").InputValue> & React.RefAttributes<HTMLInputElement>>;
export declare const NumberOutput: React.ForwardRefExoticComponent<FieldNumberComponentProps<import("../NumberInput/NumberInput.types").InputValue> & React.RefAttributes<HTMLSpanElement>>;
export declare const CurrencyInput: React.ForwardRefExoticComponent<FieldCurrencyComponentProps<import("../NumberInput/NumberInput.types").InputValue> & React.RefAttributes<HTMLInputElement>>;
export declare const CurrencyOutput: React.ForwardRefExoticComponent<FieldCurrencyComponentProps<import("../NumberInput/NumberInput.types").InputValue> & React.RefAttributes<HTMLSpanElement>>;
export declare const DateInput: React.ForwardRefExoticComponent<FieldDateComponentProps<FieldDateValueType> & React.RefAttributes<HTMLInputElement>>;
export declare const DateOutput: React.ForwardRefExoticComponent<FieldDateComponentProps<FieldDateValueType> & React.RefAttributes<HTMLSpanElement>>;
export declare const CheckboxInput: React.ForwardRefExoticComponent<FieldCheckboxComponentProps<boolean> & React.RefAttributes<HTMLInputElement>>;
export declare const CheckboxOutput: React.ForwardRefExoticComponent<FieldCheckboxComponentProps<boolean> & React.RefAttributes<HTMLSpanElement>>;
export declare const TextAreaInput: React.ForwardRefExoticComponent<FieldTextAreaComponentProps<string> & React.RefAttributes<HTMLTextAreaElement>>;
export declare const TextAreaOutput: React.ForwardRefExoticComponent<FieldTextAreaComponentProps<string> & React.RefAttributes<HTMLSpanElement>>;
export declare const RichTextInput: React.ForwardRefExoticComponent<FieldRichTextComponentProps<string> & React.RefAttributes<HTMLTextAreaElement>>;
export declare const RichTextOutput: React.ForwardRefExoticComponent<FieldRichTextComponentProps<string> & Props & React.RefAttributes<HTMLSpanElement>>;
export declare const RadioButtonsInput: React.ForwardRefExoticComponent<FieldRadioButtonsComponentProps<any> & React.RefAttributes<HTMLFieldSetElement>>;
export declare const RadioButtonsOutput: React.ForwardRefExoticComponent<FieldRadioButtonsComponentProps<any> & React.RefAttributes<HTMLSpanElement>>;
export declare const CheckboxesInput: React.ForwardRefExoticComponent<FieldCheckboxesComponentProps<FieldCheckboxesValueType> & React.RefAttributes<HTMLFieldSetElement>>;
export declare const CheckboxesOutput: React.ForwardRefExoticComponent<FieldCheckboxesComponentProps<FieldCheckboxesValueType> & React.RefAttributes<HTMLSpanElement>>;
export declare function useOptions<OptionItem = any, GroupItem = any>({ value, optgroups, options, getLabel, getId, groupGetId, getGroup, comparator, }: GroupedOptionsConfig<OptionItem, GroupItem>): {
    list: any[];
    selected: OptionItem | undefined;
    search: (e: React.ChangeEvent<HTMLInputElement>) => void;
};
export declare const SelectInput: React.ForwardRefExoticComponent<FieldSelectComponentProps<any, any, any> & React.RefAttributes<HTMLDivElement>>;
export declare const SelectOutput: React.ForwardRefExoticComponent<FieldSelectComponentProps<any, any, any> & React.RefAttributes<HTMLSpanElement>>;
export declare const PillSelectInput: React.ForwardRefExoticComponent<FieldPillSelectComponentProps<any> & React.RefAttributes<HTMLDivElement>>;
export declare const PillSelectOutput: React.ForwardRefExoticComponent<FieldPillSelectComponentProps<any> & React.RefAttributes<HTMLSpanElement>>;
export declare const MultiSelectInput: React.ForwardRefExoticComponent<FieldMultiSelectComponentProps<FieldMultiSelectValueType> & React.RefAttributes<HTMLDivElement>>;
export declare const MultiSelectOutput: React.ForwardRefExoticComponent<FieldMultiSelectComponentProps<FieldMultiSelectValueType> & React.RefAttributes<HTMLSpanElement>>;
export declare const GroupSelectInput: React.ForwardRefExoticComponent<FieldGroupSelectComponentProps<FieldGroupSelectValueType> & React.RefAttributes<HTMLDivElement>>;
export declare const GroupSelectOutput: React.ForwardRefExoticComponent<FieldGroupSelectComponentProps<FieldGroupSelectValueType> & React.RefAttributes<HTMLSpanElement>>;
export declare const TieredSelectInput: React.ForwardRefExoticComponent<FieldTieredSelectComponentProps<FieldTieredSelectValueType> & React.RefAttributes<HTMLDivElement>>;
export declare const TieredSelectOutput: React.ForwardRefExoticComponent<FieldTieredSelectComponentProps<FieldTieredSelectValueType> & React.RefAttributes<HTMLSpanElement>>;
export declare const Form: typeof Form_ & {
    Checkboxes: (({ children, ...props }: FieldCheckboxesProps<FieldCheckboxesValueType>) => JSX.Element) & {
        Create: (props: ViewFieldProps<FieldCheckboxesValueType, FieldCheckboxesProps<FieldCheckboxesValueType>, FieldCheckboxesComponentProps<FieldCheckboxesValueType>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<FieldCheckboxesValueType, FieldCheckboxesProps<FieldCheckboxesValueType>, FieldCheckboxesComponentProps<FieldCheckboxesValueType>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<FieldCheckboxesValueType, FieldCheckboxesProps<FieldCheckboxesValueType>, FieldCheckboxesComponentProps<FieldCheckboxesValueType>>) => JSX.Element | null;
    };
    Checkbox: (({ children, ...props }: FieldCheckboxProps<boolean>) => JSX.Element) & {
        Create: (props: ViewFieldProps<boolean, FieldCheckboxProps<boolean>, FieldCheckboxComponentProps<boolean>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<boolean, FieldCheckboxProps<boolean>, FieldCheckboxComponentProps<boolean>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<boolean, FieldCheckboxProps<boolean>, FieldCheckboxComponentProps<boolean>>) => JSX.Element | null;
    };
    Currency: (({ children, ...props }: FieldCurrencyProps<import("../NumberInput/NumberInput.types").InputValue>) => JSX.Element) & {
        Create: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldCurrencyProps<import("../NumberInput/NumberInput.types").InputValue>, FieldCurrencyComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldCurrencyProps<import("../NumberInput/NumberInput.types").InputValue>, FieldCurrencyComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldCurrencyProps<import("../NumberInput/NumberInput.types").InputValue>, FieldCurrencyComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
    };
    DateSelect: (({ children, ...props }: FieldDateProps<FieldDateValueType>) => JSX.Element) & {
        Create: (props: ViewFieldProps<FieldDateValueType, FieldDateProps<FieldDateValueType>, FieldDateComponentProps<FieldDateValueType>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<FieldDateValueType, FieldDateProps<FieldDateValueType>, FieldDateComponentProps<FieldDateValueType>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<FieldDateValueType, FieldDateProps<FieldDateValueType>, FieldDateComponentProps<FieldDateValueType>>) => JSX.Element | null;
    };
    ErrorBanner: typeof FormErrorBanner;
    Field: (({ children, ...props }: FieldProps<any> & {
        [key: string]: unknown;
    }) => JSX.Element) & {
        Create: (props: ViewFieldProps<any, FieldProps<any> & {
            [key: string]: unknown;
        }, ValueComponentProps<any> & InputProps>) => JSX.Element | null;
        Read: (props: ViewFieldProps<any, FieldProps<any> & {
            [key: string]: unknown;
        }, ValueComponentProps<any> & InputProps>) => JSX.Element | null;
        Update: (props: ViewFieldProps<any, FieldProps<any> & {
            [key: string]: unknown;
        }, ValueComponentProps<any> & InputProps>) => JSX.Element | null;
    };
    Form: typeof FormForm;
    GroupSelect: (({ children, ...props }: FieldGroupSelectProps<FieldGroupSelectValueType>) => JSX.Element) & {
        Create: (props: ViewFieldProps<FieldGroupSelectValueType, FieldGroupSelectProps<FieldGroupSelectValueType>, FieldGroupSelectComponentProps<FieldGroupSelectValueType>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<FieldGroupSelectValueType, FieldGroupSelectProps<FieldGroupSelectValueType>, FieldGroupSelectComponentProps<FieldGroupSelectValueType>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<FieldGroupSelectValueType, FieldGroupSelectProps<FieldGroupSelectValueType>, FieldGroupSelectComponentProps<FieldGroupSelectValueType>>) => JSX.Element | null;
    };
    MultiSelect: (({ children, ...props }: FieldMultiSelectProps<FieldMultiSelectValueType>) => JSX.Element) & {
        Create: (props: ViewFieldProps<FieldMultiSelectValueType, FieldMultiSelectProps<FieldMultiSelectValueType>, FieldMultiSelectComponentProps<FieldMultiSelectValueType>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<FieldMultiSelectValueType, FieldMultiSelectProps<FieldMultiSelectValueType>, FieldMultiSelectComponentProps<FieldMultiSelectValueType>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<FieldMultiSelectValueType, FieldMultiSelectProps<FieldMultiSelectValueType>, FieldMultiSelectComponentProps<FieldMultiSelectValueType>>) => JSX.Element | null;
    };
    Number: (({ children, ...props }: FieldNumberProps<import("../NumberInput/NumberInput.types").InputValue>) => JSX.Element) & {
        Create: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldNumberProps<import("../NumberInput/NumberInput.types").InputValue>, FieldNumberComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldNumberProps<import("../NumberInput/NumberInput.types").InputValue>, FieldNumberComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<import("../NumberInput/NumberInput.types").InputValue, FieldNumberProps<import("../NumberInput/NumberInput.types").InputValue>, FieldNumberComponentProps<import("../NumberInput/NumberInput.types").InputValue>>) => JSX.Element | null;
    };
    PillSelect: (({ children, ...props }: FieldPillSelectProps<any>) => JSX.Element) & {
        Create: (props: ViewFieldProps<any, FieldPillSelectProps<any>, FieldPillSelectComponentProps<any>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<any, FieldPillSelectProps<any>, FieldPillSelectComponentProps<any>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<any, FieldPillSelectProps<any>, FieldPillSelectComponentProps<any>>) => JSX.Element | null;
    };
    RadioButtons: (({ children, ...props }: FieldRadioButtonsProps<any>) => JSX.Element) & {
        Create: (props: ViewFieldProps<any, FieldRadioButtonsProps<any>, FieldRadioButtonsComponentProps<any>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<any, FieldRadioButtonsProps<any>, FieldRadioButtonsComponentProps<any>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<any, FieldRadioButtonsProps<any>, FieldRadioButtonsComponentProps<any>>) => JSX.Element | null;
    };
    RichText: (({ children, ...props }: FieldRichTextProps<string>) => JSX.Element) & {
        Create: (props: ViewFieldProps<string, FieldRichTextProps<string>, FieldRichTextComponentProps<string>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<string, FieldRichTextProps<string>, FieldRichTextComponentProps<string>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<string, FieldRichTextProps<string>, FieldRichTextComponentProps<string>>) => JSX.Element | null;
    };
    Row: typeof Row;
    Select: (({ children, ...props }: FieldSelectProps<any, any, any>) => JSX.Element) & {
        Create: (props: ViewFieldProps<any, FieldSelectProps<any, any, any>, FieldSelectComponentProps<any, any, any>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<any, FieldSelectProps<any, any, any>, FieldSelectComponentProps<any, any, any>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<any, FieldSelectProps<any, any, any>, FieldSelectComponentProps<any, any, any>>) => JSX.Element | null;
    };
    Text: (({ children, ...props }: FieldTextProps<string>) => JSX.Element) & {
        Create: (props: ViewFieldProps<string, FieldTextProps<string>, FieldTextComponentProps<string>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<string, FieldTextProps<string>, FieldTextComponentProps<string>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<string, FieldTextProps<string>, FieldTextComponentProps<string>>) => JSX.Element | null;
    };
    TextArea: (({ children, ...props }: FieldTextAreaProps<string>) => JSX.Element) & {
        Create: (props: ViewFieldProps<string, FieldTextAreaProps<string>, FieldTextAreaComponentProps<string>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<string, FieldTextAreaProps<string>, FieldTextAreaComponentProps<string>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<string, FieldTextAreaProps<string>, FieldTextAreaComponentProps<string>>) => JSX.Element | null;
    };
    TieredSelect: (({ children, ...props }: FieldTieredSelectProps<FieldTieredSelectValueType>) => JSX.Element) & {
        Create: (props: ViewFieldProps<FieldTieredSelectValueType, FieldTieredSelectProps<FieldTieredSelectValueType>, FieldTieredSelectComponentProps<FieldTieredSelectValueType>>) => JSX.Element | null;
        Read: (props: ViewFieldProps<FieldTieredSelectValueType, FieldTieredSelectProps<FieldTieredSelectValueType>, FieldTieredSelectComponentProps<FieldTieredSelectValueType>>) => JSX.Element | null;
        Update: (props: ViewFieldProps<FieldTieredSelectValueType, FieldTieredSelectProps<FieldTieredSelectValueType>, FieldTieredSelectComponentProps<FieldTieredSelectValueType>>) => JSX.Element | null;
    };
};
export {};
