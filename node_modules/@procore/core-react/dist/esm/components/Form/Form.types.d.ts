import { FormikConfig, FieldMetaProps as FormikFieldMetaProps, FieldValidator, FieldInputProps, FieldHelperProps } from 'formik';
import { InputProps } from '../Input/Input.types';
import { TooltipProps } from '../Tooltip/Tooltip.types';
import { InputValue as BaseNumberInputValueType, NumberInputProps } from '../NumberInput/NumberInput.types';
import { InputAttributes, Props } from '../../utils/types';
import { DateSelectProps } from '../DateSelect';
import { CheckboxProps } from '../Checkbox/Checkbox.types';
import { TextAreaProps } from '../TextArea/TextArea.types';
import { TextEditorProps } from '../TextEditor';
import { SelectButtonProps, SelectProps } from '../Select/Select.types';
import { PillSelectProps } from '../PillSelect/PillSelect.types';
import { MultiSelectProps } from '../MultiSelect/MultiSelect.types';
import { GroupSelectProps } from '../GroupSelect/GroupSelect.types';
import { TieredSelectProps } from '../TieredSelect/TieredSelect.types';
export declare type ValueInArray<V> = V[keyof V];
export declare type View = 'create' | 'read' | 'update';
export declare type Layout = 'wxp' | 'traditional';
export interface FormContextAPI {
    different: boolean;
    disabled: boolean;
    enableReinitialize?: boolean;
    setFieldDifferent: (key: string, different: boolean) => void;
    /**
     * A <a href="https://github.com/jquense/yup">Yup</a> object schema to
     * validate all values.
     * <CodeBlock>
     *  {`Yup.object().shape({
     *    input_name: Yup.mixed().required()
     *  })`}
     * </CodeBlock>
     * This is a great way to get error messages into the component. In
     * addition, if using Yup for required, those fields will automatically
     * get the required asterisk and highlight error.
     */
    validationSchema?: FormikConfig<unknown>['validationSchema'];
    /**
     * Toggle between modern and traditional form styles. Leave blank for the
     * modern label-above layout.
     */
    variant: Layout;
    /**
     * Determines show or edit state of form.
     * @default 'create'
     */
    view: View;
}
interface FieldMetaProps<Value> extends Omit<FormikFieldMetaProps<Value>, 'error'> {
    disabled: boolean;
    error: boolean;
    required: boolean;
    view: View;
}
export interface FieldConfig {
    disabled?: boolean;
    error?: boolean | string;
    getId?: (item: any) => string | number;
    name: string;
    required?: boolean;
    validate?: FieldValidator;
    view?: View;
}
export interface FieldAPI<Value> {
    input: FieldInputProps<Value>;
    helpers: FieldHelperProps<Value>;
    messages: {
        error?: string;
    };
    meta: FieldMetaProps<Value>;
}
export interface FormProps<Values> extends Partial<FormikConfig<Values>> {
    children: React.ReactNode;
    /**
     * Enable a browser confirmation about losing of unsaved data when the
     * form values are visually different from the initial values. Uses{' '}
     * <Code>window.onbeforeunload</Code>
     */
    enableConfirmNavigation?: boolean;
    /**
     * Disable all fields at once.
     * @default false
     */
    disabled?: boolean;
    /**
     * Toggle between modern and traditional form styles. Leave blank for the modern label-above layout.
     *
     */
    variant?: Layout;
    /**
     * Determines show or edit state of form.
     * @default 'create'
     */
    view?: View;
}
export declare type ValueComponentProps<Value = any> = {
    field: FieldAPI<Value>;
};
export declare type ComponentWithFieldProp<Value, Props extends ValueComponentProps<Value>> = React.FunctionComponent<Props> | React.ForwardRefExoticComponent<Props> | ((p: Props) => React.ReactNode);
export interface BaseFieldProps<Value, ComponentProps extends ValueComponentProps<Value>> {
    /**
     * Customize the input component, either a single component for all views
     * or an object with the keys of the views to render on that particular
     * view. This input component will receive the <Code>field</Code> prop.
     * If using TypeScript, these components will need to extend a specific
     * type from Core React, read more about the{' '}
     * <a href="#typescript-and-as-prop-components">props per view</a>.
     * <br />
     * <br />
     * One of:
     * <br />
     * <Code>ReactComponent</Code>or
     * <Code>
     * {
     *    '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'
     * }
     </Code>
     */
    as?: ComponentWithFieldProp<Value, ComponentProps> | {
        [V in View]: ComponentWithFieldProp<Value, ComponentProps>;
    };
    /**
     * A subcomponent to render on a particular view.
     * <br />
     * <br />
     * One or all of:
     * <br />
     * <Code>Form.X.Create, Form.X.Read, Form.X.Update</Code>
     */
    children?: ((field: FieldAPI<Value>) => React.ReactNode) | React.ReactNode;
    /**
     * Starting location of column. For traditional variant, this does not exist
     * and is not necessary.
     * */
    colStart?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
     * Width of column. For traditional variant, will be either 6 or 12.
     * @default 6
     */
    colWidth?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    ['data-qa']?: string;
    /**
     * Specify disabled. Field disabled replaces the overall Form disabled state.
     */
    disabled?: boolean;
    error?: boolean | string;
    label?: string;
    /**
     * Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}
     * <Code>dot.notation</Code>.
     */
    name: string;
    /**
     * The required asterisk if not using Yup <Code>required</Code>
     * <CodeBlock>
     * {`<Form
     * validationSchema={Yup.object().shape({
     *  input_name: Yup.mixed().required(),
     * })}>`}
     * </CodeBlock>
     */
    required?: boolean;
    tooltip?: TooltipProps['overlay'];
    /**
     * The validate function from Formik for single field validation.
     * <CodeBlock>
     *  {`(value: Value = any) => undefined | string | Promise<Value>`}
     * </CodeBlock>
     */
    validate?: FieldValidator;
    /**
     * Determines show or edit state of field.
     */
    view?: View;
}
export interface TraditionalBaseFieldProps<Value, ComponentProps extends ValueComponentProps<Value>> extends Omit<BaseFieldProps<Value, ComponentProps>, 'colWidth' | 'colStart'> {
    colWidth?: 6 | 12;
}
export interface FieldProps<Value> extends Omit<BaseFieldProps<Value, ValueComponentProps<Value>>, 'children'> {
    children?: React.ReactElement<BaseFieldProps<Value, ValueComponentProps<Value>>> | React.ReactElement<BaseFieldProps<Value, ValueComponentProps<Value>>>[];
}
export declare type OptionList<OptionShape = any> = {
    /**
     * <div>
     *  The id of an option{' '}
     *  <Code>{'(option: OptionItem) => string | number'}</Code>
     * </div>
     * <br />
     * <div>
     *  Default:
     *  <Code>{'(option: OptionItem) => option.id'}</Code>
     * </div>
     */
    getId: (option: OptionShape) => string | number;
    /**
     * <div>
     *  The display label of an option
     *  <Code>{'(option: OptionItem) => string'}</Code>
     * </div>
     * <br />
     * <div>
     *  Default:
     *  <Code>{'(option: OptionItem) => option.label || option.name'}</Code>
     * </div>
     */
    getLabel: (option: OptionShape) => string;
    options?: OptionShape[];
};
export interface FormErrorBannerProps {
    i18nScope?: string;
    item: string;
}
export declare type ViewFieldProps<Value, FieldTypeProps extends FieldProps<Value>, ComponentProps extends ValueComponentProps<Value>> = Partial<Omit<FieldTypeProps, 'children'>> & {
    children?: BaseFieldProps<Value, ComponentProps>['children'];
};
export declare type FieldTextValueType = string;
export interface FieldTextComponentProps<Value = FieldTextValueType> extends ValueComponentProps<Value>, InputProps {
}
export interface FieldTextProps<Value = FieldTextValueType> extends FieldProps<Value>, Omit<InputProps, 'name' | 'children' | 'error'> {
}
export declare type FieldNumberValueType = BaseNumberInputValueType;
export interface FieldNumberComponentProps<Value = FieldNumberValueType> extends ValueComponentProps<Value>, NumberInputProps {
}
export interface FieldNumberProps<Value = FieldNumberValueType> extends FieldProps<Value>, Omit<InputAttributes, 'name' | 'children'> {
}
export declare type FieldCurrencyValueType = BaseNumberInputValueType;
export interface FieldCurrencyComponentProps<Value = FieldCurrencyValueType> extends ValueComponentProps<Value>, NumberInputProps {
}
export interface FieldCurrencyProps<Value = FieldCurrencyValueType> extends FieldProps<Value>, Omit<InputAttributes, 'name' | 'children'> {
}
export declare type FieldDateValueType = null | string | Date;
export interface FieldDateComponentProps<Value = FieldDateValueType> extends ValueComponentProps<Value>, DateSelectProps {
}
export interface FieldDateProps<Value = FieldDateValueType> extends FieldProps<Value>, Omit<DateSelectProps, 'error'> {
}
export declare type FieldCheckboxValueType = boolean;
export interface FieldCheckboxComponentProps<Value = FieldCheckboxValueType> extends ValueComponentProps<Value>, CheckboxProps {
    i18nScope?: string;
}
export interface FieldCheckboxProps<Value = FieldCheckboxValueType> extends FieldProps<Value>, Omit<CheckboxProps, 'name' | 'error' | 'children'> {
    i18nScope?: string;
}
export declare type FieldTextAreaValueType = string;
export interface FieldTextAreaComponentProps<Value = FieldTextAreaValueType> extends ValueComponentProps<Value>, TextAreaProps {
}
export interface FieldTextAreaProps<Value = FieldTextAreaValueType> extends FieldProps<Value>, Omit<TextAreaProps, 'name' | 'error' | 'children'> {
}
export declare type FieldRichTextValueType = string;
export interface FieldRichTextComponentProps<Value = FieldRichTextValueType> extends ValueComponentProps<Value>, TextEditorProps {
}
export interface FieldRichTextProps<Value = FieldRichTextValueType> extends Omit<FieldProps<Value>, 'error'>, TextEditorProps {
}
export declare type FieldRadioButtonsValueType = any;
export interface FieldRadioButtonsComponentProps<Value = FieldRadioButtonsValueType> extends ValueComponentProps<Value>, Partial<OptionList<Value>>, Pick<Props, 'className' | 'style'> {
    isDisabledOption?: (option: Value) => boolean;
}
export interface FieldRadioButtonsProps<Value = FieldRadioButtonsValueType> extends FieldProps<Value>, Partial<OptionList<Value>>, Pick<Props, 'className' | 'style'>, Pick<FieldRadioButtonsComponentProps, 'isDisabledOption'> {
}
export declare type FieldCheckboxesValueType = any[];
export interface FieldCheckboxesComponentProps<Value = FieldCheckboxesValueType> extends ValueComponentProps<Value>, Partial<OptionList<ValueInArray<Value>>>, Pick<Props, 'className' | 'style'> {
    isDisabledOption?: (option: Value) => boolean;
    isIndeterminateOption?: (option: Value) => boolean;
}
export interface FieldCheckboxesProps<Value = FieldCheckboxesValueType> extends FieldProps<Value>, Partial<OptionList<ValueInArray<Value>>>, Pick<Props, 'className' | 'style'>, Pick<FieldCheckboxesComponentProps, 'isDisabledOption' | 'isIndeterminateOption'> {
}
export declare type FieldSelectValueType = any;
export declare type FieldSelectOptionItem = FieldSelectValueType;
export declare type FieldSelectGroupItem = any;
export declare type FieldSelectGroupHeader = FieldSelectGroupItem & {
    isGroupHeader: boolean;
};
export interface GroupedOptionsConfig<OptionItem, GroupItem> extends OptionList<OptionItem> {
    comparator?: (query: string, value: string) => boolean;
    getGroup: (option: OptionItem) => number | string;
    /**
     * <div>
     *  The id of group{' '}
     *  <Code>{'(group: GroupItem) => string | number'}</Code>
     * </div>
     * <br />
     * <div>
     *  Default:
     *  <Code>{'(group) => group.id'}</Code>
     * </div>
     */
    groupGetId: (group: GroupItem) => number | string;
    optgroups?: GroupItem[];
    value?: OptionItem;
}
export interface FieldSelectComponentProps<Value = FieldSelectValueType, OptionItem = FieldSelectOptionItem, GroupItem = FieldSelectGroupItem> extends ValueComponentProps<Value>, Partial<OptionList<OptionItem>>, Omit<SelectProps, 'onClear' | 'onSearch' | 'error' | 'children'> {
    /**
     * Callback for each entry in <Code>options</Code> to define relation to
     * group in <Code>optgroups</Code>
     * <Code>{'(option: OptionItem) => string | number'}</Code>
     * */
    getGroup?: (option: OptionItem) => number | string;
    groupGetId?: (group: GroupItem) => number | string;
    /**
     * <div>
     *  The display label of a group
     *  <Code>{'(group: GroupItem) => string'}</Code>
     * </div>
     * <br />
     * <div>
     *  Default:
     *  <Code>{'(group: GroupItem) => group.label || group.name'}</Code>
     * </div>
     */
    groupGetLabel?: (group: GroupItem) => string;
    /**
     * Callback for rendering header for each entry in <Code>optgroups</Code>
     * <Code>{'(group: GroupItem) => React.ReactNode'}</Code>
     */
    groupHeaderRenderer?: (group: GroupItem) => React.ReactNode;
    /**
     * If nothing is selected, suggest this option. From{' '}
     * <Code>{'Select.Option suggested'}</Code>.
     * <Code>{'(option: OptionItem) => boolean'}</Code>
     */
    isSuggestedOption?: (option: OptionItem) => boolean;
    /**
     * Array of available option groups
     */
    optgroups?: GroupItem[];
    /**
     * Callback for rendering each <Code>option</Code>
     * <Code>{'(option: OptionItem) => React.ReactNode'}</Code>
     */
    optionRenderer?: (option: OptionItem) => React.ReactNode;
    onBlur?: (e: React.FocusEvent<HTMLDivElement>) => void;
    /**
     * Callback for when cleared. Default enabled, has clear icon.
     */
    onClear?: false | SelectButtonProps['onClear'];
    /**
     * Callback for when searching. Default enabled, has seach bar in menu.
     */
    onSearch?: false | SelectProps['onSearch'];
    /**
     * <div>Customize how search works</div>
     * <Code>{'(query: string, value: string) => boolean'}</Code>
     */
    searchComparator?: (query: string, value: string) => boolean;
}
export interface FieldSelectProps<Value = FieldSelectValueType, OptionItem = FieldSelectOptionItem, GroupItem = FieldSelectGroupItem> extends FieldProps<Value>, Partial<OptionList<OptionItem>>, Pick<FieldSelectComponentProps<Value, OptionItem, GroupItem>, 'getGroup' | 'groupGetId' | 'groupGetLabel' | 'groupHeaderRenderer' | 'isSuggestedOption' | 'onBlur' | 'onClear' | 'optgroups' | 'onSearch' | 'optionRenderer' | 'searchComparator'>, Omit<SelectProps, 'onClear' | 'onSearch' | 'error' | 'children' | 'label'> {
}
export declare type FieldPillSelectValueType = any;
export interface FieldPillSelectComponentProps<Value = FieldPillSelectValueType> extends ValueComponentProps<Value>, Omit<PillSelectProps, 'children' | 'onClear' | 'error' | 'value'> {
    onClear?: false | PillSelectProps['onClear'];
}
export interface FieldPillSelectProps<Value = FieldPillSelectValueType> extends FieldProps<Value>, Omit<FieldPillSelectComponentProps<Value>, 'field'> {
}
export declare type FieldMultiSelectValueType = any[];
export interface FieldMultiSelectComponentProps<Value = FieldMultiSelectValueType> extends ValueComponentProps<Value>, Partial<OptionList<ValueInArray<Value>>>, Omit<MultiSelectProps, 'options' | 'getLabel' | 'getId' | 'error'> {
}
export interface FieldMultiSelectProps<Value = FieldMultiSelectValueType> extends FieldProps<Value>, Partial<OptionList<ValueInArray<Value>>>, Omit<MultiSelectProps, 'options' | 'getLabel' | 'getId' | 'error'> {
}
export declare type FieldGroupSelectValueType = any[];
export interface FieldGroupSelectComponentProps<Value = FieldGroupSelectValueType> extends ValueComponentProps<Value>, Partial<OptionList<Value[keyof Value]>>, Omit<GroupSelectProps, 'options' | 'getLabel' | 'getId' | 'error'> {
}
export interface FieldGroupSelectProps<Value = FieldGroupSelectValueType> extends FieldProps<Value>, Partial<OptionList<Value[keyof Value]>>, Omit<GroupSelectProps, 'options' | 'getLabel' | 'getId' | 'error'> {
}
export declare type FieldTieredSelectValueType = any[];
export interface FieldTieredSelectComponentProps<Value = FieldTieredSelectValueType> extends ValueComponentProps<Value>, Partial<OptionList<Value[keyof Value]>>, Omit<TieredSelectProps, 'options' | 'getLabel' | 'getId' | 'error' | 'children'> {
}
export interface FieldTieredSelectProps<Value = FieldTieredSelectValueType> extends FieldProps<Value>, Partial<OptionList<Value[keyof Value]>>, Omit<TieredSelectProps, 'options' | 'getLabel' | 'getId' | 'error' | 'children'> {
}
export {};
