import { ButtonProps } from '../Button/Button.types';
import { DropdownPlacement } from '../Dropdown/Dropdown.types';
import { MenuProps, MenuRef } from '../MenuImperative/MenuImperative.types';
import { OverlayTriggerProps } from '../OverlayTrigger';
export declare type SelectPlacement = DropdownPlacement;
declare type DivProps = React.ComponentPropsWithoutRef<'div'>;
export interface SelectMenuProps extends Omit<DivProps, 'onSelect' | 'onDragEnd'> {
    emptyMessage?: string;
    footer?: React.ReactNode;
    i18nScope?: string;
    onClear?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    onScrollBottom?: MenuProps['onScrollBottom'];
    onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onSelect?: MenuProps['onSelect'];
    optionsRef?: React.RefObject<HTMLDivElement>;
    menuRef: React.RefObject<MenuRef>;
}
export interface OptionProps extends DivProps {
    index?: number;
    value: any;
    disabled?: boolean;
    /**
     * Represents the currently selected value. This option will be styled
     * differently as well as receive UX to scroll into view and start list
     * navigation from this element.
     */
    selected?: boolean;
    /**
     * If nothing is selected, suggest this option. Suggested options mimic the
     * UX of a selected option, scroll into view and start list navigation from
     * this element.
     */
    suggested?: boolean;
}
interface QaTags {
    label: string;
    clear: string;
}
export interface SelectProps extends Omit<DivProps, 'onSelect'> {
    afterHide?: OverlayTriggerProps['afterHide'];
    afterShow?: OverlayTriggerProps['afterShow'];
    beforeHide?: OverlayTriggerProps['beforeHide'];
    beforeShow?: OverlayTriggerProps['beforeShow'];
    /**
     * Make the Select button 100% width
     */
    block?: boolean;
    /**
     * @default false
     */
    disabled?: boolean;
    /**
     * When there are no children this will render
     */
    emptyMessage?: string;
    /**
     * @default false
     */
    error?: boolean;
    footer?: React.ReactNode;
    hideDelay?: number;
    /**
     * The i18n key to use for the select's configurable strings.
     * Defaults to using the core library's default strings.
     */
    i18nScope?: string;
    label?: React.ReactNode;
    /**
     * If the select is loading
     * @default false
     */
    loading?: boolean;
    /**
     * It is possible for this component to have an empty value
     * (render placeholder). Enables the x icon.
     */
    onClear?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    /**
     * Optional <Code>function</Code> that automatically executes when
     * scrolling reaches the last item.
     */
    onScrollBottom?: MenuProps['onScrollBottom'];
    /**
     * Adds a search bar to the select.
     */
    onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onSelect?: MenuProps['onSelect'];
    optionsRef?: React.RefObject<HTMLDivElement>;
    /**
     * Renders when the label is blank
     */
    placeholder?: string;
    /**
     * The placement of the overlay
     * @default 'bottom-left'
     */
    placement?: SelectPlacement;
    qa?: Partial<QaTags>;
    showDelay?: number;
    /**
     * Configurable tabIndex for the select button
     * @default 0
     */
    tabIndex?: number;
}
export interface SelectButtonProps extends DivProps {
    block?: ButtonProps['block'];
    clearRef?: React.RefObject<HTMLButtonElement>;
    disabled?: ButtonProps['disabled'];
    dropdown?: boolean;
    error?: boolean;
    icon?: ButtonProps['icon'];
    label?: React.ReactNode;
    loading?: ButtonProps['loading'];
    onClear?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    open?: boolean;
    placeholder?: string;
    qa?: Partial<QaTags>;
    size?: ButtonProps['size'];
    tabIndex?: number;
    type?: ButtonProps['type'];
    variant?: ButtonProps['variant'];
    isMenuOpened?: boolean;
}
export {};
