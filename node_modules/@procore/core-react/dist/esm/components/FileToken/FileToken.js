var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { parseFilename } from '../../utils/filename';
import { Loader } from '../Loader';
import { transitionDuration } from '../Loader/Loader.styles';
import { Token } from '../Token';
import { Tooltip } from '../Tooltip';
import { pulseAnimationDuration, StyledExtension, StyledFilename, StyledFilenameShortcut, StyledFileToken, } from './FileToken.styles';
export var FileToken = React.forwardRef(function FileToken(_a, ref) {
    var fileName = _a.fileName, _b = _a.progressValue, progressValue = _b === void 0 ? 0 : _b, _c = _a.errorMessage, errorMessage = _c === void 0 ? '' : _c, onLabelClick = _a.onLabelClick, onClose = _a.onClose, qa = _a.qa, props = __rest(_a, ["fileName", "progressValue", "errorMessage", "onLabelClick", "onClose", "qa"]);
    var isError = Boolean(errorMessage);
    var isProgressValueComplete = !isError && progressValue >= 100;
    var _d = React.useState(isProgressValueComplete), isProgressComplete = _d[0], setProgressComplete = _d[1];
    var _e = React.useState(false), isFinalized = _e[0], setFinalized = _e[1];
    var didMountRef = React.useRef(false);
    var _f = parseFilename(fileName), filename = _f.filename, extension = _f.extension, isFilename = _f.isFilename;
    var name = isFilename ? "".concat(filename, ".") : fileName;
    React.useEffect(function () {
        var timerId = isProgressValueComplete
            ? window.setTimeout(function () {
                setProgressComplete(true);
            }, transitionDuration)
            : null;
        if (!isProgressValueComplete) {
            setProgressComplete(false);
        }
        return function () {
            timerId && clearTimeout(timerId);
        };
    }, [isProgressValueComplete]);
    React.useEffect(function () {
        var isFinalized = didMountRef.current && isProgressComplete;
        var timerId = isFinalized
            ? window.setTimeout(function () {
                setFinalized(false);
            }, pulseAnimationDuration)
            : null;
        setFinalized(didMountRef.current && isProgressComplete);
        if (!didMountRef.current) {
            didMountRef.current = true;
        }
        return function () {
            timerId && clearTimeout(timerId);
        };
    }, [isProgressComplete]);
    var token = (React.createElement(Token, null,
        React.createElement(Token.Label, { onClick: onLabelClick },
            React.createElement(StyledFilenameShortcut, null,
                React.createElement(StyledFilename, null, name),
                React.createElement(StyledExtension, null, extension))),
        React.createElement(Token.Icon, { icon: "x", onClick: onClose, "data-qa": qa === null || qa === void 0 ? void 0 : qa.closeButton })));
    // prevent empty tooltip blinks when navigating via the keyboard by wrapping in tooltip conditionally
    if (isError) {
        return (React.createElement(Tooltip, { ref: ref, trigger: "hover", overlay: errorMessage },
            React.createElement(StyledFileToken, __assign({}, props, { "$error": isError, "$finalized": isFinalized, "$progressComplete": isProgressComplete }),
                token,
                React.createElement(Loader, { value: progressValue, animated: true }, token))));
    }
    return (React.createElement(StyledFileToken, __assign({}, props, { "$error": isError, "$finalized": isFinalized, "$progressComplete": isProgressComplete, ref: ref }),
        token,
        React.createElement(Loader, { value: progressValue, animated: true }, token)));
});
FileToken.displayName = 'FileToken';
//# sourceMappingURL=FileToken.js.map