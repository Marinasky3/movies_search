import { CustomDataType, LevelWise, Node, UseTreeProps } from './Tree.types';
export declare function useTree<T extends Node = Node, P extends CustomDataType<T> = Array<T>>({ options, expanded, selected, selectionLimit, onSelect, multiple, autoExpandParent, getRoot, getChildren, getParentId, onCollapse, onExpand, }: UseTreeProps<T, P>): {
    nodes: (T & LevelWise & {
        items?: ((T & LevelWise) | (T & LevelWise & any))[] | undefined;
    })[];
    isExpanded: (node: T) => boolean;
    isSelected: (node: T) => boolean;
    isLoading: (node: T) => boolean;
    highlightedNode: T & LevelWise & {
        items?: ((T & LevelWise) | (T & LevelWise & any))[] | undefined;
    };
    isHighlighted: (node: T) => boolean;
    highlight: (node: T) => void;
    handleSelection: (node: T) => void;
    handleExpansion: (node: T) => void;
    setSelected: (newCollection: Set<T["id"]>) => void;
    setExpanded: (newCollection: Set<T["id"]>) => void;
    isFileLimitReached: boolean;
    listNavigation: import("../../state/ListNavigation").ListNavigationApi;
};
