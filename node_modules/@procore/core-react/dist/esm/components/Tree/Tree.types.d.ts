import React from 'react';
import { FixedSizeListProps, ListChildComponentProps } from 'react-window';
import { BoxProps } from '../../layouts/Box';
import { DivAttributes } from '../../utils/types';
import { OverlayProps } from '../Overlay';
declare type NodeType = 'branch' | 'leaf';
export declare type NodeId = number | string;
export interface Node {
    id: NodeId;
}
export interface DefaultNode extends Node {
    name: string;
    parentId: NodeId;
    type: NodeType;
}
export interface LevelWise {
    level: number;
}
export interface UseTreeProps<T extends Node = Node, P extends CustomDataType<T> = Array<T>> {
    options: P;
    expanded: T['id'][];
    selected: T['id'][];
    selectionLimit: number;
    getRoot(data: P): T;
    getChildren(node: T): T[];
    getParentId(node: T): NodeId;
    autoExpandParent: boolean;
    multiple: boolean;
    onSelect(nodes: T[]): void;
    onCollapse(node: T): void;
    onExpand(node: T): Promise<any>;
}
export interface TreeNodeAPI<T extends Node = Node> {
    nodes: (T & LevelWise)[];
    getIcon(props: T): React.ReactNode;
    getLabel(props: T): string;
    getType(node: T): NodeType;
    isExpandable(node: T): boolean;
    isSelectable(node: T): boolean;
    isSelected(node: T): boolean;
    isLoading(node: T): boolean;
    isExpanded(node: T): boolean;
    highlight(node: T): void;
    isHighlighted(node: T): boolean;
    handleSelection(node: T): void;
    handleExpansion(node: T): void;
    rowRenderer(props: TreeRowProps<T>): React.ReactNode;
    selectionLimit: number;
    isFileLimitReached: boolean;
    isTreeFocused: boolean;
    treeContainer: HTMLDivElement;
}
export interface CustomDataType<T> {
    [key: string]: any;
}
export interface TreeRef<T extends Node = Node> {
    setSelected: (selected: T | T[]) => void;
    setExpanded: (expanded: T | T[]) => void;
    toggleSelected: (node: T) => void;
    toggleExpanded: (node: T) => void;
    rootEl: HTMLElement | null;
}
export interface TreeNodeProps extends ListChildComponentProps {
    data: TreeNodeAPI;
}
export interface TreeRowOverlayProps {
    overlayRef: OverlayProps['overlayRef'];
    targetRef: OverlayProps['targetRef'];
    message: {
        key: string;
        options?: object;
    };
}
export interface TreeRowProps<T extends Node = Node> extends Omit<TreeNodeAPI, 'rowRenderer' | 'nodes' | 'highlight' | 'isTreeFocused'> {
    node: T & LevelWise;
    shouldShowTooltip: boolean;
    isMouseOver: boolean;
    treeContainer: HTMLDivElement;
}
export interface TreeProps<T extends Node = Node, P extends CustomDataType<T> = Array<T>> extends Omit<DivAttributes, 'onSelect'>, Pick<FixedSizeListProps, 'innerElementType' | 'outerElementType'> {
    options: P;
    /**
     * Array of keys of initially expanded nodes
     */
    expanded?: T['id'][];
    /**
     * Array of keys of initially selected nodes
     */
    selected?: T['id'][];
    /**
     * Number of nodes that can be selected
     */
    selectionLimit?: number;
    /**
     * Function should return parent <Code>Root Node</Code>
     * <CodeBlock>{'(): Node'}</CodeBlock>
     */
    getRoot?(data: P): T;
    /**
     * Should return an array of children nodes.
     * <CodeBlock>{'(node: Node): Node[]'}</CodeBlock>
     */
    getChildren?(node: T): T[];
    /**
     * This function will be executed on each node. Should return{' '}
     * <Code>Icon</Code> component
     * <CodeBlock>{'(node: Node): React.ReactNode'}</CodeBlock>
     */
    getIcon?(node: T): React.ReactNode;
    /**
     * This function will be executed on each node. Should return{' '}
     * <Code>label</Code> for row
     * <CodeBlock>{'(node: Node): string'}</CodeBlock>
     */
    getLabel?(node: T): string;
    /**
     * This function will be executed on each node. Should return parent{' '}
     * <Code>Node</Code>
     * <CodeBlock>{'(node: Node): NodeId'}</CodeBlock>
     * */
    getParentId?(node: T): NodeId;
    /**
     * This function will be executed on each node. Should return{' '}
     * <Code>'branch'</Code> or <Code>'leaf'</Code>
     * <CodeBlock>{'(node: Node): NodeType'}</CodeBlock>
     */
    getType?(node: T): NodeType;
    /**
     * Function of whether to enable tree node expansion/collapsing.
     * <CodeBlock>{'(node: Node): boolean'}</CodeBlock>
     */
    isExpandable?(node: T): boolean;
    /**
     * Function of whether to enable tree node selection.
     * <CodeBlock>{'(node: Node): boolean'}</CodeBlock>
     */
    isSelectable?(node: T): boolean;
    /**
     * Allows selection of multiple nodes
     */
    multiple?: boolean;
    /**
     * Number of visible nodes. Helps fix performance bottlenecks in large dataset
     */
    maxVisibleNodes?: number;
    /**
     * Height of the list. Helps fix performance bottlenecks in large dataset.
     */
    visibleHeight?: number;
    /**
     * Whether to expand parent node when a child node is expanded or selected
     */
    autoExpandParent?: boolean;
    /**
     * Callback return currently selected array of nodes.
     * <CodeBlock>{'(nodes: Node[]): void'}</CodeBlock>
     */
    onSelect?(nodes: T[]): void;
    /**
     * Triggers when current node collapse
     * <CodeBlock>{'(node: Node): void'}</CodeBlock>
     */
    onCollapse?(node: T): void;
    /**
     * Triggers when current node expand
     * <CodeBlock>{'(node: Node): Promise<void>'}</CodeBlock>
     */
    onExpand?(node: T): Promise<any>;
    /**
     * Callback for rendering tree nodes
     * <CodeBlock>{'(props: TreeRowProps): React.ReactNode'}</CodeBlock>
     */
    rowRenderer?(props: TreeRowProps<T>): React.ReactNode;
}
export interface IconContainerProps extends BoxProps {
    isSelected?: boolean;
}
export interface TreeRowTooltipProps {
    isHighlighted: boolean;
    isSelected: boolean;
    isSelectable: boolean;
    selectionLimit: number;
    isFileLimitReached: boolean;
    shouldShowTooltip: boolean;
    isMouseOver: boolean;
    fileName: string;
    nodeType: NodeType;
    treeContainer: HTMLDivElement;
}
export interface TreeRowContainerProps extends Omit<DivAttributes, 'color'> {
    isHighlighted: boolean;
    isSelected: boolean;
    isSelectable: boolean;
    isExpandable: boolean;
    isFileLimitReached: boolean;
    level: number;
}
export {};
