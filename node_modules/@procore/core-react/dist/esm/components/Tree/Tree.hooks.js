var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { useSet } from '../../effects/useSet';
import { useListNavigation } from '../../state/ListNavigation';
export function useTree(_a) {
    var _this = this;
    var options = _a.options, expanded = _a.expanded, selected = _a.selected, selectionLimit = _a.selectionLimit, onSelect = _a.onSelect, multiple = _a.multiple, autoExpandParent = _a.autoExpandParent, getRoot = _a.getRoot, getChildren = _a.getChildren, getParentId = _a.getParentId, onCollapse = _a.onCollapse, onExpand = _a.onExpand;
    var rootNode = React.useMemo(function () { return getRoot(options); }, [getRoot, options]);
    var getNodes = React.useCallback(function (nodes, node) { return __spreadArray(__spreadArray(__spreadArray([], nodes, true), [
        node
    ], false), getChildren(node).reduce(getNodes, []), true); }, [getChildren]);
    var nodes = React.useMemo(function () { return (rootNode ? getNodes([], rootNode) : []); }, [
        rootNode,
        getNodes,
    ]);
    var getNodeById = React.useCallback(function (nodeId) { return nodes.find(function (item) { return item.id === nodeId; }); }, [nodes]);
    var _b = useSet(), isLoading = _b.has, startLoading = _b.add, stopLoading = _b.remove;
    var handleExpand = React.useCallback(function (nodeId) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, , 2, 3]);
                    startLoading(nodeId);
                    return [4 /*yield*/, onExpand(getNodeById(nodeId))];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    stopLoading(nodeId);
                    return [7 /*endfinally*/];
                case 3: return [2 /*return*/];
            }
        });
    }); }, [getNodeById, onExpand, startLoading, stopLoading]);
    var handleCollapse = React.useCallback(function (nodeId) { return onCollapse(getNodeById(nodeId)); }, [getNodeById, onCollapse]);
    var getExpandedIds = React.useCallback(function (nodeIds, currentNode) {
        var parentId = getParentId(currentNode);
        if (parentId === rootNode.id || parentId === getParentId(rootNode)) {
            return __spreadArray(__spreadArray([], nodeIds, true), [currentNode.id, parentId], false);
        }
        else {
            return getExpandedIds(__spreadArray(__spreadArray([], nodeIds, true), [currentNode.id], false), getNodeById(parentId));
        }
    }, [getNodeById, getParentId, rootNode]);
    var expandedIds = React.useMemo(function () {
        if (autoExpandParent) {
            return nodes
                .filter(function (node) { return expanded.concat(selected).includes(node.id); })
                .reduce(getExpandedIds, []);
        }
        return expanded;
    }, [autoExpandParent, expanded, getExpandedIds, nodes, selected]);
    var _c = useSet({
        initialValue: new Set(expandedIds),
        onAdd: handleExpand,
        onRemove: handleCollapse,
    }), isExpanded = _c.has, toggleExpanded = _c.toggle, setExpanded = _c.setCollection;
    var handleChange = React.useCallback(function (selectedNodes) {
        return onSelect(Array.from(selectedNodes).map(getNodeById));
    }, [getNodeById, onSelect]);
    var _d = useSet({
        initialValue: new Set(selected),
        onChange: handleChange,
    }), selectedIds = _d.collection, isSelected = _d.has, addSelected = _d.add, removeSelected = _d.remove, setSelected = _d.setCollection;
    var toggleSingleSelected = React.useCallback(function (nodeId) {
        setSelected(new Set([nodeId]));
    }, [setSelected]);
    var toggleSelected = React.useCallback(function (nodeId) {
        if (!isSelected(nodeId)) {
            if (selectedIds.size < selectionLimit) {
                addSelected(nodeId);
            }
        }
        else {
            removeSelected(nodeId);
        }
    }, [addSelected, isSelected, removeSelected, selectedIds.size, selectionLimit]);
    var toggleSelection = React.useMemo(function () { return (multiple ? toggleSelected : toggleSingleSelected); }, [multiple, toggleSelected, toggleSingleSelected]);
    var handleSelection = React.useCallback(function (node) { return toggleSelection(node.id); }, [toggleSelection]);
    var listNavigation = useListNavigation({
        circular: false,
        initialIndex: 0,
        size: 0,
    });
    var getSelectableItems = React.useCallback(function (visibleNodes, node) {
        var visibleItems = isExpanded(node.id) && !isLoading(node.id) && node.items
            ? node.items.reduce(getSelectableItems, [])
            : [];
        return __spreadArray(__spreadArray(__spreadArray([], visibleNodes, true), [node], false), visibleItems, true);
    }, [isExpanded, isLoading]);
    var getChildrenNodes = React.useCallback(function (nodes, node, level) {
        var children = getChildren(node);
        if (children.length > 0) {
            return __spreadArray(__spreadArray([], nodes, true), [
                __assign(__assign({}, node), { level: level, items: children.reduce(function (acc, curr) { return getChildrenNodes(acc, curr, level + 1); }, []) }),
            ], false);
        }
        else {
            return __spreadArray(__spreadArray([], nodes, true), [__assign(__assign({}, node), { level: level })], false);
        }
    }, [getChildren]);
    var nodesTree = React.useMemo(function () { return (rootNode ? getChildrenNodes([], rootNode, 0) : []); }, [rootNode, getChildrenNodes]);
    var visibleNodes = React.useMemo(function () { return nodesTree.reduce(getSelectableItems, []); }, [getSelectableItems, nodesTree]);
    var highlight = React.useCallback(function (node) {
        var index = visibleNodes.findIndex(function (visibleNode) { return visibleNode.id === node.id; });
        if (index !== -1) {
            listNavigation.set(index);
        }
    }, [listNavigation, visibleNodes]);
    React.useEffect(function () {
        listNavigation.setSize(visibleNodes.length);
    }, [listNavigation, visibleNodes.length]);
    var isHighlighted = React.useCallback(function (node) {
        return visibleNodes[listNavigation.index] &&
            visibleNodes[listNavigation.index].id === node.id;
    }, [listNavigation.index, visibleNodes]);
    var highlightedNode = React.useMemo(function () {
        return visibleNodes[listNavigation.index];
    }, [listNavigation.index, visibleNodes]);
    return {
        nodes: visibleNodes,
        isExpanded: React.useCallback(function (node) { return isExpanded(node.id); }, [
            isExpanded,
        ]),
        isSelected: React.useCallback(function (node) { return isSelected(node.id); }, [
            isSelected,
        ]),
        isLoading: React.useCallback(function (node) { return isLoading(node.id); }, [isLoading]),
        highlightedNode: highlightedNode,
        isHighlighted: isHighlighted,
        highlight: highlight,
        handleSelection: handleSelection,
        handleExpansion: React.useCallback(function (node) { return toggleExpanded(node.id); }, [
            toggleExpanded,
        ]),
        setSelected: setSelected,
        setExpanded: setExpanded,
        isFileLimitReached: selectedIds.size >= selectionLimit,
        listNavigation: listNavigation,
    };
}
//# sourceMappingURL=Tree.hooks.js.map