var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function generateRandomString(length) {
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    var result = '';
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
var root = {
    id: 1,
    name: 'Root Folder',
    parentId: 'ROOT_ID',
    file: false,
};
export function createMockData(amountOfNodes) {
    var ids = [root.id];
    var mockData = [root];
    for (var i = 0, id = 2; i < amountOfNodes; i++, id++) {
        mockData.push({
            name: generateRandomString(5),
            id: id,
            file: false,
            parentId: ids[Math.floor(Math.random() * ids.length)],
        });
        ids.push(id);
    }
    var foldersIds = mockData.map(function (item) { return item.parentId; });
    var uniqueFolders = new Set(foldersIds);
    return mockData.map(function (item) {
        return uniqueFolders.has(item.id) ? item : __assign(__assign({}, item), { file: true });
    });
}
//# sourceMappingURL=treeMockData.js.map