import { Props } from '../../utils/types';
import React from 'react';
import { BoxProps } from '../../layouts/Box';
import { ListNavigationApi } from '../../state/ListNavigation';
import { ChangeEvent } from '../../state/TextEntry';
import { SearchHook, SearchProps } from '../Search/Search.types';
export declare type ElementTypeChecker = (element: any, index?: number, list?: any[]) => boolean;
export interface Selection {
    event: Event;
    group: boolean;
    item: any;
}
export interface NavigationProps extends Props {
    index?: number;
    ref?: React.Ref<any>;
}
export interface ItemProps extends NavigationProps {
    children?: React.ReactNode;
    className?: string;
    /**
     * Value which can be passed around various callback functions. Can be anything!
     */
    item?: any;
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => any;
    /**
     * Is the item selected
     * @default false
     */
    selected?: boolean;
    suggested?: boolean;
}
export interface GroupProps {
    className?: string;
    /**
     * Can the group item be clicked
     */
    clickable?: boolean;
    /**
     * Value which can be passed around various callback functions. Can be anything!
     */
    item?: any;
}
export interface OptionsProps {
    children?: React.ReactNode;
    className?: string;
    padding?: string;
    /**
     * @default true
     */
    scrollable?: boolean;
}
export interface MenuSearchProps extends SearchProps, Props {
    /**
     * The i18n key to use for the menu search's configurable strings. Defaults to
     * using the core library's default strings.
     */
    i18nScope?: string;
}
export interface HeaderProps extends Props {
    tabIndex?: number;
}
export interface FooterProps extends Omit<BoxProps, 'as'> {
}
export interface MenuHookConfig {
    isSelectable?: MenuHook['isSelectable'];
    keyHandlerRef?: React.RefObject<HTMLElement>;
    multiple?: boolean;
    onScrollBottom?: MenuHook['onScrollBottom'];
    onSearch?: (event: ChangeEvent) => void;
    onSelect?: MenuHook['selectItem'];
    scrollable?: MenuHook['scrollable'];
    usingSearchHook?: SearchHook;
}
export interface MenuHook {
    domHandlers: {
        onKeyDown: (e: React.KeyboardEvent<HTMLElement>) => void;
    };
    highlighted: React.MutableRefObject<HTMLDivElement | null>;
    isSelectable: ElementTypeChecker;
    listNavigation: ListNavigationApi;
    multiple: boolean;
    onScrollBottom?: (e: Event) => void;
    /**
     * @default true
     */
    scrollable: boolean;
    search: SearchHook;
    selectItem: (selection: Selection) => void;
}
export interface MenuProps extends Props, Omit<OptionsProps, 'padding'> {
    /**
     * <CodeBlock>
     *  (element: any, index?: number, list?: any[]) => boolean
     * </CodeBlock>
     *
     * @deprecated
     *
     * The `isSelectable` prop has been deprecated and will be removed in a future version.
     * Menu item selection is now handled internally and there is no need to configure this
     * anymore.
     *
     * @deprecatedSince 10.20.0
     */
    isSelectable?: ElementTypeChecker;
    /**
     * Ref object which will get the key handler listeners
     */
    keyHandlerRef?: React.RefObject<HTMLElement>;
    onScrollBottom?: (e: Event) => void;
    /**
     * <div>Callback for selecting an item from the menu</div>
     * <CodeBlock>
     * {
     *   '({ event: ReactEvent, item: Menu.Item.props.item, group: bool }) => void'
     * }
     * </CodeBlock>
     * <div>
     *  <Code>item</Code> will be the <Code>item</Code> prop supplied to the{' '}
     *  <Code>Item</Code> component
     *  <br />
     *  <Code>group</Code> will be <Code>true</Code> if the clicked item was
     *  a group label
     * </div>
     */
    onSelect?: (selection: Selection) => any;
    usingHook?: MenuHook;
    UNSAFE_closesOnSelect?: boolean;
}
