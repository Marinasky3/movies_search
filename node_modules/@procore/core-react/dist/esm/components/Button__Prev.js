var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import styles from '@procore/core-css/src/components/_button.scss';
import React from 'react';
import { Icon } from './Icon';
import { Spinner } from './Spinner';
var classnames = require('classnames/bind');
export var buttonType = {
    button: 'button',
    reset: 'reset',
    submit: 'submit',
};
export var buttonModifier = {
    block: 'block',
    error: 'error',
    iconOnly: 'icon-only',
    loading: 'loading',
    open: 'open',
    withArrow: 'with-arrow',
};
export var buttonVariant = {
    actionOutline: 'action-outline',
    dropdown: 'dropdown',
    dropdownSecondary: 'dropdown-secondary',
    errorOutline: 'error-outline',
    form: 'form',
    infoOutline: 'info-outline',
    primary: 'primary',
    secondary: 'secondary',
    successOutline: 'success-outline',
    tertiary: 'tertiary',
};
var cx = classnames.bind(styles);
var getSpinnerVariant = function (variant) {
    return variant === 'primary' || variant === 'form' ? 'light' : '';
};
var getSpinnerSize = function (size, dropdown) {
    return size === 'sm' || dropdown ? 'xs' : 'sm';
};
var getLabel = function (child) {
    return child.type === Icon ? (React.createElement("div", { className: cx('button__label', 'button__label--icon') }, React.cloneElement(child, { size: 'sm' }))) : (React.createElement("div", { className: cx('button__label') }, child));
};
export var Button = React.forwardRef(function (_a, ref) {
    var _b;
    var _c = _a.block, block = _c === void 0 ? false : _c, children = _a.children, className = _a.className, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.dropdown, dropdown = _e === void 0 ? false : _e, _f = _a.error, error = _f === void 0 ? false : _f, icon = _a.icon, _g = _a.loading, loading = _g === void 0 ? false : _g, _h = _a.open, open = _h === void 0 ? false : _h, _j = _a.size, size = _j === void 0 ? 'md' : _j, _k = _a.type, type = _k === void 0 ? 'button' : _k, _l = _a.variant, variant = _l === void 0 ? 'primary' : _l, props = __rest(_a, ["block", "children", "className", "disabled", "dropdown", "error", "icon", "loading", "open", "size", "type", "variant"]);
    return (React.createElement("button", __assign({ ref: ref, type: type, className: cx('button', "button--".concat(size), (_b = {},
            _b["button--".concat(buttonModifier.block)] = block,
            _b["button--".concat(buttonModifier.error)] = error,
            _b["button--".concat(buttonModifier.iconOnly)] = !children && icon,
            _b["button--".concat(buttonModifier.loading)] = loading,
            _b["button--".concat(buttonModifier.open)] = open,
            _b["button--".concat(buttonModifier.withArrow)] = dropdown,
            _b["button--".concat(variant)] = variant,
            _b), className), disabled: disabled || loading, tabIndex: 0 }, props),
        icon && getLabel(React.createElement(Icon, { icon: icon })),
        React.Children.toArray(children)
            .filter(function (child) { return child; })
            .map(getLabel)
            .map(function (label, key) { return React.cloneElement(label, { key: key }); }),
        React.createElement("div", { className: cx('button__spinner') },
            React.createElement(Spinner, { size: getSpinnerSize(size, dropdown), variant: getSpinnerVariant(variant) }))));
});
Button.displayName = 'Button';
export default Button;
//# sourceMappingURL=Button__Prev.js.map