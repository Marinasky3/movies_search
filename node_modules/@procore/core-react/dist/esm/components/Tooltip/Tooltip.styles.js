var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import styled from 'styled-components';
import { getArrowPlacement } from '../../styles/arrows';
import { borderRadius } from '../../styles/borderRadius';
import { colors } from '../../styles/colors';
import { getShadow } from '../../styles/shadows';
import { spacing } from '../../styles/spacing';
import { getTypographyIntent } from '../Typography/Typography.styles';
export var StyledTooltip = styled.span(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  ", "\n  ", "\n\n  background-color: ", ";\n  border-radius: ", "px;\n  color: ", ";\n  max-width: 200px;\n  padding: ", "px ", "px;\n  position: relative;\n\n  // for IE11, use word-wrap property\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n"], ["\n  ", "\n  ", "\n  ", "\n\n  background-color: ", ";\n  border-radius: ", "px;\n  color: ", ";\n  max-width: 200px;\n  padding: ", "px ", "px;\n  position: relative;\n\n  // for IE11, use word-wrap property\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n"])), function (_a) {
    var $placement = _a.$placement;
    return getArrowPlacement(6, 'gray15', $placement);
}, getShadow(3, 'bottom'), getTypographyIntent('small'), colors.gray15, borderRadius.md, colors.white, spacing.sm, spacing.md);
export var StyledContainer = styled.span(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: inline-flex;\n"], ["\n  display: inline-flex;\n"])));
var templateObject_1, templateObject_2;
//# sourceMappingURL=Tooltip.styles.js.map