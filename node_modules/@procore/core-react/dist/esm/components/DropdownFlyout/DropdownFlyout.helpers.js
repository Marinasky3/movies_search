var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { ulid } from 'ulid';
import { rootId, } from './DropdownFlyout.types';
import { StyledDropdownFlyoutExpandIcon, StyledDropdownFlyoutLabel, } from './DropdownFlyout.styles';
export function noop() { }
export function returnFalse() {
    return false;
}
function getFirst(arr) {
    return arr[0];
}
function isRootOption(optionId) {
    return optionId === rootId;
}
export function hasChildren(option) {
    return Array.isArray(option.children);
}
function reducer(state, action) {
    switch (action.type) {
        case 'highlight':
            return __assign(__assign({}, state), { highlighted: action.option });
        case 'expand':
            return __assign(__assign({}, state), { highlighted: action.option, expanded: __spreadArray(__spreadArray([], collectParentIds(state.options, action.option.id), true), [
                    action.option.id,
                ], false) });
        case 'collapse':
            return __assign(__assign({}, state), { highlighted: action.option, expanded: collectParentIds(state.options, action.option.id) });
        case 'close':
            return __assign(__assign({}, state), { expanded: [], highlighted: getFirst(state.options), isOpen: false });
        case 'open':
            return __assign(__assign({}, state), { isOpen: true });
        case 'setMouseOver':
            return __assign(__assign({}, state), { isMouseOver: action.isMouseOver });
        case 'setFocused':
            return __assign(__assign({}, state), { isFocused: action.isFocused });
        default:
            return state;
    }
}
function findById(options, optionId, initialValue) {
    if (initialValue === void 0) { initialValue = getFirst(options); }
    return options.reduce(function (result, current) {
        if (current.id === optionId) {
            return current;
        }
        if (current.children) {
            return findById(current.children, optionId, result);
        }
        return result;
    }, initialValue);
}
export function transformOption(options, parentId) {
    return options.reduce(function (acc, option) {
        var id = ulid();
        var updatedOption = __assign({ id: id, parentId: parentId, origin: option }, (Array.isArray(option.children) && {
            children: transformOption(option.children, id),
        }));
        return __spreadArray(__spreadArray([], acc, true), [updatedOption], false);
    }, []);
}
function collectParentIds(options, optionId) {
    var option = findById(options, optionId);
    if (!isRootOption(option.parentId)) {
        return __spreadArray(__spreadArray([], collectParentIds(options, option.parentId), true), [option.parentId], false);
    }
    return [option.parentId];
}
export function useDropdownFlyout(_a) {
    var flyoutOptions = _a.flyoutOptions, _b = _a.onClick, _onClick = _b === void 0 ? noop : _b, _onKeyDown = _a.onKeyDown;
    var _c = React.useReducer(reducer, {
        options: flyoutOptions,
        expanded: [],
        highlighted: getFirst(flyoutOptions),
        isMouseOver: false,
        isFocused: false,
        isOpen: false,
    }), _d = _c[0], options = _d.options, expanded = _d.expanded, highlighted = _d.highlighted, isOpen = _d.isOpen, isMouseOver = _d.isMouseOver, isFocused = _d.isFocused, dispatch = _c[1];
    var setMouseOver = React.useCallback(function (isMouseOver) { return dispatch({ type: 'setMouseOver', isMouseOver: isMouseOver }); }, []);
    var setFocused = React.useCallback(function (isFocused) { return dispatch({ type: 'setFocused', isFocused: isFocused }); }, []);
    var isExpanded = function (option) { return expanded.includes(option.id); };
    var isHighlighted = function (option) {
        var parentIds = collectParentIds(options, highlighted.id);
        var isCorrectId = option.id === highlighted.id || parentIds.some(function (id) { return id === option.id; });
        return (isMouseOver || isFocused) && isCorrectId;
    };
    var findOptionById = React.useCallback(function (id) { return findById(options, id); }, [options]);
    var expand = React.useCallback(function (option) {
        return dispatch({
            type: 'expand',
            option: option,
        });
    }, []);
    var collapse = React.useCallback(function (option) {
        return dispatch({
            type: 'collapse',
            option: option,
        });
    }, []);
    var highlight = React.useCallback(function (option) {
        return dispatch({
            type: 'highlight',
            option: option,
        });
    }, []);
    var traversingHighlight = React.useCallback(function (item) {
        var tier = isRootOption(highlighted.parentId)
            ? options
            : findOptionById(highlighted.parentId).children || [];
        var optionIndex = tier.findIndex(function (item) { return item.id === highlighted.id; });
        switch (item) {
            case 'next':
                var nextIndex = optionIndex + 1 >= tier.length ? 0 : optionIndex + 1;
                highlight(tier[nextIndex]);
                break;
            case 'prev':
                var prevIndex = optionIndex - 1 < 0 ? tier.length - 1 : optionIndex - 1;
                highlight(tier[prevIndex]);
                break;
            case 'children':
                if (Array.isArray(highlighted.children)) {
                    expand(highlighted);
                    highlight(getFirst(highlighted.children));
                }
                break;
            case 'parent':
                if (!isRootOption(highlighted.parentId)) {
                    var parentOption = findOptionById(highlighted.parentId);
                    collapse(parentOption);
                }
                break;
            default:
                return;
        }
    }, [options, findOptionById, collapse, highlighted, expand, highlight]);
    var closeDropdown = React.useCallback(function () {
        dispatch({ type: 'close' });
    }, []);
    var openDropdown = React.useCallback(function () {
        dispatch({ type: 'open' });
    }, []);
    var onClick = React.useCallback(function (option) {
        if (!hasChildren(option.origin)) {
            _onClick(option.origin);
            closeDropdown();
        }
    }, [_onClick, closeDropdown]);
    var onKeyDown = React.useCallback(function (e) {
        var key = e.key;
        switch (key) {
            case 'Enter':
                e.preventDefault();
                if (!isOpen && isFocused) {
                    openDropdown();
                }
                else {
                    if (hasChildren(highlighted.origin)) {
                        traversingHighlight('children');
                    }
                    else {
                        onClick(highlighted);
                    }
                }
                break;
            case 'Escape':
            case 'Esc':
                e.preventDefault();
                if (isRootOption(highlighted.parentId)) {
                    closeDropdown();
                }
                else {
                    traversingHighlight('parent');
                }
                break;
            case 'ArrowDown':
            case 'Down':
                e.preventDefault();
                traversingHighlight('next');
                break;
            case 'ArrowUp':
            case 'Up':
                e.preventDefault();
                traversingHighlight('prev');
                break;
        }
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e);
    }, [
        closeDropdown,
        openDropdown,
        traversingHighlight,
        highlighted,
        isOpen,
        isFocused,
        onClick,
        _onKeyDown,
    ]);
    return {
        isFocused: isFocused,
        isMouseOver: isMouseOver,
        isOpen: isOpen,
        options: options,
        expanded: expanded,
        highlighted: highlighted,
        expand: expand,
        collapse: collapse,
        isHighlighted: isHighlighted,
        isExpanded: isExpanded,
        closeDropdown: closeDropdown,
        openDropdown: openDropdown,
        onKeyDown: onKeyDown,
        onClick: onClick,
        setMouseOver: setMouseOver,
        setFocused: setFocused,
    };
}
export function defaultOptionRenderer(option) {
    return (React.createElement(React.Fragment, null,
        React.createElement(StyledDropdownFlyoutLabel, null, option.label),
        hasChildren(option) && (React.createElement(StyledDropdownFlyoutExpandIcon, { "data-qa": "core-dropdown-flyout-option-expand-icon" }))));
}
export var DropdownFlyoutContext = React.createContext({
    onClick: noop,
    expand: noop,
    collapse: noop,
    optionRenderer: defaultOptionRenderer,
    isExpanded: returnFalse,
    isHighlighted: returnFalse,
});
export var useDropdownFlyoutContext = function () {
    return React.useContext(DropdownFlyoutContext);
};
//# sourceMappingURL=DropdownFlyout.helpers.js.map