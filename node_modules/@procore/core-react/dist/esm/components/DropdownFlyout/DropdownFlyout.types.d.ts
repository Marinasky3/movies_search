import { DivAttributes, Props } from '../../utils/types';
import { OverlayProps } from '../Overlay';
import { DropdownProps } from '../Dropdown';
export declare const rootId = "ROOT_ID";
export declare type Action = {
    type: 'highlight';
    option: FlyoutOption;
} | {
    type: 'expand';
    option: FlyoutOption;
} | {
    type: 'collapse';
    option: FlyoutOption;
} | {
    type: 'close';
} | {
    type: 'open';
} | {
    type: 'setMouseOver';
    isMouseOver: boolean;
} | {
    type: 'setFocused';
    isFocused: boolean;
};
declare type ExpandedItem = FlyoutOptionId;
export declare type State = {
    highlighted: FlyoutOption;
    expanded: ExpandedItem[];
    options: FlyoutOption[];
    isMouseOver: boolean;
    isFocused: boolean;
    isOpen: boolean;
};
export interface DropdownOption {
    value: any;
    label: string;
    children?: DropdownOption[];
}
declare type OptionId = string;
export interface FlyoutOption {
    id: OptionId;
    parentId: OptionId | typeof rootId;
    origin: DropdownOption;
    children?: FlyoutOption[];
}
export declare type FlyoutOptionId = FlyoutOption['id'] | typeof rootId;
export interface FlyoutCaptionProps extends DivAttributes {
    option: DropdownOption;
    highlighted: boolean;
    optionRenderer: (option: DropdownOption) => React.ReactNode;
}
export interface FlyoutListProps {
    options: FlyoutOption[];
    targetRef: OverlayProps['targetRef'];
    overlayRef: OverlayProps['overlayRef'];
    placement: OverlayProps['placement'];
    padding?: OverlayProps['padding'];
    container?: HTMLElement;
}
export interface DropdownFlyoutProps extends Omit<DivAttributes, 'onClick'> {
    disabled?: DropdownProps['disabled'];
    /**
     * The text of the button.
     */
    label?: DropdownProps['label'];
    loading?: DropdownProps['loading'];
    /**
     * The icon of the button.
     */
    icon?: DropdownProps['icon'];
    /**
     * <div>
     *  Data of the dropdown options - <Code>Option[]</Code>
     *  <CodeBlock>
     *    {`type Option = { label: string; children?: Option[] }`}
     *  </CodeBlock>
     * </div>
     */
    options: DropdownOption[];
    /**
     * <div>
     *  Callback for click on dropdown option
     *  <CodeBlock>{'(option: Option) => void'}</CodeBlock>
     * </div>
     */
    onClick?: (option: DropdownOption) => void;
    /**
     * <div>
     *  Render prop to specify custom dropdown option content
     *  <CodeBlock>{'(option: Option) => ReactNode'}</CodeBlock>
     * </div>
     */
    optionRenderer?: (option: DropdownOption) => React.ReactNode;
    /**
     * @default 'right-bottom'
     */
    placement?: OverlayProps['placement'];
    /**
     * The button size
     * @default 'md'
     */
    size?: DropdownProps['size'];
    /**
     * @default 'secondary'
     */
    variant?: DropdownProps['variant'];
}
export interface FlyoutItemProps extends Props {
    option: FlyoutOption;
    container?: HTMLElement;
    placement: OverlayProps['placement'];
}
export {};
