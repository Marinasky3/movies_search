var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { areEqual } from 'react-window';
import { useResizeObserver } from '../../../effects/ResizeObserver';
import { useFileSelectContext } from '../FileSelect';
import { Spinner } from '../../Spinner';
import { Tree } from '../../Tree';
import { StyledFileTreeSpinner } from './TreeSource.styles';
var topPadding = 24;
function noop() { }
/**
 * `innerElementType` and `outerElementType` elements are needed to create top padding.
 * Be aware that because of virtualization, it is not a trivial task.
 * 1. First of all, we pass height to the `Tree` component without padding, it is needed for correct work of keyboard navigation.
 * 2. Then we counterbalance height in outerElementType component (by adding padding to the height).
 * 3. The last step - make padding using the shift of a relatively positioned element.
 */
var innerElementType = React.memo(React.forwardRef(function (_a, ref) {
    var style = _a.style, children = _a.children, props = __rest(_a, ["style", "children"]);
    return (React.createElement("div", __assign({ ref: ref, style: __assign(__assign({}, style), { position: 'relative', top: "".concat(topPadding, "px"), height: "".concat(parseFloat(style.height) - topPadding, "px") }) }, props), children));
}), areEqual);
var outerElementType = React.memo(React.forwardRef(function (_a, ref) {
    var style = _a.style, children = _a.children, props = __rest(_a, ["style", "children"]);
    return (React.createElement("div", __assign({ ref: ref, style: __assign(__assign({}, style), { height: "".concat(parseFloat(style.height) + topPadding, "px") }) }, props), children));
}), areEqual);
export var TreeSource = React.forwardRef(function (_a, ref) {
    var sourceId = _a.sourceId, title = _a.title, icon = _a.icon, options = _a.options, _b = _a.isLoading, isLoading = _b === void 0 ? false : _b, _c = _a.onChange, onChange = _c === void 0 ? noop : _c, _d = _a.onExpand, onExpand = _d === void 0 ? function () { return Promise.resolve(); } : _d, props = __rest(_a, ["sourceId", "title", "icon", "options", "isLoading", "onChange", "onExpand"]);
    var _e = useFileSelectContext(), maxFileNumber = _e.maxFileNumber, register = _e.register, currentSource = _e.currentSource, onSourceChange = _e.onChange, onResetValue = _e.onResetValue;
    var _f = React.useState([]), value = _f[0], setValue = _f[1];
    var _g = React.useState([]), expandedItems = _g[0], setExpandedNodes = _g[1];
    React.useEffect(function () {
        onSourceChange(sourceId, value);
    }, [value]);
    React.useEffect(function () {
        var unregister = register(sourceId, {
            title: title,
            icon: icon,
        });
        var unsubscribe = onResetValue(function () {
            setValue([]);
        });
        return function () {
            unsubscribe();
            unregister();
        };
    }, []);
    var selectedFiles = React.useMemo(function () { return value.map(function (item) { return item.id; }); }, [value]);
    var _onChange = function (files) {
        setValue(files);
        onChange(files);
    };
    var _onExpand = function (node) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, onExpand(node)];
                case 1:
                    _a.sent();
                    setExpandedNodes(function (prev) { return __spreadArray(__spreadArray([], prev, true), [node.id], false); });
                    return [2 /*return*/];
            }
        });
    }); };
    var _onCollapse = function (node) {
        setExpandedNodes(function (prev) { return prev.filter(function (nodeId) { return nodeId !== node.id; }); });
    };
    var _h = React.useState({
        width: 0,
        height: 0,
    }), containerSize = _h[0], setContainerSize = _h[1];
    var handleContainerResize = React.useCallback(function (entries) {
        if (entries[0]) {
            var _a = entries[0].target, height = _a.clientHeight, width = _a.clientWidth;
            setContainerSize({ width: width, height: height });
        }
    }, [setContainerSize]);
    var setResizeObserverTarget = useResizeObserver(handleContainerResize);
    React.useImperativeHandle(ref, function () { return ({
        setExpandedNodes: setExpandedNodes,
        setValue: setValue,
    }); });
    if (currentSource !== sourceId) {
        return null;
    }
    return !isLoading ? (React.createElement(Tree, __assign({}, props, { ref: function (instance) {
            if (instance === null || instance === void 0 ? void 0 : instance.rootEl) {
                setResizeObserverTarget(instance.rootEl);
            }
        }, options: options, onSelect: _onChange, onExpand: _onExpand, onCollapse: _onCollapse, expanded: expandedItems, selected: selectedFiles, selectionLimit: maxFileNumber + value.length, visibleHeight: containerSize.height - topPadding, innerElementType: innerElementType, outerElementType: outerElementType, autoExpandParent: false }))) : (React.createElement(StyledFileTreeSpinner, null,
        React.createElement(Spinner, null)));
});
//# sourceMappingURL=TreeSource.js.map