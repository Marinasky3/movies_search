import { Node as TreeNode, NodeId, TreeProps } from '../../Tree/Tree.types';
export interface TreeSourceRef {
    setExpandedNodes: (expanded: NodeId[]) => void;
    setValue: <Node extends TreeNode = TreeNode>(nodes: Node[]) => void;
}
export interface FileTreeProps extends Pick<TreeProps<TreeNode>, 'options' | 'getRoot' | 'getChildren' | 'getLabel' | 'getParentId' | 'getType' | 'isSelectable' | 'isExpandable' | 'onExpand' | 'expanded'> {
    /**
     * Callback function fired with currently selected array of nodes.
     * <CodeBlock>(nodes: DefaultNode[]) => void</CodeBlock>
     */
    onChange?: (nodes: TreeNode[]) => void;
    sourceId: string;
    title: string;
    /**
     * @deprecated String icon variant is deprecated, use the React components directly from the `@procore/core-icons/dist` package
     */
    icon: string | React.ReactNode;
    /**
     * Show/Hide loading indicator of the content
     */
    isLoading?: boolean;
}
