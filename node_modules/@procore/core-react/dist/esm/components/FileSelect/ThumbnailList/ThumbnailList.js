var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { clamp, isNil } from 'ramda';
import React from 'react';
import { ProgressBar } from '../../ProgressBar';
import { StyledDeleteIcon, StyledProgress, StyledThumbnail, StyledThumbnailList, StyledThumbnailListContainer, StyledThumbnailListItem, } from './ThumbnailList.styles';
export var defaultListHeight = 305;
export var defaultRowHeight = 56;
var Row = function (_a) {
    var _b = _a.data, items = _b.items, onCancel = _b.onCancel, isFocused = _b.isFocused, setNavigationPosition = _b.setNavigationPosition, style = _a.style, index = _a.index;
    var item = items[index];
    var src = item.src, name = item.name, progress = item.progress, error = item.error;
    var focused = isFocused(index);
    return (React.createElement("div", { style: style, onMouseEnter: function () { return setNavigationPosition(index); } },
        React.createElement(StyledThumbnailListItem, { error: error, focused: focused },
            React.createElement(StyledThumbnail, { src: src, size: "sm", clickable: false, caption: name, error: error }),
            React.createElement(StyledProgress, null, error ||
                (!isNil(progress) && React.createElement(ProgressBar, { value: progress, animated: true }))),
            onCancel && (React.createElement(StyledDeleteIcon, { icon: "x", variant: "hover-circle", clickable: true, onClick: function () { return onCancel(item); } })))));
};
// See https://github.com/bvaughn/react-window/issues/130
var outerElementType = React.forwardRef(function (props, ref) { return React.createElement("div", __assign({ ref: ref, tabIndex: -1 }, props)); });
var getNewNavigationPosition = function (next, max) {
    return clamp(0, Math.max(0, max - 1), next);
};
export var ThumbnailList = React.forwardRef(function (_a, ref) {
    var items = _a.items, onCancel = _a.onCancel, _b = _a.listHeight, listHeight = _b === void 0 ? defaultListHeight : _b, _c = _a.rowHeight, rowHeight = _c === void 0 ? defaultRowHeight : _c, onKeyDown = _a.onKeyDown, onFocus = _a.onFocus, onBlur = _a.onBlur, props = __rest(_a, ["items", "onCancel", "listHeight", "rowHeight", "onKeyDown", "onFocus", "onBlur"]);
    var rowCount = items.length;
    var height = Math.min(rowCount * defaultRowHeight, listHeight);
    var listRef = React.useRef(null);
    var listInstance = listRef.current;
    var _d = React.useState(false), isListFocused = _d[0], setIsListFocused = _d[1];
    var _e = React.useState(0), navigationPosition = _e[0], setNavigationPosition = _e[1];
    var isFocused = React.useCallback(function (index) { return isListFocused && navigationPosition === index; }, [isListFocused, navigationPosition]);
    var updateNavigationPosition = React.useCallback(function (newPosition) {
        setNavigationPosition(newPosition);
        listInstance === null || listInstance === void 0 ? void 0 : listInstance.scrollToItem(newPosition);
    }, [listInstance]);
    React.useEffect(function () {
        if (isListFocused) {
            listInstance === null || listInstance === void 0 ? void 0 : listInstance.scrollToItem(navigationPosition);
        }
    }, [isListFocused]);
    React.useEffect(function () {
        if (rowCount > 0 && rowCount <= navigationPosition) {
            setNavigationPosition(rowCount - 1);
        }
        if (rowCount <= 0) {
            setIsListFocused(false);
        }
    }, [rowCount]);
    var handleNavigation = function (e) {
        if (!isListFocused)
            return;
        switch (e.key) {
            case 'Enter':
                e.preventDefault();
                var highlightedItem = items[navigationPosition];
                onCancel === null || onCancel === void 0 ? void 0 : onCancel(highlightedItem);
                // Ensure scrolling only after the item was deleted
                setTimeout(function () {
                    updateNavigationPosition(getNewNavigationPosition(navigationPosition, rowCount - 1));
                }, 0);
                if (rowCount - 1 === 0) {
                    setIsListFocused(false);
                }
                break;
            case 'ArrowDown':
            case 'Down':
                e.preventDefault();
                updateNavigationPosition(getNewNavigationPosition(navigationPosition + 1, rowCount));
                break;
            case 'ArrowUp':
            case 'Up':
                e.preventDefault();
                updateNavigationPosition(getNewNavigationPosition(navigationPosition - 1, rowCount));
                break;
        }
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
    };
    if (!rowCount)
        return null;
    return (React.createElement(StyledThumbnailListContainer, __assign({ tabIndex: rowCount !== 0 ? 0 : -1, onFocus: function (e) {
            setIsListFocused(true);
            onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
        }, onBlur: function (e) {
            setIsListFocused(false);
            onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
        }, onKeyDown: handleNavigation }, props, { ref: ref }),
        React.createElement(StyledThumbnailList, { ref: listRef, width: "100%", height: height, itemCount: rowCount, itemSize: rowHeight, itemData: { items: items, onCancel: onCancel, isFocused: isFocused, setNavigationPosition: setNavigationPosition }, style: { minHeight: height }, outerElementType: outerElementType }, Row)));
});
ThumbnailList.displayName = 'ThumbnailList';
//# sourceMappingURL=ThumbnailList.js.map