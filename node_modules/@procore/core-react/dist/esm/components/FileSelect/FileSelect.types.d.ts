import { Method } from 'axios';
import { UploadFile } from '../../effects/useFileUploader';
import { DivAttributes } from '../../utils/types';
import { DropzoneContentProps } from '../Dropzone/Dropzone.types';
import { LocalSourceProps } from './LocalSource';
import { ThumbnailListItem } from './ThumbnailList/ThumbnailList.types';
export declare type FileSelectValue = FileSelectValueEntry[];
export interface FileSelectSource {
    sourceId: SourceId;
    title: string;
    /**
     * @deprecated String icon variant is deprecated, use the React components directly from the `@procore/core-icons/dist` package
     */
    icon: string | React.ReactNode;
    hasError: boolean;
    isUploading: boolean;
    value: SourceValueEntry[];
}
export declare type ValueId = string | number;
export interface FileSelectValueEntry {
    id: ValueId;
    name: string;
    src?: File | string;
    error?: string;
    origin?: unknown;
    response?: unknown;
    sourceId?: string;
}
export declare type SetFileSelectValue = React.Dispatch<React.SetStateAction<FileSelectValue>>;
export interface FileSelectRef {
    setValue: SetFileSelectValue;
    open: (sourceId: SourceId) => void;
    rootEl: React.RefObject<HTMLDivElement | null>;
    modalEl: React.RefObject<HTMLDivElement | null>;
}
export interface FileSelectContextApi {
    register: (sourceId: SourceId, source: Partial<Pick<FileSelectSource, 'title' | 'icon'>>) => () => void;
    currentSource: SourceId;
    isModalOpen: boolean;
    onChange: (sourceId: SourceId, value: SourceValueEntry[]) => void;
    onResetValue: (listener: () => void) => () => void;
    setIsUploading: (sourceId: SourceId, isUploading: boolean) => void;
    setHasError: (sourceId: SourceId, isError: boolean) => void;
    maxFileNumber: number;
}
export interface DropzoneContentRendererProps {
    /**
     * Enable/disable the dropzone
     */
    disabled: DropzoneContentProps['disabled'];
    errorMessage?: DropzoneContentProps['errorMessage'];
    openLocalFiles: () => void;
    openFileExplorer: () => void;
}
export declare type SourceId = string;
export declare type SourceValueEntry = any;
export interface QaTags {
    localSource?: LocalSourceProps['qa'];
    attachButton?: string;
    removeEntry?: string;
}
export interface FileSelectProps extends Omit<DivAttributes, 'onError' | 'onProgress'> {
    /**
     * To be called every time when the files are uploaded directly or
     * attached via file explorer. The input data should be appended to the
     * current value. Files with upload errors are omitted.
     */
    onAdd?: (value: FileSelectValue) => void;
    /**
     * To be called whenever the file is removed by user from the primary token
     * list. Removed item should be deleted from the current value by `id` key
     */
    onRemove?: (valueEntry: FileSelectValueEntry) => void;
    /**
     * To be called whenever the upload progress is changed
     */
    onProgress?: (fileId: ValueId, progress: number) => void;
    /**
     * Optional async function that is invoked when selecting or dropping in a
     * local file. If you want to restrict certain uploads, you can use this
     * callback. Returning true continues the upload, while false will prevent
     * upload.
     */
    beforeLocalFileUpload?: (files: ThumbnailListItem[]) => Promise<boolean>;
    /**
     * To be called whenever upload state is changed
     */
    onUploadStateChange?: (isPendingUpload: boolean) => void;
    /**
     * To be called whenever an upload error occures
     */
    onError?: (fileId: ValueId, error: unknown) => void;
    /**
     * To be called when attached file receives a click
     */
    onFileTokenClick?: (file: FileSelectValueEntry) => void;
    /**
     * An optional content renderer for the dropzone. Accepts
     * `{ open, disabled, errorMessage }` as a single argument,
     * allowing to control the dropzone and display different content depending
     * on dropzone state
     */
    dropzoneContentRenderer?: (dropzoneProps: DropzoneContentRendererProps) => React.ReactNode;
    /**
     * Hide dropzone and render only default "Attach File(s)" button.
     * @default false
     */
    hideDropzone?: boolean;
    /**
     * Hide local files source in file explorer modal
     */
    hideLocalSource?: boolean;
    /**
     * Customize the token label for a given source value. By default,
     * `sourceValueEntry.name` is returned.
     */
    getTokenLabel?: (sourceId: string, sourceValueEntry: unknown) => string;
    localSourceDropzoneContentRenderer?: (dropzoneProps: DropzoneContentProps) => React.ReactNode;
    /**
     * A function returning an upload URL for a given file. An
     * alternative to `uploadFile` which allows manual control of
     * the network request for file upload.
     */
    getEndpoint?: (file: File) => string;
    /**
     * A function returning an upload HTTP method for a given file.
     * Returns `POST` by default.
     */
    getMethod?: (file: File) => Method;
    /**
     * A function returning an upload payload `FormData` key
     * for a given file. Returns `file` by default.
     */
    getPayloadKey?: (file: File) => string;
    /**
     * A function returning an upload payload `FormData`
     * object for a given file. When defined, `getPayloadKey` is
     * ignored.
     */
    getPayload?: (file: File) => FormData;
    /**
     * A function returning an upload request headers. Returns empty
     * object by default.
     */
    getHeaders?: (file: File) => Record<string, string>;
    /**
     * A function for manually controlling the network request for file
     * upload. An alternative to using `getEndpoint` which handles
     * the network request itself.
     */
    uploadFile?: UploadFile;
    /**
     * Maximum number of files that can be selected
     */
    maxFileNumber?: number;
    /**
     * Maximum file size (in bytes)
     */
    maxFileSize?: number;
    /**
     * Minimum file size (in bytes)
     */
    minFileSize?: number;
    /**
     * Set accepted file types. Accepts everything if left undefined
     */
    accept?: string | string[];
    /**
     * @ignore
     */
    qa?: QaTags;
}
