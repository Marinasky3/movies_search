var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Error } from '@procore/core-icons/dist';
import React from 'react';
import { OverflowObserver } from '../../../effects/OverflowObserver';
import { Icon } from '../../Icon';
import { Spinner } from '../../Spinner';
import { Tooltip } from '../../Tooltip';
import { StyledSourceItem, StyledIcon, StyledLabel } from './SourceItem.styles';
function formatCount(count, truncationThreshold) {
    if (count === 0) {
        return '';
    }
    else if (count > truncationThreshold) {
        return "(".concat(truncationThreshold, "+)");
    }
    else {
        return "(".concat(count, ")");
    }
}
export var SourceItem = React.forwardRef(function SourceItem(_a, ref) {
    var _b = _a.icon, icon = _b === void 0 ? '' : _b, _c = _a.count, count = _c === void 0 ? 0 : _c, _d = _a.countTruncationThreshold, countTruncationThreshold = _d === void 0 ? 99 : _d, _e = _a.loading, loading = _e === void 0 ? false : _e, _f = _a.error, error = _f === void 0 ? false : _f, _g = _a.selected, selected = _g === void 0 ? false : _g, _h = _a.disabled, disabled = _h === void 0 ? false : _h, _j = _a.focused, focused = _j === void 0 ? false : _j, children = _a.children, _k = _a.tabIndex, tabIndex = _k === void 0 ? 0 : _k, props = __rest(_a, ["icon", "count", "countTruncationThreshold", "loading", "error", "selected", "disabled", "focused", "children", "tabIndex"]);
    var tabIndexAttribute = !disabled ? { tabIndex: tabIndex } : {};
    var iconElement = (React.createElement(StyledIcon, null, (function () {
        if (error) {
            return React.createElement(Error, null);
        }
        if (loading) {
            return React.createElement(Spinner, { size: "xs" });
        }
        return typeof icon === 'string' ? React.createElement(Icon, { icon: icon }) : icon;
    })()));
    var labelElement = (React.createElement(OverflowObserver, null, function (_a) {
        var isOverflowing = _a.isOverflowing, ref = _a.ref;
        var item = React.createElement(StyledLabel, { ref: ref }, children);
        return isOverflowing ? (React.createElement(Tooltip, { showDelay: 500, trigger: "hover", overlay: React.createElement(Tooltip.Content, null, children) }, item)) : (item);
    }));
    var countElement = (React.createElement("div", null,
        "\u00A0",
        formatCount(count, countTruncationThreshold)));
    return (React.createElement(StyledSourceItem, __assign({ ref: ref }, tabIndexAttribute, props, { error: error, selected: selected, disabled: disabled, focused: focused }),
        iconElement,
        labelElement,
        countElement));
});
//# sourceMappingURL=SourceItem.js.map