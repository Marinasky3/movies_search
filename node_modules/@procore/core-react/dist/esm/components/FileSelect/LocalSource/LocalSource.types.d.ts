import { Method } from 'axios';
import { UploadFile } from '../../../effects/useFileUploader';
import { DropError, DropzoneContentProps, DropzoneHookProps, QaTags } from '../../Dropzone/Dropzone.types';
import { ThumbnailListItem } from '../ThumbnailList/ThumbnailList.types';
export declare type ValueId = string | number;
export interface UploaderProps extends Omit<DropzoneHookProps, 'value'> {
    /**
     * Allow drag 'n' drop (or selection from the file dialog) of multiple files
     */
    multiple: boolean;
    uploadedValue: ThumbnailListItem[];
    /**
     * Array of already selected items
     */
    value: ThumbnailListItem[];
    /**
     * Callback function fired with currently selected array of items.
     * <CodeBlock>(items: ThumbnailListItem[]) => void</CodeBlock>
     */
    onChange: (items: ThumbnailListItem[]) => void;
    /**
     * Callback function fired when a previously selected file is removed.
     * <br />
     * <br />
     * <Code>(item: ThumbnailListItem) => void</Code>
     */
    onCancel?: (item: ThumbnailListItem) => void;
    /**
     * Error message if dropped files is rejected
     * <CodeBlock>
     *  {`{ type: DropErrorType, title: string, message: string }`}
     * </CodeBlock>
     */
    dropError?: DropError;
    onDropError: (err: DropError) => void;
    /**
     * An optional content renderer for the dropzone. Accepts{' '}
     * <Code>{'{ open, disabled, errorMessage }'}</Code> as a single argument,
     * allowing to control the dropzone and display different content depending
     * on dropzone state
     */
    dropzoneContentRenderer?: (props: DropzoneContentProps) => React.ReactNode;
    qa?: QaTags;
}
export interface LocalSourceProps {
    sourceId: string;
    /**
     * Callback function fired when a previously selected file is removed.
     * <br />
     * <br />
     * <Code>(item: ThumbnailListItem) => void</Code>
     */
    onCancel?: UploaderProps['onCancel'];
    /**
     * Set accepted file types. Accepts everything if left undefined
     */
    accept?: UploaderProps['accept'];
    /**
     * <Code>(file: File) => string</Code>
     * <br />
     * <br />A function returning an upload URL for a given file. An
     * alternative to <Code>uploadFile</Code> which allows manual control of
     * the network request for file upload.
     */
    getEndpoint?: (file: File) => string;
    /**
     * <Code>(file: File) => HTTPRequestMethod</Code>
     * <br />
     * <br />A function returning an upload HTTP method for a given file.
     * Returns <Code>POST</Code> by default.
     */
    getMethod?: (file: File) => Method;
    /**
     * <Code>(file: File) => FormData</Code>
     * <br />
     * <br />A function returning an upload payload <Code>FormData</Code>{' '}
     * object for a given file. When defined, <Code>getPayloadKey</Code> is
     * ignored.
     */
    getPayload?: (file: File) => FormData;
    /**
     * Optional async function that is invoked when selecting or dropping in a
     * local file. If you want to restrict certain uploads, you can use this
     * callback. Returning true continues the upload, while false will prevent
     * upload.
     * <Code>{'(files: ThumbnailListItem[]) => Promise<boolean>'}</Code>
     */
    beforeLocalFileUpload: (files: ThumbnailListItem[]) => Promise<boolean>;
    /**
     * <Code>(file: File) => string</Code>
     * <br />
     * <br />A function returning an upload payload <Code>FormData</Code> key
     * for a given file. Returns <Code>file</Code> by default.
     */
    getPayloadKey?: (file: File) => string;
    /**
     * <Code>(file: File) => object</Code>
     * <br />
     * <br />A function returning an upload request headers. Returns empty
     * object by default.
     */
    getHeaders?: (file: File) => Record<string, string>;
    /**
     * <Code>
     *  (file: File,{' '}
     *  {`{
     *    onProgress: (progress: number) => void
     *    onSuccess: (response: unknown) => void
     *    onError: (error: unknown) => void
     *  }`}
     *  ) => string
     * </Code>
     * <br />
     * <br />A function for manually controlling the network request for file
     * upload. An alternative to using <Code>getEndpoint</Code> which handles
     * the network request itself.
     */
    uploadFile?: UploadFile;
    /**
     * Maximum file size (in bytes)
     */
    maxFileSize?: number;
    /**
     * Minimum file size (in bytes)
     */
    minFileSize?: number;
    /**
     * An optional content renderer for the dropzone. Accepts{' '}
     * <Code>{'{ open, disabled, errorMessage }'}</Code> as a single argument,
     * allowing to control the dropzone and display different content depending
     * on dropzone state
     */
    dropzoneContentRenderer?: (props: DropzoneContentProps) => React.ReactNode;
    qa?: UploaderProps['qa'];
}
