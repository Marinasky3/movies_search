var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useI18nContext } from '../../../state/I18n';
import { Button } from '../../Button';
import { FileExplorerSidebar } from '../FileExplorer/FileExplorerSidebar';
import { Modal } from '../../Modal';
import { Tooltip } from '../../Tooltip';
import { Typography } from '../../Typography/Typography';
import { FileExplorerModal } from './FileExplorerModal';
import { StyledModalHeader, StyledModalBody, StyledModalInnerBody, StyledModalContent, StyledSource, StyledAttachButton, } from './FileExplorer.styles';
export var FileExplorer = React.forwardRef(function FileExplorer(_a, ref) {
    var _b = _a.maxFileNumber, maxFileNumber = _b === void 0 ? Infinity : _b, children = _a.children, onSubmit = _a.onSubmit, sources = _a.sources, isOpen = _a.isOpen, currentSource = _a.currentSource, onCurrentSourceChange = _a.onCurrentSourceChange, onModalVisibilityChange = _a.onModalVisibilityChange, unsubmittedValueCount = _a.unsubmittedValueCount, qa = _a.qa, props = __rest(_a, ["maxFileNumber", "children", "onSubmit", "sources", "isOpen", "currentSource", "onCurrentSourceChange", "onModalVisibilityChange", "unsubmittedValueCount", "qa"]);
    var I18n = useI18nContext();
    var hasPendingUploadSources = sources.some(function (_a) {
        var isUploading = _a.isUploading;
        return isUploading;
    });
    var isAttachButtonDisabled = hasPendingUploadSources || unsubmittedValueCount === 0;
    return (React.createElement(FileExplorerModal, __assign({}, props, { ref: ref, open: isOpen, onKeyDown: function (e) {
            if (e.key === 'Esc' || e.key === 'Escape') {
                onModalVisibilityChange(false);
            }
        } }),
        React.createElement(StyledModalHeader, { onClose: function () {
                onModalVisibilityChange(false);
            } }, I18n.t('core.fileExplorer.modalTitle')),
        React.createElement(StyledModalBody, null,
            React.createElement(StyledModalInnerBody, null,
                React.createElement(FileExplorerSidebar, { value: currentSource, onChange: onCurrentSourceChange, sources: sources, isOpen: isOpen }),
                React.createElement(StyledModalContent, { tabIndex: -1 },
                    React.createElement(StyledSource, null, children)))),
        React.createElement(Modal.Footer, null,
            React.createElement(Modal.FooterNotation, null,
                React.createElement(Typography, { color: "gray45", italic: true }, maxFileNumber === Infinity
                    ? I18n.t('core.fileExplorer.filesSelected', {
                        count: unsubmittedValueCount,
                    })
                    : I18n.t('core.fileExplorer.filesSelectedWithLimit', {
                        count: unsubmittedValueCount,
                        maxFileNumber: maxFileNumber,
                    }))),
            React.createElement(Modal.FooterButtons, null,
                React.createElement(Button, { "data-qa": qa === null || qa === void 0 ? void 0 : qa.cancelButton, tabIndex: -1, variant: "tertiary", onClick: function () {
                        onModalVisibilityChange(false);
                    } }, I18n.t('core.fileExplorer.cancelAction')),
                React.createElement(Tooltip, { showKeys: [], trigger: isAttachButtonDisabled ? 'hover' : 'none', overlay: hasPendingUploadSources
                        ? I18n.t('core.fileExplorer.filesPendingUpload')
                        : I18n.t('core.fileExplorer.noSelectedItems') },
                    React.createElement(StyledAttachButton, null,
                        React.createElement(Button, { "data-qa": qa === null || qa === void 0 ? void 0 : qa.attachButton, variant: "primary", disabled: isAttachButtonDisabled, onClick: function () {
                                onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
                            } }, I18n.t('core.fileExplorer.attachAction'))))))));
});
//# sourceMappingURL=FileExplorer.js.map