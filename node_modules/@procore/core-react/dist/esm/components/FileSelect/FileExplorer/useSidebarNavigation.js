var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useListNavigation } from '../../../state/ListNavigation';
export function useSidebarNavigation(_a) {
    var selectedIndex = _a.selectedIndex, props = __rest(_a, ["selectedIndex"]);
    var listNavigation = useListNavigation(__assign({ circular: true }, props));
    var up = function () {
        var shouldJumpOver;
        if (listNavigation.index === 0) {
            shouldJumpOver = selectedIndex === listNavigation.size - 1;
        }
        else {
            shouldJumpOver =
                (listNavigation.index - 1) % listNavigation.size === selectedIndex;
        }
        if (shouldJumpOver) {
            listNavigation.decrementBy(2);
        }
        else {
            listNavigation.decrement();
        }
    };
    var down = function () {
        var shouldJumpOver = (listNavigation.index + 1) % listNavigation.size === selectedIndex;
        if (shouldJumpOver) {
            listNavigation.incrementBy(2);
        }
        else {
            listNavigation.increment();
        }
    };
    return __assign(__assign({}, listNavigation), { up: up, down: down });
}
//# sourceMappingURL=useSidebarNavigation.js.map