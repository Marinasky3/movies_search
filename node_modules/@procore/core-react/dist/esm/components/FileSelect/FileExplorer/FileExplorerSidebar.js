import React from 'react';
import { StyledSidebar, StyledNavigation, StyledSourceItem, } from './FileExplorerSidebar.styles';
import { useSidebarNavigation } from './useSidebarNavigation';
export function FileExplorerSidebar(_a) {
    var selectedSource = _a.value, onChange = _a.onChange, sources = _a.sources, isOpen = _a.isOpen;
    var _b = React.useState(false), isNavFocused = _b[0], setIsNavFocused = _b[1];
    var _c = React.useState(true), isFocusVisible = _c[0], setIsFocusVisible = _c[1];
    var focusedSourceRef = React.useRef(null);
    var selectedSourceIndex = sources.findIndex(function (_a) {
        var sourceId = _a.sourceId;
        return sourceId === selectedSource;
    });
    var sidebarNavigation = useSidebarNavigation({
        initialIndex: selectedSourceIndex,
        size: sources.length,
        selectedIndex: selectedSourceIndex,
    });
    React.useEffect(function () {
        sidebarNavigation.set(selectedSourceIndex);
    }, [selectedSourceIndex]);
    React.useEffect(function () {
        if (focusedSourceRef.current && isOpen) {
            focusedSourceRef.current.focus();
        }
    }, [sidebarNavigation.index, isOpen]);
    React.useEffect(function () {
        sidebarNavigation.setSize(sources.length);
    }, [sources.length]);
    var onKeyDown = function (e) {
        if (!isNavFocused)
            return;
        switch (e.nativeEvent.key) {
            case 'Enter':
                e.preventDefault();
                onChange(sources[sidebarNavigation.index].sourceId);
                break;
            case 'ArrowUp':
            case 'Up':
                e.preventDefault();
                sidebarNavigation.up();
                break;
            case 'ArrowDown':
            case 'Down':
                e.preventDefault();
                sidebarNavigation.down();
                break;
        }
    };
    return (React.createElement(StyledSidebar, null,
        React.createElement(StyledNavigation, null, sources.map(function (source, idx) {
            var isFocused = idx === sidebarNavigation.index;
            return (React.createElement(StyledSourceItem, { key: source.sourceId, loading: source.isUploading, error: source.hasError, icon: source.icon, selected: selectedSource === source.sourceId, focused: isNavFocused && isFocusVisible && isFocused, tabIndex: isFocused ? 0 : -1, ref: isFocused ? focusedSourceRef : null, onMouseDown: function () {
                    // prevent focus blink on the latest focused item
                    setIsFocusVisible(false);
                }, onMouseUp: function () {
                    setIsFocusVisible(true);
                }, count: source.value.length, onFocus: function () {
                    setIsNavFocused(true);
                }, onBlur: function () {
                    setIsNavFocused(false);
                }, onKeyDown: onKeyDown, onClick: function () {
                    sidebarNavigation.set(idx);
                    onChange(source.sourceId);
                } }, source.title));
        }))));
}
//# sourceMappingURL=FileExplorerSidebar.js.map