var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React from 'react';
import { createServer, Response } from 'miragejs';
import { ulid } from 'ulid';
import { ROOT_NODE_ID } from '../Tree/Tree';
import thumbnailImage from '../Thumbnail/mocks/images/thumb_104x104_1.png';
export var MOCK_UPLOAD_FILES_URL = '/mock-upload-files';
export var MOCK_UPLOAD_WITH_ERRORS_FILES_URL = '/mock-upload-files-with-errors';
export var MOCK_BACKEND_LATENCY = 500;
export var useMockBackend = function () {
    React.useEffect(function () {
        var server = createServer({
            routes: function () {
                var _this = this;
                this.post(MOCK_UPLOAD_FILES_URL, function () { return __awaiter(_this, void 0, void 0, function () {
                    var remoteFileId;
                    return __generator(this, function (_a) {
                        remoteFileId = ulid();
                        return [2 /*return*/, { remoteFileId: remoteFileId }];
                    });
                }); });
                this.post(MOCK_UPLOAD_WITH_ERRORS_FILES_URL, function () {
                    return new Response(500, { error: 'Upload Error' });
                });
            },
            timing: MOCK_BACKEND_LATENCY,
        });
        return function () {
            server.shutdown();
        };
    }, []);
};
export var gridItemsSample = [
    { id: '0001', name: '0001.png', src: thumbnailImage },
    { id: '0002', name: '0002.zip' },
    { id: '0003', name: '0003.rtf', src: thumbnailImage },
    { id: '0004', name: '0004.png' },
    { id: '0005', name: '0005.docx', src: thumbnailImage },
    { id: '0006', name: '0006.unss' },
    { id: '0007', name: '0007.zip' },
    { id: '0008', name: '0008.dll' },
    { id: '0009', name: '0009.dll' },
    { id: '00010', name: '0010.png' },
    { id: '00011', name: '0011.png' },
    { id: '00012', name: '0012.png' },
];
export var fileTreeSample = [
    {
        id: 1,
        name: 'Root Folder',
        parentId: ROOT_NODE_ID,
        type: 'branch',
    },
    { id: 2, name: 'Animals', parentId: 1, type: 'branch' },
    { id: 3, name: 'Birds', parentId: 1, type: 'branch' },
    { id: 4, name: 'Cat.jpg', parentId: 2, type: 'leaf' },
    { id: 5, name: 'Dog.jpg', parentId: 2, type: 'leaf' },
    { id: 6, name: 'Woodpecker.jpg', parentId: 3, type: 'leaf' },
    { id: 7, name: 'Owl.jpg', parentId: 3, type: 'leaf' },
    { id: 12, name: 'Falcon.jpg', parentId: 3, type: 'leaf' },
    { id: 13, name: 'Parrot.jpg', parentId: 3, type: 'leaf' },
    { id: 14, name: 'Crane.jpg', parentId: 3, type: 'leaf' },
    { id: 15, name: 'Ostrich.jpg', parentId: 3, type: 'leaf' },
];
//# sourceMappingURL=storyHelpers.js.map