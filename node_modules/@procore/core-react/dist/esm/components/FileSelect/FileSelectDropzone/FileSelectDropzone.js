var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useImperativeHandle, useRef } from 'react';
import { useDropzone } from '../../Dropzone';
import { Flex } from '../../../layouts/Flex';
import { useI18nContext } from '../../../state/I18n';
import { dropErrors } from '../../Dropzone/Dropzone.types';
import { Tooltip } from '../../Tooltip';
import { dropzoneContainerAttr, StyledDropzone, StyledDropzoneMessage, StyledUploadButtonWrapper, } from './FileSelectDropzone.styles';
import { Button } from '../../Button';
var DefaultContent = React.forwardRef(function DefaultContent(_a, ref) {
    var disabled = _a.disabled, errorMessage = _a.errorMessage, _b = _a.hideDropzone, hideDropzone = _b === void 0 ? false : _b, multiple = _a.multiple, onAttachFromProject = _a.onAttachFromProject, tooltip = _a.tooltip, qa = _a.qa;
    var I18n = useI18nContext();
    var attachFilesButton = (React.createElement(Tooltip, { trigger: hideDropzone && tooltip ? 'hover' : 'none', placement: "right", overlay: tooltip },
        React.createElement(StyledUploadButtonWrapper, null,
            React.createElement(Button, { ref: ref, variant: "secondary", onClick: onAttachFromProject, disabled: disabled, "data-qa": qa === null || qa === void 0 ? void 0 : qa.attachFiles }, I18n.t('core.fileAttacher.attachFiles', {
                count: multiple ? Infinity : 1,
            })))));
    return hideDropzone ? (attachFilesButton) : (React.createElement(Flex, { direction: "column", justifyContent: "center", alignItems: "center" },
        attachFilesButton,
        React.createElement(StyledDropzoneMessage, { error: Boolean(errorMessage) }, errorMessage || I18n.t('core.dropzone.dragAndDrop'))));
});
export var FileSelectDropzone = React.forwardRef(function FileSelectDropzone(_a, ref) {
    var _b;
    var accept = _a.accept, maxFileNumber = _a.maxFileNumber, maxFileSize = _a.maxFileSize, minFileSize = _a.minFileSize, disabled = _a.disabled, value = _a.value, onDrop = _a.onDrop, multiple = _a.multiple, noDrag = _a.noDrag, onAttachFromProject = _a.onAttachFromProject, contentRenderer = _a.contentRenderer, _c = _a.hideDropzone, hideDropzone = _c === void 0 ? false : _c, tooltip = _a.tooltip, qa = _a.qa;
    var dropzoneState = useDropzone({
        accept: accept,
        maxFileNumber: maxFileNumber,
        maxFileSize: maxFileSize,
        minFileSize: minFileSize,
        disabled: disabled,
        value: value,
        onDrop: onDrop,
        multiple: multiple,
        noDrag: noDrag,
    });
    var attachButtonRef = useRef(null);
    useImperativeHandle(ref, function () { return ({
        clearErrors: function () {
            dropzoneState.dispatchDropError(dropErrors.reset);
        },
        attachButton: attachButtonRef.current,
    }); });
    var defaultContent = function (props) { return (React.createElement(DefaultContent, __assign({}, props, { ref: attachButtonRef, tooltip: tooltip, hideDropzone: hideDropzone, multiple: multiple, onAttachFromProject: onAttachFromProject, qa: { attachFiles: qa === null || qa === void 0 ? void 0 : qa.attachFiles } }))); };
    var dropzoneContent = contentRenderer || defaultContent;
    return (React.createElement(StyledDropzone, __assign({}, dropzoneState, { tooltip: hideDropzone ? null : tooltip, contentRenderer: dropzoneContent, hidden: hideDropzone, rootProps: (_b = {}, _b[dropzoneContainerAttr] = '', _b) }, (hideDropzone ? { isIconVisible: false } : {}))));
});
FileSelectDropzone.displayName = 'FileSelectDropzone';
export default FileSelectDropzone;
//# sourceMappingURL=FileSelectDropzone.js.map