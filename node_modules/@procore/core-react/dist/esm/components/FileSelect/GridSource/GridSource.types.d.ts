import React from 'react';
import { ThumbnailGridGroup } from '../../ThumbnailGrid/ThumbnailGrid.types';
interface QaTags {
    grid?: string;
}
export declare type GridItem = object;
export declare type GetId = (item: GridItem) => string | number;
export declare type GetThumnbnailName = (item: GridItem) => string;
export declare type GetThumbnailSource = (item: GridItem) => string;
export declare type GetThumbnailLabel = (item: GridItem) => string;
export declare type GetGroupId = (item: GridItem) => string | number;
export interface GridProps {
    sourceId: string;
    /**
     * @deprecated String icon variant is deprecated, use the React components directly from the `@procore/core-icons/dist` package
     */
    icon: string | React.ReactNode;
    title: string;
    /**
     * Allows controlling the search input value. Can be used with
     * <Code>onSearch</Code> to customize the default string-based search
     */
    searchQuery?: string;
    /**
     * Allows customizing the default string-based search by passing a
     * different set of <Code>items</Code> every time
     * <Code>onSearch</Code> is called with query string as a single
     * parameter
     */
    onSearch?: (q: string) => void;
    /**
     * React nodes to be displayed next to the search bar
     */
    children?: React.ReactNode;
    /**
     * An array of arbitrarily-shaped objects representing grid items.{' '}
     * <Code>getId</Code> <Code>getName</Code> and <Code>getThumbnail</Code>{' '}
     * should be used to bind the target shape to a view.
     */
    items: GridItem[];
    /**
     * <Code>{`{ id: string | number, title: string }[]`}</Code> object
     * representing file groups
     */
    groups?: ThumbnailGridGroup[];
    /**
     * <Code>{`{ text: string, image: string }`}</Code> props for{' '}
     * <Code>EmptyState</Code> component shown when there are no items in
     * grid
     */
    emptyState?: {
        text?: string;
        image?: string;
    };
    /**
     * Show/Hide loading indicator at the list bottom
     */
    isLoadingMore?: boolean;
    /**
     * Show/Hide loading indicator of the content
     */
    isLoading?: boolean;
    /**
     * Optional <Code>function</Code> that automatically executes when
     * scrolling reaches the last item.
     */
    onScrollBottom?: () => Promise<any>;
    /**
     * A function called returning ID of a given grid item that is used to
     * identify the item. Returns <Code>item.id</Code> by default.
     */
    getId?: GetId;
    /**
     * A function called returning thumbnail URL of a given grid item that is
     * used to display the item's thumbnail image. Returns{' '}
     * <Code>item.src</Code>
     * by default.
     */
    getThumbnailSource?: GetThumbnailSource;
    /**
     * A function called returning name of a given grid item that is used to
     * display the item's thumbnail name. Returns <Code>item.name</Code> by
     * default.
     */
    getThumbnailName?: GetThumnbnailName;
    /**
     * A function called returning label of a given grid item that is used to
     * display the item's thumbnail label. Returns <Code>item.label</Code>
     * by default.
     */
    getThumbnailLabel?: GetThumbnailLabel;
    /**
     * A function called returning group ID of a given grid item that is used
     * to sort items by group. Returns <Code>item.groupId</Code>
     * by default.
     */
    getGroupId?: GetGroupId;
    qa?: QaTags;
}
export interface SearchBarProps {
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    query: string;
}
export {};
