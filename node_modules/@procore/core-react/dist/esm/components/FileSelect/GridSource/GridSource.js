var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { isFunction } from 'formik';
import { prop } from 'ramda';
import React from 'react';
import { useI18nContext } from '../../../state/I18n';
import { EmptyState } from '../../EmptyState';
import { useFileSelectContext } from '../../FileSelect';
import { Search } from '../../Search';
import { Spinner } from '../../Spinner';
import { ThumbnailGrid } from '../../ThumbnailGrid';
import { contentHeight, contentWidth, StyledEmptyState, StyledEmptyStateWrapper, StyledGrid, StyledSearchWrapper, StyledSpinnerWrapper, StyledToolbar, } from './GridSource.styles';
var defaultGetId = prop('id');
var defaultGetThumbnailName = prop('name');
var defaultGetThumbnailSource = prop('src');
var defaultGetThumbnailLabel = prop('label');
var defaultGetGroupId = prop('groupId');
export var GridSource = React.forwardRef(function GridSource(_a, ref) {
    var _this = this;
    var _b;
    var sourceId = _a.sourceId, title = _a.title, icon = _a.icon, items = _a.items, groups = _a.groups, onSearch = _a.onSearch, _c = _a.emptyState, emptyState = _c === void 0 ? {} : _c, controlledSearchQuery = _a.searchQuery, children = _a.children, _d = _a.isLoadingMore, isLoadingMore = _d === void 0 ? false : _d, _e = _a.isLoading, isLoading = _e === void 0 ? false : _e, onScrollBottom = _a.onScrollBottom, _f = _a.getId, getId = _f === void 0 ? defaultGetId : _f, _g = _a.getThumbnailName, getThumbnailName = _g === void 0 ? defaultGetThumbnailName : _g, _h = _a.getThumbnailSource, getThumbnailSource = _h === void 0 ? defaultGetThumbnailSource : _h, _j = _a.getThumbnailLabel, getThumbnailLabel = _j === void 0 ? defaultGetThumbnailLabel : _j, _k = _a.getGroupId, getGroupId = _k === void 0 ? defaultGetGroupId : _k, qa = _a.qa, props = __rest(_a, ["sourceId", "title", "icon", "items", "groups", "onSearch", "emptyState", "searchQuery", "children", "isLoadingMore", "isLoading", "onScrollBottom", "getId", "getThumbnailName", "getThumbnailSource", "getThumbnailLabel", "getGroupId", "qa"]);
    var I18n = useI18nContext();
    var _l = React.useState(''), internalSearchQuery = _l[0], setInternalSearchQuery = _l[1];
    var _m = React.useState([]), value = _m[0], setValue = _m[1];
    var _o = useFileSelectContext(), maxFileNumber = _o.maxFileNumber, currentSource = _o.currentSource, register = _o.register, onChange = _o.onChange, onResetValue = _o.onResetValue;
    var isUsingControlledSearch = isFunction(onSearch) && typeof controlledSearchQuery !== 'undefined';
    React.useEffect(function () {
        var unregister = register(sourceId, {
            title: title,
            icon: icon,
        });
        var unsubscribe = onResetValue(function () {
            setInternalSearchQuery('');
            setValue([]);
        });
        return function () {
            unsubscribe();
            unregister();
        };
    }, []);
    var ensureNameAndId = function (item) {
        var id = getId(item);
        var name = getThumbnailName(item);
        return __assign(__assign({}, item), { name: name, id: id });
    };
    React.useEffect(function () {
        onChange(sourceId, value.map(ensureNameAndId));
    }, [value]);
    var gridRef = React.useRef(null);
    var _p = React.useState(false), isGridScrolled = _p[0], setIsGridScrolled = _p[1];
    var getGridItem = React.useCallback(function (item) { return ({
        id: getId(item),
        name: getThumbnailName(item),
        src: getThumbnailSource(item),
        label: getThumbnailLabel(item),
        groupId: getGroupId(item),
    }); }, [getId, getThumbnailName, getThumbnailLabel, getThumbnailSource, getGroupId]);
    var gridItems = React.useMemo(function () { return items.map(getGridItem); }, [items, getGridItem]);
    var selectedGridItems = value.map(getGridItem);
    var allVisibleItems = React.useMemo(function () {
        return internalSearchQuery && !isFunction(onSearch)
            ? gridItems.filter(function (item) {
                var name = getThumbnailName === null || getThumbnailName === void 0 ? void 0 : getThumbnailName(item);
                if (!name) {
                    return true;
                }
                var text = name.toLowerCase();
                var q = internalSearchQuery.toLowerCase();
                return text.includes(q);
            })
            : gridItems;
    }, [gridItems, internalSearchQuery, onSearch, getThumbnailName]);
    var fetchData = React.useCallback(function () { return __awaiter(_this, void 0, void 0, function () {
        var err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isFunction(onScrollBottom)) {
                        return [2 /*return*/];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, onScrollBottom()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    console.warn('Warning!: "onScrollBottom" request was ended with an error');
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); }, [onScrollBottom]);
    if (currentSource !== sourceId) {
        return null;
    }
    var hasChildren = React.Children.toArray(children).length > 0;
    var onSelect = function (selectedItem) {
        var origin = items.find(function (item) { return getId(item) === selectedItem.id; });
        setValue(function (prev) { return __spreadArray(__spreadArray([], prev, true), [origin], false); });
    };
    var onDeselect = function (removedItem) {
        setValue(function (prev) { return prev.filter(function (item) { return getId(item) !== removedItem.id; }); });
    };
    var searchQuery = isUsingControlledSearch
        ? controlledSearchQuery
        : internalSearchQuery;
    var toolbar = (React.createElement(StyledToolbar, { alignRight: !hasChildren, hasScrollShadow: isGridScrolled },
        children,
        React.createElement(SearchBar, { query: searchQuery, onChange: function (e) {
                var query = e.target.value;
                onSearch === null || onSearch === void 0 ? void 0 : onSearch(query);
                if (!isUsingControlledSearch) {
                    setInternalSearchQuery(query);
                }
            } })));
    var emptyStateContent = (React.createElement(StyledEmptyStateWrapper, null,
        React.createElement(StyledEmptyState, { compact: true }, searchQuery ? (React.createElement(React.Fragment, null,
            React.createElement(EmptyState.NoResults, null),
            React.createElement(EmptyState.Title, null, I18n.t('core.fileExplorer.emptySearchResults')))) : (React.createElement(React.Fragment, null,
            emptyState.image ? (React.createElement(EmptyState.Image, { src: emptyState.image })) : (React.createElement(EmptyState.NoItemsWithoutCreatePermissions, null)),
            React.createElement(EmptyState.Title, null, (_b = emptyState.text) !== null && _b !== void 0 ? _b : I18n.t('core.fileExplorer.noItems')))))));
    var gridContent = (React.createElement(ThumbnailGrid, { qa: { grid: qa === null || qa === void 0 ? void 0 : qa.grid }, selected: selectedGridItems, items: allVisibleItems, onSelect: onSelect, onDeselect: onDeselect, disableSelection: {
            value: maxFileNumber < 1,
            tooltip: I18n.t('core.fileExplorer.maxNumberOfFilesSelected'),
        }, gridWidth: contentWidth, gridHeight: contentHeight, title: "".concat(title, " (").concat(allVisibleItems.length, ")"), groups: groups, ref: gridRef, onScroll: function (e) {
            setIsGridScrolled(e.target.scrollTop !== 0);
        }, isFetching: isLoadingMore, loadMoreItems: fetchData }));
    var spinner = (React.createElement(StyledSpinnerWrapper, null,
        React.createElement(Spinner, null)));
    var content = isLoading
        ? spinner
        : allVisibleItems.length
            ? gridContent
            : emptyStateContent;
    return (React.createElement(StyledGrid, __assign({ ref: ref, isEmpty: !allVisibleItems.length }, props),
        toolbar,
        content));
});
function SearchBar(_a) {
    var onChange = _a.onChange, query = _a.query, props = __rest(_a, ["onChange", "query"]);
    var I18n = useI18nContext();
    return (React.createElement(StyledSearchWrapper, null,
        React.createElement(Search, __assign({ placeholder: I18n.t('core.fileExplorer.searchPlaceholder'), onChange: onChange, value: query }, props))));
}
//# sourceMappingURL=GridSource.js.map