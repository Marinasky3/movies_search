var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { isFunction } from 'formik';
import { useListNavigation } from '../../../state/ListNavigation';
import { StyledFileToken, StyledTokenList } from './FileTokenList.styles';
function noop() { }
function getProgress(_a) {
    var progress = _a.progress;
    return progress !== null && progress !== void 0 ? progress : 100;
}
function isUndefined(value) {
    return typeof value === 'undefined';
}
export var FileTokenList = React.forwardRef(function FileTokenList(_a, ref) {
    var tokens = _a.tokens, onClick = _a.onClick, _b = _a.onClose, onClose = _b === void 0 ? noop : _b, qa = _a.qa, onKeyDown = _a.onKeyDown, props = __rest(_a, ["tokens", "onClick", "onClose", "qa", "onKeyDown"]);
    var focusedTokenRef = React.useRef(null);
    var _c = React.useState(false), isListFocused = _c[0], setIsListFocused = _c[1];
    var navigation = useListNavigation({
        circular: false,
        initialIndex: 0,
        size: tokens.length,
    });
    React.useEffect(function () {
        navigation.setSize(tokens.length);
        if (tokens.length === 0)
            setIsListFocused(false);
    }, [navigation, tokens.length]);
    React.useEffect(function () {
        if (focusedTokenRef.current && isListFocused) {
            focusedTokenRef.current.focus();
        }
    }, [isListFocused, navigation]);
    var onKeyDownHandler = React.useCallback(function (e) {
        if (!isListFocused)
            return;
        var token = tokens[navigation.index];
        switch (e.key) {
            case 'Backspace':
            case 'Delete':
                e.preventDefault();
                if (!e.repeat) {
                    onClose(token);
                    if (tokens.length >= 1) {
                        navigation.set(Math.max(0, navigation.index - 1));
                    }
                }
                break;
            case 'Space Bar':
            case ' ':
                e.preventDefault();
                var error = token.error;
                if (isUndefined(error) && getProgress(token) === 100) {
                    onClick === null || onClick === void 0 ? void 0 : onClick(token);
                }
                break;
            case 'ArrowUp':
            case 'Up':
            case 'ArrowLeft':
            case 'Left':
                e.preventDefault();
                navigation.decrement();
                break;
            case 'ArrowDown':
            case 'Down':
            case 'ArrowRight':
            case 'Right':
                e.preventDefault();
                navigation.increment();
                break;
            default:
        }
        onKeyDown && onKeyDown(e);
    }, [isListFocused, navigation, onClick, onClose, onKeyDown, tokens]);
    return (React.createElement(StyledTokenList, __assign({}, props, { ref: ref, onFocus: function () { return setIsListFocused(true); }, onBlur: function () { return setIsListFocused(false); }, onKeyDown: onKeyDownHandler }), tokens.map(function (token, index) {
        var _a;
        var isFocused = navigation.index === index;
        return (React.createElement(StyledFileToken, { "data-qa": (_a = qa === null || qa === void 0 ? void 0 : qa.fileToken) === null || _a === void 0 ? void 0 : _a.call(qa, token.id), qa: qa, key: token.id, ref: isFocused ? focusedTokenRef : null, tabIndex: isFocused ? 0 : -1, progressValue: getProgress(token), errorMessage: token.error, fileName: token.name, onFocus: function () { return navigation.set(index); }, onLabelClick: isFunction(onClick) ? function () { return onClick(token); } : onClick, onClose: function () { return onClose(token); } }));
    })));
});
FileTokenList.displayName = 'FileTokenList';
export default FileTokenList;
//# sourceMappingURL=FileTokenList.js.map