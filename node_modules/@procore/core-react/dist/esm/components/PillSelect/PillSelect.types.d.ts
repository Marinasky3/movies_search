import { PillColor } from '../Pill/Pill.types';
import { OptionProps, SelectProps } from '../Select';
declare type Id = string | number;
export interface PillOption {
    color: PillColor;
    groupId?: Id;
    id: Id;
    label: string;
    suggested?: OptionProps['suggested'];
}
export interface PillOptionProps extends OptionProps {
    color: PillOption['color'];
    label: PillOption['label'];
}
export interface PillOptGroup {
    id: Id;
    label: string;
}
export interface PillSelectProps<Option = PillOption, OptionGroup = PillOptGroup> extends Omit<SelectProps, 'label'> {
    /**
     * A function returning the display color of an option's `Pill`
     * `(option: unknown) => PillColor`
     * @defaultValue `(option) => (option as PillOption).color`
     */
    getColor?: (option: Option) => PillOption['color'];
    /**
     * A function returning group ID for a given option to define a relation to `optgroups`
     * `(option: unknown) => string | number`
     * @defaultValue `(option) => (option as PillOption).groupId`
     */
    getGroup?: (option: Option) => PillOption['groupId'];
    /**
     * A function returning ID of a given option
     * `(option: unknown) => string | number`
     * @defaultValue `(option) => (option as PillOption).id`
     */
    getId?: (option: Option) => PillOption['id'];
    /**
     * A function returning label of an option
     * `(option: unknown) => string`
     * @defaultValue `(option) => (option as PillOption).label`
     */
    getLabel?: (option: Option) => PillOption['label'];
    /**
     * A function returning `boolean` value to suggest this option if nothing is selected.
     * `(option: unknown) => boolean`
     * @defaultValue `(option) => (option as PillOption).suggested`
     */
    getSuggested?: (option: Option) => PillOption['suggested'];
    /**
     * A function returning the ID of a group
     * `(group: unknown) => string | number`
     * @defaultValue `(group) => (group as PillOptgroup).id`
     */
    groupGetId?: (group: OptionGroup) => PillOptGroup['id'];
    /**
     * A function returning label of a group
     * `(group: unknown) => string`
     * @defaultValue `(group) => (group as PillOptgroup).label`
     */
    groupGetLabel?: (group: OptionGroup) => PillOptGroup['label'];
    /**
     * Array of available options
     */
    options?: Option[];
    /**
     * Array of available option groups
     */
    optgroups?: OptionGroup[];
    /**
     * Currently selected value
     */
    value: Option;
}
export {};
