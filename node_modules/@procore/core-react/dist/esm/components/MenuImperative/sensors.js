import { scrollIntoView } from '../../utils/scrollIntoView';
function noop() { }
var MOUSE_ENTER = 'mouseenter';
var MOUSE_LEAVE = 'mouseleave';
var isItem = function (element) { return element === null || element === void 0 ? void 0 : element.hasAttribute('data-value'); };
function isGroup(el) {
    return JSON.parse(el.dataset.group || 'false');
}
function getFirstItem(menu) {
    var firstItem = menu === null || menu === void 0 ? void 0 : menu.querySelector('[data-value]:first-child');
    if (firstItem && isGroup(firstItem)) {
        return getNextItem(firstItem);
    }
    return firstItem;
}
function getPrevItem(item) {
    var _a, _b, _c;
    if (item.previousElementSibling) {
        return item.previousElementSibling;
    }
    if (((_a = item === null || item === void 0 ? void 0 : item.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-droppable')) === 'true') {
        var prevDroppableItems = (_c = (_b = item === null || item === void 0 ? void 0 : item.parentElement) === null || _b === void 0 ? void 0 : _b.previousElementSibling) === null || _c === void 0 ? void 0 : _c.querySelectorAll('[data-group="false"]');
        return (prevDroppableItems === null || prevDroppableItems === void 0 ? void 0 : prevDroppableItems.length)
            ? prevDroppableItems[prevDroppableItems.length - 1]
            : null;
    }
    return null;
}
function getNextItem(item) {
    var _a, _b, _c;
    if (item.nextElementSibling) {
        return item.nextElementSibling;
    }
    if (((_a = item === null || item === void 0 ? void 0 : item.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-droppable')) === 'true') {
        return (_c = (_b = item === null || item === void 0 ? void 0 : item.parentElement) === null || _b === void 0 ? void 0 : _b.nextElementSibling) === null || _c === void 0 ? void 0 : _c.querySelector('[data-group="false"]');
    }
    return null;
}
function getLastItem(menu) {
    var items = menu === null || menu === void 0 ? void 0 : menu.querySelectorAll('[data-value]');
    var lastItem = items === null || items === void 0 ? void 0 : items[items.length - 1];
    if (lastItem && isGroup(lastItem)) {
        return getPrevItem(lastItem);
    }
    return lastItem;
}
function updateHighlightedAttribute(item, highlight) {
    item === null || item === void 0 ? void 0 : item.setAttribute('data-highlighted', highlight ? 'true' : 'false');
    item === null || item === void 0 ? void 0 : item.dispatchEvent(new MouseEvent(highlight ? MOUSE_ENTER : MOUSE_LEAVE));
}
export function createSensors(ref, circular) {
    var highlightedItem = null;
    var dragAndDropApi = null;
    var currentDrag = null;
    var onSelect = noop;
    function select(event) {
        if (ref.current && highlightedItem) {
            var disabled = JSON.parse((highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.dataset.disabled) || 'false');
            if (disabled)
                return;
            var item = JSON.parse((highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.dataset.value) || 'null');
            var selected = JSON.parse((highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.dataset.selected) || 'false');
            onSelect &&
                onSelect({
                    event: event,
                    item: item,
                    group: false,
                    action: selected ? 'unselected' : 'selected',
                });
        }
    }
    function highlightItem(item, shouldScroll) {
        if (shouldScroll === void 0) { shouldScroll = true; }
        if (item) {
            updateHighlightedAttribute(highlightedItem, false);
            // TODO add localized screenreader instructions for the item
            updateHighlightedAttribute(item, true);
            highlightedItem = item;
            if (shouldScroll) {
                scrollIntoView(-1, item);
            }
        }
    }
    function getPrevHighlightableItem(currentItem) {
        var prev = getPrevItem(currentItem);
        if (prev) {
            if (isItem(prev)) {
                if (isGroup(prev)) {
                    return getPrevHighlightableItem(prev);
                }
                else {
                    return prev;
                }
            }
        }
        else if (circular) {
            return getLastItem(ref.current);
        }
        return prev;
    }
    function getNextHighlightableItem(currentItem) {
        var next = getNextItem(currentItem);
        if (next) {
            if (isItem(next)) {
                if (isGroup(next)) {
                    return getNextHighlightableItem(next);
                }
                return next;
            }
        }
        else if (circular) {
            return getFirstItem(ref.current);
        }
    }
    function highlightFirstItem(shouldScroll) {
        if (shouldScroll === void 0) { shouldScroll = true; }
        highlightItem(getFirstItem(ref.current), shouldScroll);
    }
    function highlightLastItem(shouldScroll) {
        if (shouldScroll === void 0) { shouldScroll = true; }
        highlightItem(getLastItem(ref.current), shouldScroll);
    }
    function highlightPrevItem() {
        if (highlightedItem) {
            highlightItem(getPrevHighlightableItem(highlightedItem));
        }
        else {
            highlightLastItem();
        }
    }
    function highlightNextItem() {
        if (highlightedItem) {
            highlightItem(getNextHighlightableItem(highlightedItem));
        }
        else {
            highlightFirstItem();
        }
    }
    return {
        handleKeyDown: function (event) {
            if (ref.current) {
                if (event.key === 'ArrowUp' || event.key === 'Up') {
                    event.preventDefault();
                    (currentDrag === null || currentDrag === void 0 ? void 0 : currentDrag.isActive()) ? currentDrag.moveUp() : highlightPrevItem();
                }
                else if (event.key === 'ArrowDown' || event.key === 'Down') {
                    event.preventDefault();
                    (currentDrag === null || currentDrag === void 0 ? void 0 : currentDrag.isActive()) ? currentDrag.moveDown() : highlightNextItem();
                }
                else if (event.key === 'Enter') {
                    event.preventDefault();
                    if (event.ctrlKey || event.metaKey) {
                        var draggableId = highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.getAttribute('data-rbd-draggable-id');
                        if (draggableId) {
                            var preDrag = dragAndDropApi === null || dragAndDropApi === void 0 ? void 0 : dragAndDropApi.tryGetLock(draggableId);
                            if (preDrag) {
                                currentDrag = preDrag.snapLift();
                            }
                        }
                    }
                    else if (currentDrag === null || currentDrag === void 0 ? void 0 : currentDrag.isActive()) {
                        currentDrag.drop();
                    }
                    else {
                        select(event);
                    }
                }
                else if (event.key === 'Escape' && (currentDrag === null || currentDrag === void 0 ? void 0 : currentDrag.isActive())) {
                    currentDrag.cancel();
                }
            }
        },
        handleItemHover: function (el) {
            highlightItem(el, false);
        },
        useKeyboardSensor: function (api) {
            dragAndDropApi = api;
        },
        updateSelectCallback: function (callback) {
            onSelect = callback;
        },
        highlight: highlightItem,
        highlighted: function () {
            return JSON.parse((highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.dataset.value) || 'null');
        },
        highlightFirst: highlightFirstItem,
        highlightLast: highlightLastItem,
        rehighlightCurrent: function () {
            var _a;
            // Rehighlights an item that may have lost its styling due to the re-render of the list items
            var draggableId = highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.getAttribute('data-rbd-draggable-id');
            if (draggableId) {
                var newItem = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.querySelector("[data-rbd-draggable-id=\"".concat(draggableId.replace(/"/g, '\\"'), "\"]"));
                highlightItem(newItem);
            }
        },
        highlightSelected: function (shouldScroll) {
            var _a;
            if (shouldScroll === void 0) { shouldScroll = true; }
            var selectedItem = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.querySelector('[data-selected="true"]');
            highlightItem(selectedItem, shouldScroll);
        },
        highlightSuggested: function (shouldScroll) {
            var _a;
            if (shouldScroll === void 0) { shouldScroll = true; }
            var suggestedItem = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.querySelector('[data-suggested="true"]');
            highlightItem(suggestedItem, shouldScroll);
        },
        prev: highlightPrevItem,
        next: highlightNextItem,
        select: select,
    };
}
//# sourceMappingURL=sensors.js.map