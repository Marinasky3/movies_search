import * as React from 'react';
import { BoxProps } from '../../layouts/Box';
import { Props } from '../../utils/types';
import { SearchProps } from '../Search/Search.types';
export declare type Ref<T> = ((instance: T | null) => void) | React.MutableRefObject<T | null> | null;
declare type Div = React.ComponentPropsWithoutRef<'div'>;
export interface Selection {
    event: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement>;
    group: boolean;
    item: any;
    action: 'selected' | 'unselected';
}
export interface Reorder {
    draggableId: string;
    source: {
        index: number;
        droppableId: string;
    };
    destination: {
        index: number;
        droppableId: string;
    };
}
export interface MenuProps extends Omit<Div, 'onSelect' | 'onDragEnd'> {
    circular?: boolean;
    multiple?: boolean;
    onDragEnd?: (result: Reorder) => void;
    onScrollBottom?: (e: React.UIEvent<HTMLDivElement, UIEvent>) => void;
    onSelect?: (selection: Selection) => any;
}
export interface MenuRef {
    el: HTMLDivElement | null;
    highlight: (item: HTMLElement, shouldScroll?: boolean) => void;
    highlightFirst: (shouldScroll?: boolean) => void;
    highlightLast: (shouldScroll?: boolean) => void;
    highlightSelected: (shouldScroll?: boolean) => void;
    highlightSuggested: (shouldScroll?: boolean) => void;
    highlighted: () => any;
    next: (circular?: boolean) => void;
    prev: (circular?: boolean) => void;
    select: (event: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement>) => void;
}
export interface ItemProps {
    item: any;
    selected?: boolean;
    suggested?: boolean;
    disabled?: boolean;
}
export interface ItemWithDraggingProps extends ItemProps {
    droppableIn: string | string[];
    draggableId: string;
    draggableIndex: number;
}
export interface GroupProps {
    clickable?: boolean;
    item?: any;
}
export interface OptionsProps {
    children?: React.ReactNode;
    className?: string;
}
export interface MenuSearchProps extends SearchProps, Props {
    i18nScope?: string;
}
export interface HeaderProps extends Props {
    tabIndex?: number;
}
export interface DroppableProps {
    id: string;
    children: React.ReactNode;
}
export interface FooterProps extends Omit<BoxProps, 'as'> {
}
export interface MenuContext {
    currentlyDroppableIn: string[];
    onHoverItem: (el?: HTMLDivElement) => void;
    onScrollBottom: (e: React.UIEvent<HTMLDivElement, UIEvent>) => void;
    onSelect: (selection: Selection) => void;
}
export {};
