var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { useClickOutside } from '../../effects/ClickOutside';
import { consumeDelayedToggle, DelayedToggleContext, DelayedToggleProvider, } from '../../effects/DelayedToggle';
import { Trigger } from '../../state/Trigger';
import { useVisibility } from '../../state/Visibility';
import { Overlay } from '../Overlay';
var ClickOutside = function (_a) {
    var onClickOutside = _a.onClickOutside, refs = _a.refs;
    useClickOutside({
        onClickOutside: onClickOutside,
        refs: refs,
    });
    return React.createElement(React.Fragment, null);
};
export var OverlayTrigger = React.forwardRef(function OverlayTrigger(_a, ref) {
    var _b = _a.afterHide, afterHide = _b === void 0 ? function () { } : _b, _c = _a.afterShow, afterShow = _c === void 0 ? function () { } : _c, _d = _a.beforeHide, beforeHide = _d === void 0 ? function () { return true; } : _d, _e = _a.beforeShow, beforeShow = _e === void 0 ? function () { return true; } : _e, _f = _a.canFlip, canFlip = _f === void 0 ? true : _f, children = _a.children, _g = _a.clickOutsideIgnoreRefs, clickOutsideIgnoreRefs = _g === void 0 ? [] : _g, _h = _a.hideDelay, hideDelay = _h === void 0 ? 100 : _h, _j = _a.hideKeys, hideKeys = _j === void 0 ? {
        overlay: ['Escape', 'Esc', 'Tab'],
        target: ['Escape', 'Esc'],
    } : _j, _k = _a.initialIsVisible, initialIsVisible = _k === void 0 ? false : _k, overlay = _a.overlay, _l = _a.padding, padding = _l === void 0 ? 2 : _l, _m = _a.placement, placement = _m === void 0 ? 'top' : _m, _o = _a.restoreFocusOnHide, restoreFocusOnHide = _o === void 0 ? true : _o, // TODO: change default to be false, but that is a breaking change
    _p = _a.showDelay, // TODO: change default to be false, but that is a breaking change
    showDelay = _p === void 0 ? 0 : _p, _q = _a.showKeys, showKeys = _q === void 0 ? ['ArrowDown', 'Down'] : _q, _r = _a.shrinkOverlay, shrinkOverlay = _r === void 0 ? false : _r, _s = _a.trigger, trigger = _s === void 0 ? 'click' : _s;
    var overlayRef = React.useRef(null);
    var innerRef = React.useRef(null);
    var targetRef = ref || innerRef;
    var clickedOutsideRef = React.useRef(true);
    var visibility = useVisibility({
        afterHide: afterHide,
        afterShow: afterShow,
        initialIsVisible: initialIsVisible,
    });
    var triggers = React.useMemo(function () { return (Array.isArray(trigger) ? trigger : [trigger]); }, [trigger]);
    React.useEffect(function () {
        if (triggers.indexOf('none') >= 0 && visibility.isVisible) {
            visibility.hide();
        }
        if (triggers.indexOf('always') >= 0 && !visibility.isVisible) {
            visibility.show();
        }
    }, [triggers, visibility.isVisible]);
    React.useEffect(function () {
        if (restoreFocusOnHide &&
            !visibility.isVisible &&
            !clickedOutsideRef.current) {
            targetRef.current && targetRef.current.focus();
        }
        clickedOutsideRef.current = false;
    }, [restoreFocusOnHide, targetRef, visibility.isVisible]);
    return (React.createElement(DelayedToggleProvider, __assign({}, {
        beforeDisable: beforeHide,
        beforeEnable: beforeShow,
        disableDelay: hideDelay,
        enableDelay: showDelay,
        isEnabled: visibility.isVisible,
        onDisable: visibility.hide,
        onEnable: visibility.show,
    }),
        React.createElement(DelayedToggleContext.Consumer, null, function (_a) {
            var enable = _a.enable, disable = _a.disable;
            return (React.createElement(React.Fragment, null,
                React.createElement(Trigger, __assign({}, {
                    isEnabled: visibility.isVisible,
                    enable: enable,
                    disable: disable,
                    enableKeys: showKeys,
                    disableKeys: hideKeys.target,
                    trigger: trigger,
                    triggerRef: targetRef,
                }), children),
                visibility.isVisible && (React.createElement(React.Fragment, null,
                    React.createElement(ClickOutside, __assign({}, {
                        onClickOutside: function (event) {
                            clickedOutsideRef.current = true;
                            disable(event);
                        },
                        refs: __spreadArray([overlayRef, targetRef], clickOutsideIgnoreRefs, true),
                    })),
                    React.createElement(Trigger, __assign({}, {
                        isEnabled: visibility.isVisible,
                        enable: enable,
                        disable: disable,
                        disableKeys: hideKeys.overlay,
                        trigger: trigger === 'click' ? 'none' : trigger,
                        triggerRef: overlayRef,
                    }),
                        React.createElement(Overlay, __assign({}, {
                            canFlip: canFlip,
                            overlayRef: overlayRef,
                            padding: padding,
                            placement: placement,
                            shrinkOverlay: shrinkOverlay,
                            targetRef: targetRef,
                        }), overlay))))));
        })));
});
export function CloseOnFocus(_a) {
    var hide = _a.hide;
    return (
    // in IE, the hidden input's cursor appears right under the menu
    // this positions it arbitrarily away where it won't be noticed
    React.createElement("div", { style: {
            height: 0,
            position: 'absolute',
            top: 1000,
            width: 0,
        } },
        React.createElement("input", { onFocus: hide, style: { opacity: 0 } })));
}
export function useOverlayTriggerContext() {
    var _a = consumeDelayedToggle(), show = _a.enable, hide = _a.disable, toggle = _a.toggle;
    return {
        hide: hide,
        show: show,
        toggle: toggle,
    };
}
/**
 * @deprecated Please use `useOverlayTriggerContext()` instead
 */
export var consumeOverlayTrigger = useOverlayTriggerContext;
export default OverlayTrigger;
//# sourceMappingURL=OverlayTrigger.js.map