var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { times } from 'ramda';
import React from 'react';
import { DropdownButton } from '../Dropdown';
import MenuImperative from '../MenuImperative';
import { OverlayTrigger, useOverlayTriggerContext } from '../OverlayTrigger';
import { StyledOverlay } from './Pagination.styles';
var noop = function () { };
var PaginationMenu = React.forwardRef(function PaginationMenu(_a, ref) {
    var activePage = _a.activePage, menuRef = _a.menuRef, _b = _a.onSelect, onSelect_ = _b === void 0 ? noop : _b, pages = _a.pages;
    var ctx = useOverlayTriggerContext();
    var lastItemRef = React.useRef(null);
    var hasFooter = pages > 10;
    React.useEffect(function () {
        var _a;
        (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightFirst();
    }, [menuRef]);
    React.useEffect(function () {
        var _a, _b;
        (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightSuggested();
        (_b = menuRef.current) === null || _b === void 0 ? void 0 : _b.highlightSelected();
    }, [menuRef]);
    function onKeyDown(event) {
        var _a, _b, _c;
        var currentPage = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlighted();
        if (event.key === 'ArrowDown' || event.key === 'Down') {
            // when on the second to last item, want to jump to the last item (in the footer)
            if (currentPage === pages - 1 && lastItemRef.current) {
                (_b = menuRef.current) === null || _b === void 0 ? void 0 : _b.highlight(lastItemRef.current);
            }
        }
        else if (event.key === 'ArrowUp' || event.key === 'Up') {
            // on the last item (in the footer), want to jump back to the second to last
            // item back in the menu
            if (hasFooter && currentPage === pages) {
                event.stopPropagation();
                (_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.highlightLast();
            }
        }
    }
    function onSelect(selection) {
        onSelect_(selection);
        ctx.hide(selection.event);
    }
    var children = times(function (index) {
        var page = index + 1;
        return (React.createElement(MenuImperative.Item, { item: page, key: index, selected: page === activePage, ref: lastItemRef }, page));
    }, pages);
    return (React.createElement(StyledOverlay, { ref: ref, shadowStrength: 2 },
        React.createElement(MenuImperative, { ref: menuRef, onKeyDown: onKeyDown, onSelect: onSelect }, hasFooter ? (React.createElement(React.Fragment, null,
            React.createElement(MenuImperative.Options, null, children.slice(0, -1)),
            React.createElement(MenuImperative.Footer, { padding: "xs none" }, children[children.length - 1]))) : (React.createElement(MenuImperative.Options, null, children)))));
});
export var PaginationSelect = React.forwardRef(function PaginationSelect(_a, ref) {
    var _b = _a.activePage, activePage = _b === void 0 ? 1 : _b, disabled = _a.disabled, onSelect = _a.onSelect, _c = _a.pages, pages = _c === void 0 ? 0 : _c, props = __rest(_a, ["activePage", "disabled", "onSelect", "pages"]);
    var menuRef = React.useRef(null);
    // Safari has an issue with giving focus to buttons after clicking on them
    // if the button or menu do not have focus, the keyboard navigation does not work,
    // so just focus the menu when we open it
    function afterShow() {
        var _a, _b, _c;
        // this is brittle, if MenuImperative dom structure changes this could break
        // but super specific to pagination, not really a concern elsewhere
        ;
        (_c = (_b = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.el) === null || _b === void 0 ? void 0 : _b.firstChild) === null || _c === void 0 ? void 0 : _c.focus();
    }
    function onKeyDown(e) {
        var _a, _b, _c;
        if (e.key === 'Up' || e.key === 'ArrowUp') {
            e.preventDefault();
            (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.prev();
        }
        else if (e.key === 'Down' || e.key === 'ArrowDown') {
            e.preventDefault();
            (_b = menuRef.current) === null || _b === void 0 ? void 0 : _b.next();
        }
        else if (e.key === 'Enter') {
            e.preventDefault();
            (_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.select(e);
        }
    }
    return (React.createElement(OverlayTrigger, __assign({ afterShow: afterShow, overlay: React.createElement(PaginationMenu, { activePage: activePage, menuRef: menuRef, onSelect: onSelect, pages: pages }), placement: "bottom-left", ref: ref, trigger: "click" }, props),
        React.createElement(DropdownButton, { arrow: true, disabled: disabled, onKeyDown: onKeyDown, variant: "tertiary" }, activePage)));
});
//# sourceMappingURL=PaginationSelect.js.map