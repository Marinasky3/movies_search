import React from 'react';
import { Props, Size } from '../../utils/types';
import { DateSelectProps } from '../DateSelect';
import { InputProps } from '../Input';
import { SelectProps } from '../Select';
export declare type InputCellSize = Extract<Size, 'block' | 'lg' | 'md' | 'sm' | 'xl' | 'xs'>;
declare type TableVariant = '' | 'fixed';
export declare type TableCellVariant = '' | 'asc' | 'desc' | 'snugfit';
export interface BodyCellProps extends Props {
    /**
     * Shrink the cell around the contents
     */
    snugfit?: boolean;
    /**
     * The table body cell variant
     */
    variant?: TableCellVariant;
}
export interface BodyProps extends Props {
}
export interface BodyRowProps extends Props {
    /**
     * Sets row text color to red to signify overdue items
     */
    overdue?: boolean;
}
export interface CaratProps {
    /**
     * Whether or not the carat is rotated
     */
    expanded?: boolean;
    /**
     * Callback to fire when clicked
     */
    onClick: React.EventHandler<any>;
}
export interface ContainerProps {
    children?: React.ReactNode;
    /**
     * Adjust the container to support a table shelf
     * @default false
     * */
    shelf?: boolean;
}
export interface CurrencyCellProps extends Props {
}
export interface GroupProps extends Props {
    /**
     * Number of columns in table
     */
    colSpan?: number;
    /**
     * Determines indentation of the group and content
     */
    depth?: number;
}
export interface GroupTitleProps extends Props {
}
export interface HeaderCellProps extends Props {
    /**
     * Is this the column sortable
     */
    sortable?: boolean;
    /**
     * Shrink the cell around the contents
     * @default false
     */
    snugfit?: boolean;
    /**
     * Allows for setting ascending or descending sorting icon
     * @default ''
     */
    variant?: TableCellVariant;
}
export interface HeaderProps extends Props {
}
export interface HeaderRowProps extends Props {
}
export interface IconCellProps extends Props {
}
export interface InputCellProps extends Omit<InputProps, 'size'> {
    /**
     * Message to be displayed below the input during an error
     */
    errorMessage?: string;
    /**
     * Triggers the spinner for processing inline editable content
     * @default false
     */
    processing?: boolean;
    /**
     * The size of the input cell and corresponding error message
     * @default 'block'
     */
    size?: InputCellSize;
}
export interface LinkCellProps extends Props {
    /**
     * Destination url
     * @default ''
     * */
    href: string;
}
export interface PercentCellProps extends Props {
}
export interface SelectCellProps extends SelectProps {
    /**
     * Message to be displayed below the select during an error
     * @default ''
     */
    errorMessage?: string;
    /**
     * Triggers the spinner that covers inline editable content
     * @default false
     */
    processing?: boolean;
}
export interface DateSelectCellProps extends DateSelectProps {
    className?: string;
    /**
     * Message to be displayed below the date select during an error
     * @default ''
     */
    errorMessage?: string;
    /**
     * Triggers the spinner that covers inline editable content
     * @default false
     */
    processing?: boolean;
}
export interface TableProps extends Props {
    inline?: boolean;
    /**
     * The table variant
     */
    variant?: TableVariant;
}
export interface TextAreaCellProps extends Props {
    /**
     * Message to be displayed below the textarea during an error
     */
    errorMessage?: string;
    /**
     * Triggers the spinner for processing inline editable content
     */
    processing?: boolean;
    /**
     * Sets whether it is resizable
     */
    resizable?: boolean;
}
export interface TextCellProps extends Props {
}
export {};
