var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { addSubcomponents } from '../../utils/addSubcomponents';
import cx from 'classnames';
import { Link as LinkElement } from '../Link';
import { tableSelectClassName } from '../Select/Select.styles';
import { Spinner } from '../Spinner';
import { StyledTable, StyledCaratWrapper, StyledCarat, StyledTableWrapper, StyledHead, StyledTableHeaderCell, StyledTableHeaderCellContainer, StyledTableHeaderCellLabel, StyledTableHeaderCellSortIconAsc, StyledTableHeaderCellSortIconDesc, StyledTableHeaderCellIconWrapper, StyledCheckbox, StyledTableGroupRowTitle, StyledTableGroupRow, StyledTableGroupRowContent, StyledTableGroupRowHeader, StyledTableBodyRow, StyledTableCellText, StyledTableInlineEditContainer, StyledLoadingContainer, StyledTableCellDateInput, StyledTableInlineEditErrorBox, StyledIconCell, StyledTableCellInput, StyledTableCellSelect, StyledSelectCellWrapper, StyledTableCellTextArea, StyledTableBodyCell, } from './Table.styles';
export var Table_ = React.forwardRef(function Table(_a, ref) {
    var children = _a.children, inline = _a.inline, variant = _a.variant, props = __rest(_a, ["children", "inline", "variant"]);
    return (React.createElement(StyledTable, __assign({ ref: ref }, props, { "$inline": inline, "$fixed": variant === 'fixed' }), children));
});
export var Carat = React.forwardRef(function Carat(_a, ref) {
    var _b = _a.expanded, expanded = _b === void 0 ? false : _b, props = __rest(_a, ["expanded"]);
    return (React.createElement(StyledCaratWrapper, { ref: ref },
        React.createElement(StyledCarat, __assign({ "$expanded": expanded, icon: "chevron-right" }, props))));
});
export var Container = React.forwardRef(function Container(_a, ref) {
    var children = _a.children, _b = _a.shelf, shelf = _b === void 0 ? false : _b, props = __rest(_a, ["children", "shelf"]);
    return (React.createElement(StyledTableWrapper, __assign({}, props, { ref: ref, shadowStrength: 0, "$withShelf": shelf }), children));
});
export var Header = React.forwardRef(function Header(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledHead, __assign({ ref: ref }, props), children));
});
export var HeaderRow = React.forwardRef(function HeaderRow(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement("tr", __assign({ ref: ref }, props), children));
});
export var HeaderCell = React.forwardRef(function HeaderCell(_a, ref) {
    var _b = _a.sortable, sortable = _b === void 0 ? false : _b, children = _a.children, _c = _a.snugfit, snugfit = _c === void 0 ? false : _c, _d = _a.variant, variant = _d === void 0 ? '' : _d, props = __rest(_a, ["sortable", "children", "snugfit", "variant"]);
    return (React.createElement(StyledTableHeaderCell, __assign({ ref: ref }, props, { "$sortable": sortable, "$variant": variant, "$snugfit": snugfit }),
        React.createElement(StyledTableHeaderCellContainer, null,
            React.createElement(StyledTableHeaderCellLabel, null, children),
            !sortable ? null : (React.createElement(StyledTableHeaderCellIconWrapper, null,
                React.createElement(StyledTableHeaderCellSortIconAsc, null),
                React.createElement(StyledTableHeaderCellSortIconDesc, null))))));
});
export var Body = React.forwardRef(function Body(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement("tbody", __assign({ ref: ref }, props), children));
});
export var Checkbox = React.forwardRef(function Checkbox(props, ref) {
    return React.createElement(StyledCheckbox, __assign({ ref: ref }, props));
});
export var GroupTitle = React.forwardRef(function GroupTitle(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledTableGroupRowTitle, __assign({ ref: ref }, props), children));
});
export var Group = React.forwardRef(function Group(_a, ref) {
    var children = _a.children, _b = _a.colSpan, colSpan = _b === void 0 ? 1000 : _b, _c = _a.depth, depth = _c === void 0 ? false : _c, props = __rest(_a, ["children", "colSpan", "depth"]);
    return (React.createElement(StyledTableGroupRow, __assign({ ref: ref, "$depth": depth }, props),
        React.createElement("td", { colSpan: colSpan },
            React.createElement(StyledTableGroupRowContent, null,
                React.createElement(StyledTableGroupRowHeader, null, children)))));
});
export var BodyRow = React.forwardRef(function BodyRow(_a, ref) {
    var children = _a.children, _b = _a.overdue, overdue = _b === void 0 ? false : _b, props = __rest(_a, ["children", "overdue"]);
    return (React.createElement(StyledTableBodyRow, __assign({ ref: ref, "$overdue": overdue }, props), children));
});
export var BodyCell = React.forwardRef(function BodyCell(_a, ref) {
    var children = _a.children, _b = _a.snugfit, snugfit = _b === void 0 ? false : _b, _c = _a.variant, variant = _c === void 0 ? '' : _c, props = __rest(_a, ["children", "snugfit", "variant"]);
    return (React.createElement(StyledTableBodyCell, __assign({ ref: ref, "$snugfit": snugfit || variant === 'snugfit' }, props), children));
});
export var CurrencyCell = React.forwardRef(function CurrencyCell(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledTableCellText, __assign({ "$currency": true, ref: ref }, props), children));
});
export var DateSelectCell = React.forwardRef(function DateSelectCell(_a, ref) {
    var children = _a.children, className = _a.className, _b = _a.disabled, disabled = _b === void 0 ? false : _b, errorMessage = _a.errorMessage, _c = _a.processing, processing = _c === void 0 ? false : _c, props = __rest(_a, ["children", "className", "disabled", "errorMessage", "processing"]);
    var error = Boolean(errorMessage);
    return (React.createElement(StyledTableInlineEditContainer, { "$disabled": disabled, "$error": error, "$size": "block", className: cx({ disabled: disabled, error: error }) },
        processing && (React.createElement(StyledLoadingContainer, null,
            React.createElement(Spinner, { loading: processing, size: "md" }))),
        React.createElement(StyledTableCellDateInput, __assign({}, props, { disabled: processing || disabled, ref: ref, variant: error ? 'error' : '' })),
        !processing && error && (React.createElement(StyledTableInlineEditErrorBox, null, errorMessage))));
});
export var IconCell = React.forwardRef(function IconCell(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledIconCell, __assign({ ref: ref }, props), children));
});
export var InputCell = React.forwardRef(function InputCell(_a, ref) {
    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.errorMessage, errorMessage = _c === void 0 ? '' : _c, _d = _a.processing, processing = _d === void 0 ? false : _d, _e = _a.size, size = _e === void 0 ? 'block' : _e, // TODO FIX THIS TYPE
    props = __rest(_a, ["disabled", "errorMessage", "processing", "size"]);
    var error = Boolean(errorMessage);
    return (React.createElement(StyledTableInlineEditContainer, { "$disabled": disabled, "$error": error, "$size": size, className: cx({ disabled: disabled, error: error }) },
        processing && (React.createElement(StyledLoadingContainer, null,
            React.createElement(Spinner, { loading: processing, size: "md" }))),
        React.createElement(StyledTableCellInput, __assign({}, props, { ref: ref, disabled: processing || disabled })),
        !processing && error && (React.createElement(StyledTableInlineEditErrorBox, { "$size": size }, errorMessage))));
});
export var LinkCell = React.forwardRef(function LinkCell(_a, ref) {
    var children = _a.children, _b = _a.href, href = _b === void 0 ? '' : _b, props = __rest(_a, ["children", "href"]);
    return (React.createElement(TextCell, { ref: ref },
        React.createElement(LinkElement, __assign({ href: href }, props), children)));
});
export var PercentCell = React.forwardRef(function PercentCell(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledTableCellText, __assign({ "$percent": true, ref: ref }, props), children));
});
export var SelectCell = React.forwardRef(function SelectCell(_a, ref) {
    var _b = _a.block, block = _b === void 0 ? true : _b, children = _a.children, disabled = _a.disabled, errorMessage = _a.errorMessage, className = _a.className, _c = _a.processing, processing = _c === void 0 ? false : _c, props = __rest(_a, ["block", "children", "disabled", "errorMessage", "className", "processing"]);
    var error = Boolean(errorMessage);
    var hasClearIcon = !disabled && !props.loading && Boolean(props.label);
    return (React.createElement(StyledTableInlineEditContainer, { "$disabled": disabled, "$error": error, "$size": "block", className: cx({ disabled: disabled, error: error }) },
        processing && (React.createElement(StyledLoadingContainer, null,
            React.createElement(Spinner, { loading: processing, size: "md" }))),
        React.createElement(StyledSelectCellWrapper, null,
            React.createElement(StyledTableCellSelect, __assign({}, props, { "$placeholder": !props.label, "$hasClearIcon": hasClearIcon, block: block, className: cx(tableSelectClassName, className), disabled: processing || disabled, error: error, ref: ref }), children)),
        !processing && errorMessage && (React.createElement(StyledTableInlineEditErrorBox, null, errorMessage))));
});
export var TextAreaCell = React.forwardRef(function TextAreaCell(_a, ref) {
    var disabled = _a.disabled, _b = _a.errorMessage, errorMessage = _b === void 0 ? '' : _b, _c = _a.processing, processing = _c === void 0 ? false : _c, _d = _a.resizable, resizable = _d === void 0 ? false : _d, props = __rest(_a, ["disabled", "errorMessage", "processing", "resizable"]);
    var textareaRef = ref ||
        React.createRef();
    var setHeight = function () {
        if (textareaRef && textareaRef.current) {
            textareaRef.current.style.height = 'auto';
            textareaRef.current.style.height = "".concat(textareaRef.current.scrollHeight, "px");
        }
    };
    var error = Boolean(errorMessage);
    return (React.createElement(StyledTableInlineEditContainer, { "$disabled": disabled, "$error": error, "$size": "block", className: cx({ disabled: disabled, error: error }) },
        processing && (React.createElement(StyledLoadingContainer, null,
            React.createElement(Spinner, { loading: processing, size: "md" }))),
        React.createElement(StyledTableCellTextArea, __assign({}, props, { "$resizable": resizable, disabled: processing || disabled, onBlur: function (event) {
                setHeight();
                props.onBlur && props.onBlur(event);
            }, ref: textareaRef, resize: "none", rows: 1 })),
        !processing && error && (React.createElement(StyledTableInlineEditErrorBox, null, errorMessage))));
});
export var TextCell = React.forwardRef(function TextCell(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledTableCellText, __assign({ ref: ref }, props), children));
});
Table_.displayName = 'Table';
Body.displayName = 'Table.Body';
BodyCell.displayName = 'Table.BodyCell';
BodyRow.displayName = 'Table.BodyRow';
Carat.displayName = 'Table.Carat';
Checkbox.displayName = 'Table.Checkbox';
Container.displayName = 'Table.Container';
CurrencyCell.displayName = 'Table.CurrencyCell';
DateSelectCell.displayName = 'Table.DateSelect';
Group.displayName = 'Table.Group';
GroupTitle.displayName = 'Table.GroupTitle';
Header.displayName = 'Table.Header';
HeaderCell.displayName = 'Table.HeaderCell';
HeaderRow.displayName = 'Table.HeaderRow';
IconCell.displayName = 'Table.IconCell';
InputCell.displayName = 'Table.InputCell';
LinkCell.displayName = 'Table.LinkCell';
PercentCell.displayName = 'Table.ParentCell';
TextAreaCell.displayName = 'Table.TextAreaCell';
TextCell.displayName = 'Table.TextCell';
export var Table = addSubcomponents({
    Body: Body,
    BodyCell: BodyCell,
    BodyRow: BodyRow,
    Carat: Carat,
    Checkbox: Checkbox,
    Container: Container,
    CurrencyCell: CurrencyCell,
    DateSelectCell: DateSelectCell,
    Group: Group,
    GroupTitle: GroupTitle,
    Header: Header,
    HeaderCell: HeaderCell,
    HeaderRow: HeaderRow,
    IconCell: IconCell,
    InputCell: InputCell,
    LinkCell: LinkCell,
    PercentCell: PercentCell,
    SelectCell: SelectCell,
    TextAreaCell: TextAreaCell,
    TextCell: TextCell,
}, Table_);
export default Table;
//# sourceMappingURL=Table.js.map