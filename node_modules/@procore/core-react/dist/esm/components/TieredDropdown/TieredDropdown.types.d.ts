import React from 'react';
import { ButtonProps } from '../Button';
import { ButtonVariant } from '../Button/Button.types';
import { TieredSelectProps } from '../TieredSelect';
declare type Div = React.ComponentPropsWithoutRef<'div'>;
declare type TriggerProps = Pick<ButtonProps, 'block' | 'disabled' | 'icon' | 'iconRight' | 'loading' | 'size'>;
export declare type SearchablePath<T = any> = {
    label: string;
    node: T;
    path: T[];
    pathKey: string;
};
export interface InternalTieredDropdownProps<T = any> extends Omit<Div, 'onSelect' | 'onChange'>, TriggerProps {
    children: React.ReactText;
    ['data-qa']?: string;
    options?: T[];
    value?: T[];
    variant?: ButtonVariant;
}
export interface TieredDropdownProps extends Omit<TieredSelectProps, 'onChange' | 'getValueString' | 'value'>, TriggerProps {
    onSelect: TieredSelectProps['onChange'];
    children: InternalTieredDropdownProps['children'];
    ['data-qa']?: string;
    variant?: InternalTieredDropdownProps['variant'];
}
export {};
