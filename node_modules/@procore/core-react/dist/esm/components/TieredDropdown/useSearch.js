import { useMemo, useState, useCallback } from 'react';
// eslint-disable-next-line no-useless-escape
var periodDashAndWhitespaceRegex = /[\.\-\s]/g;
function matchString(value, searchQuery) {
    var lowerCasedKeyValue = (value && value.toLowerCase()) || '';
    var valueWithoutSeparators = lowerCasedKeyValue.replace(periodDashAndWhitespaceRegex, '');
    return valueWithoutSeparators.includes(searchQuery);
}
function matchKeyInObject(item, key, searchQuery) {
    if (typeof item[key] === 'string') {
        return matchString(item[key], searchQuery);
    }
    if (typeof item[key] === 'number') {
        return matchString("".concat(item[key]), searchQuery);
    }
    return false;
}
function filterCondition(item, searchTerm, keysToMatch) {
    if (searchTerm === void 0) { searchTerm = ''; }
    if (keysToMatch === void 0) { keysToMatch = Object.keys(item); }
    var lowerCasedSearchTerm = searchTerm.trim().toLowerCase();
    var sanitizedSearchQuery = lowerCasedSearchTerm.replace(periodDashAndWhitespaceRegex, '');
    return keysToMatch.some(function (key) {
        return matchKeyInObject(item, key, sanitizedSearchQuery);
    });
}
export function useSearch(config) {
    var _a = useState(''), searchTerm = _a[0], setSearchTerm = _a[1];
    var filteredItems = useMemo(function () {
        if (searchTerm === '') {
            return config.items;
        }
        return config.items.filter(function (item) {
            return filterCondition(item, searchTerm, config.keysToSearch);
        });
    }, [config, searchTerm]);
    var setSearch = useCallback(function (value) {
        setSearchTerm(value);
    }, [setSearchTerm]);
    var clearSearch = useCallback(function () {
        setSearchTerm('');
    }, [setSearchTerm]);
    return {
        clearSearch: clearSearch,
        filteredItems: filteredItems,
        setSearch: setSearch,
        searchTerm: searchTerm,
    };
}
//# sourceMappingURL=useSearch.js.map