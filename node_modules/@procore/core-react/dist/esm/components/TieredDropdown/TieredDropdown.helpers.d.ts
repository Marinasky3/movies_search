import { Id } from '../TieredSelect/TieredSelect.types';
export declare const empty: any[];
export declare const hideKeys: {
    overlay: string[];
    target: string[];
};
export declare function defaultGetGroupId<T extends {
    groupId: Id;
}>(tier: T): Id;
export declare function defaultGetId<T extends {
    id: Id;
}>(tier: T): Id;
export declare function defaultGetLabel<T extends {
    label: string;
}>(tier: T): string;
export declare function defaultGetNextGroupId<T extends {
    nextGroupId?: Id;
}>(tier: T): Id;
export declare function defaultIsTierDisabled<T extends {
    disabled?: boolean;
}>(tier: T): boolean;
export declare function noop(): void;
export declare function always(): boolean;
/**
 * Helper function to find path in tiered structure
 * @param optionsByNextGroupId
 * @param item
 * @param getGroupId
 * @param getNextGroupId
 * @returns
 */
export declare function findPath<T>(optionsByNextGroupId: Record<string | number, any>, item: T, getGroupId: (t: T) => Id): T[];
/**
 * Helper function to generate a path key
 * @param path
 * @param getLabel
 * @returns
 */
export declare function getPathKey<T>(path: T[] | undefined, getLabel: (tier: T) => string | undefined): string;
