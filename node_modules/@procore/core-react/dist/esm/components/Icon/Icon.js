var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import styles from '@procore/core-css/src/components/_icon.scss';
import React from 'react';
var classnames = require('classnames/bind');
var coreIcons = require('@procore/core-icons/dist/paths.json');
var cx = classnames.bind(styles);
var sizes = {
    inherit: 'inherit',
    sm: '16px',
    md: '24px',
    lg: '26px',
};
function SVGIcon(_a) {
    var _b = _a.path, path = _b === void 0 ? '' : _b, _c = _a.fill, fill = _c === void 0 ? 'currentColor' : _c, _d = _a.size, size = _d === void 0 ? 'sm' : _d;
    var dimensions = sizes[size] || size;
    return (React.createElement("svg", { focusable: "false", height: dimensions, width: dimensions, viewBox: "0 0 1024 1024" },
        React.createElement("path", { d: path, fill: fill })));
}
/**
 * @deprecated The `Icon` component has been deprecated and will be removed in a future version.
 *
 * We recommend using the React components directly from the `@procore/core-icons/dist` package.
 *
 * These new icons can be tree-shaked and are sourced directly from Figma.
 *
 * `import { ChevronRight } from '@procore/core-icons/dist'`
 *
 * `() => <Button icon={<ChevronRight />} />`
 *
 * * In addition to this, components that accept an `icon` prop as a string now accept a `ReactNode` too,
 * and the string APIs have been deprecated.
 */
export var Icon = React.forwardRef(function Icon(_a, ref) {
    var _b;
    var className = _a.className, _c = _a.clickable, clickable = _c === void 0 ? false : _c, icon = _a.icon, _d = _a.size, size = _d === void 0 ? 'sm' : _d, _e = _a.variant, variant = _e === void 0 ? '' : _e, props = __rest(_a, ["className", "clickable", "icon", "size", "variant"]);
    return (React.createElement("span", __assign({ ref: ref, className: cx('icon', (_b = {
                'icon--clickable': clickable
            },
            _b["icon--".concat(variant)] = variant,
            _b), className), "data-jss-placeholder": "icon" }, props),
        React.createElement(SVGIcon, { path: coreIcons[icon], size: size })));
});
Icon.displayName = 'Icon';
export default Icon;
//# sourceMappingURL=Icon.js.map