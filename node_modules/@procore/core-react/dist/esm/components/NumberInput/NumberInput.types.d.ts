import { InputProps } from '../Input/Input.types';
export declare type Locale = string | string[];
export declare const fillDecimalScaleVariant: {
    readonly none: "none";
    readonly onBlur: "onBlur";
    readonly always: "always";
};
export declare type FillDecimalScaleVariant = typeof fillDecimalScaleVariant[keyof typeof fillDecimalScaleVariant];
export interface ValueChange {
    value: string;
    parsedNumber: number | null;
}
export declare type InputValue = string | number | undefined | null;
interface QaTags {
    wrapper?: string;
    increment?: string;
    decrement?: string;
}
export interface NumberInputProps extends Omit<InputProps, 'value' | 'defaultValue' | 'onChange' | 'variant'> {
    /**
     * The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.
     * @defaultValue true
     */
    decimalScale?: boolean | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
    /**
     * Initial value of an uncontrolled component
     */
    defaultValue?: InputValue;
    /**
     * <Code>none</Code> prevents from adding zeros to match given
     * <Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds
     * zeros to match given
     * <Code>decimalScale</Code>. <br />
     * <Code>onBlur</Code> automatically adds zeros to match given{' '}
     * <Code>decimalScale</Code> when input has lost focus.
     * @default 'none'
     */
    fillDecimalScale?: FillDecimalScaleVariant;
    /**
     * A string with a BCP 47 language tag or an array of such strings which specifies number formatting.
     * @defaultValue en-US
     */
    locale?: Locale;
    /**
     * `(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`.
     */
    onChange?: (value: ValueChange) => void;
    /**
     * A string which is added to input as a prefix.
     */
    prefix?: string;
    /**
     * A stepping interval which is used in incrementer. Zero value turns off incrementer.
     * @defaultValue 0
     */
    step?: number;
    /**
     * A string which is added to input as a suffix
     */
    suffix?: string;
    /**
     * Value of a controlled component
     */
    value?: InputValue;
    qa?: QaTags;
}
export interface UseNumberFormatConfig extends Pick<NumberInputProps, 'decimalScale' | 'fillDecimalScale' | 'locale'> {
}
export interface Separators {
    decimal: string;
    group: string;
}
export interface ParsedInputValue {
    integer: string;
    decimal: string;
    fraction: string;
    parsedNumber: number;
}
export declare type PressedKey = string | undefined;
export interface CursorPosition {
    selectionStart: number;
    selectionEnd: number;
    selection: string;
}
export {};
