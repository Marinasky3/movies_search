var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { fillDecimalScaleVariant, } from './NumberInput.types';
import { defaultLocale, verifyDecimalScale, getLengthInfo, format, } from './NumberInput.utils';
export function usePrevious(value) {
    var ref = React.useRef();
    React.useEffect(function () {
        ref.current = value;
    });
    return ref.current;
}
export function useNumberFormat(_a) {
    var _b = _a.decimalScale, _decimalScale = _b === void 0 ? true : _b, _c = _a.fillDecimalScale, fillDecimalScale = _c === void 0 ? fillDecimalScaleVariant.none : _c, _d = _a.locale, _locale = _d === void 0 ? defaultLocale : _d;
    var locale = React.useMemo(function () { return __spreadArray(__spreadArray([], (Array.isArray(_locale) ? _locale : [_locale]), true), [defaultLocale], false); }, [_locale]);
    var _e = React.useMemo(function () { return ({
        fixedDecimalScale: fillDecimalScale === fillDecimalScaleVariant.always,
        fillDecimalScaleOnBlur: fillDecimalScale === fillDecimalScaleVariant.onBlur,
    }); }, [fillDecimalScale]), fixedDecimalScale = _e.fixedDecimalScale, fillDecimalScaleOnBlur = _e.fillDecimalScaleOnBlur;
    var decimalScale = React.useMemo(function () { return verifyDecimalScale(_decimalScale); }, [_decimalScale]);
    var formatValue = React.useCallback(function (value) {
        return format(locale, decimalScale, fillDecimalScale, value);
    }, [locale, decimalScale, fillDecimalScale]);
    var getValueLengthInfo = React.useCallback(function (value, isNumericString) {
        if (isNumericString === void 0) { isNumericString = false; }
        return getLengthInfo(locale, value, decimalScale, fillDecimalScale, isNumericString);
    }, [locale, decimalScale, fillDecimalScale]);
    return {
        formatValue: formatValue,
        getValueLengthInfo: getValueLengthInfo,
        locale: locale,
        fixedDecimalScale: fixedDecimalScale,
        fillDecimalScaleOnBlur: fillDecimalScaleOnBlur,
        decimalScale: decimalScale,
    };
}
//# sourceMappingURL=NumberInput.hooks.js.map