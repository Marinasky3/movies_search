var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import styled, { css } from 'styled-components';
import { borderRadius } from '../../styles/borderRadius';
import { colors } from '../../styles/colors';
import { spacing } from '../../styles/spacing';
import { getTypographyIntent } from '../Typography/Typography.styles';
export var StyledContainer = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  align-items: center;\n  display: ", ";\n  height: 36px;\n  justify-content: center;\n  width: ", ";\n"], ["\n  align-items: center;\n  display: ", ";\n  height: 36px;\n  justify-content: center;\n  width: ", ";\n"])), function (_a) {
    var block = _a.block;
    return (block ? 'flex' : 'inline-flex');
}, function (_a) {
    var block = _a.block;
    return (block ? '100%' : null);
});
export var StyledSegment = styled.button(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  align-items: center;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 1px;\n  cursor: pointer;\n  display: flex;\n  flex: 1 1 auto;\n  height: 100%;\n  justify-content: center;\n  min-width: 0;\n  outline: 0;\n  padding: 0 ", "px;\n  position: relative;\n\n  // For all segments which are not the first child, hide the left border.\n  // This is the basis of all the styling so we can get that single pixel line\n  // between each segment\n  &:not(:first-child) {\n    border-left-width: 0;\n  }\n\n  &:first-child {\n    border-bottom-left-radius: ", "px;\n    border-top-left-radius: ", "px;\n  }\n\n  &:last-child {\n    border-bottom-right-radius: ", "px;\n    border-top-right-radius: ", "px;\n  }\n\n  &:focus,\n  &.focus {\n    &:not(:disabled) {\n      // Custom focus style, not using the mixin because we need to have control\n      // over borders and outlines\n      border-color: ", ";\n      box-shadow: 0 0 0 1px ", ";\n      z-index: 1;\n    }\n  }\n\n  ", "\n"], ["\n  align-items: center;\n  border-radius: 0;\n  border-style: solid;\n  border-width: 1px;\n  cursor: pointer;\n  display: flex;\n  flex: 1 1 auto;\n  height: 100%;\n  justify-content: center;\n  min-width: 0;\n  outline: 0;\n  padding: 0 ", "px;\n  position: relative;\n\n  // For all segments which are not the first child, hide the left border.\n  // This is the basis of all the styling so we can get that single pixel line\n  // between each segment\n  &:not(:first-child) {\n    border-left-width: 0;\n  }\n\n  &:first-child {\n    border-bottom-left-radius: ", "px;\n    border-top-left-radius: ", "px;\n  }\n\n  &:last-child {\n    border-bottom-right-radius: ", "px;\n    border-top-right-radius: ", "px;\n  }\n\n  &:focus,\n  &.focus {\n    &:not(:disabled) {\n      // Custom focus style, not using the mixin because we need to have control\n      // over borders and outlines\n      border-color: ", ";\n      box-shadow: 0 0 0 1px ", ";\n      z-index: 1;\n    }\n  }\n\n  ", "\n"])), spacing.md, borderRadius.md, borderRadius.md, borderRadius.md, borderRadius.md, colors.blue40, colors.blue40, function (_a) {
    var _b = _a.active, active = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c;
    if (disabled) {
        return css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        &,\n        &:disabled {\n          background-color: ", ";\n          border-color: ", ";\n          color: ", ";\n          pointer-events: none;\n        }\n      "], ["\n        &,\n        &:disabled {\n          background-color: ", ";\n          border-color: ", ";\n          color: ", ";\n          pointer-events: none;\n        }\n      "])), active ? colors.gray85 : colors.white, colors.gray85, active ? colors.white : colors.gray85);
    }
    else if (active) {
        return css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        &,\n        &:hover {\n          background-color: ", ";\n          border-color: ", ";\n          color: ", ";\n        }\n\n        & + * {\n          // If a segment is active, the sibling to the right must have its left\n          // border turned on to match the spec with a gray line on either\n          // side of an active segment.\n          //\n          // !important is needed to override :not(:first-child) specificity\n          border-left-width: 1px !important;\n          margin-left: -1px !important;\n        }\n      "], ["\n        &,\n        &:hover {\n          background-color: ", ";\n          border-color: ", ";\n          color: ", ";\n        }\n\n        & + * {\n          // If a segment is active, the sibling to the right must have its left\n          // border turned on to match the spec with a gray line on either\n          // side of an active segment.\n          //\n          // !important is needed to override :not(:first-child) specificity\n          border-left-width: 1px !important;\n          margin-left: -1px !important;\n        }\n      "])), colors.blue50, colors.blue50, colors.white);
    }
    return css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      background-color: ", ";\n      border-color: ", ";\n      color: ", ";\n\n      &:hover,\n      &.hover {\n        background-color: ", ";\n        border-color: ", ";\n        color: ", ";\n      }\n\n      &:focus,\n      &.focus {\n        border-color: ", ";\n\n        // If we hover or focus on a segment we want to show its left border\n        border-left-width: 1px;\n\n        // We also need to use a negative margin to account for the additional width\n        // from turning on the left border so we don't get shifting. However,\n        // we don't want to shift the first item because its border is always on\n        &:not(:first-child) {\n          margin-left: -1px;\n        }\n      }\n    "], ["\n      background-color: ", ";\n      border-color: ", ";\n      color: ", ";\n\n      &:hover,\n      &.hover {\n        background-color: ", ";\n        border-color: ", ";\n        color: ", ";\n      }\n\n      &:focus,\n      &.focus {\n        border-color: ", ";\n\n        // If we hover or focus on a segment we want to show its left border\n        border-left-width: 1px;\n\n        // We also need to use a negative margin to account for the additional width\n        // from turning on the left border so we don't get shifting. However,\n        // we don't want to shift the first item because its border is always on\n        &:not(:first-child) {\n          margin-left: -1px;\n        }\n      }\n    "])), colors.white, colors.gray85, colors.gray45, colors.gray94, colors.gray85, colors.gray45, colors.blue50);
});
export var StyledLabel = styled.span(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  ", ";\n\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"], ["\n  ", ";\n\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"])), getTypographyIntent('body'));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=SegmentedController.styles.js.map