import React from 'react';
import { ButtonAttributes, DivAttributes } from '../../utils/types';
import { SegmentedControllerProps, SegmentedControllerSegmentProps, SegmentedControllerTooltipProps } from './SegmentedController.types';
export declare const Segment: React.ForwardRefExoticComponent<ButtonAttributes & SegmentedControllerSegmentProps & React.RefAttributes<HTMLButtonElement>>;
/**
 * @deprecated
 *
 * The `SegmentedController.Tooltip` component has been deprecated will be
 * removed in a future version.
 *
 * Tooltips are now built into `SegmentedController.Segment`s, and can be added
 * by configuring the `tooltip` prop.
 *
 * **Before**
 *
 * ```
 * <SegmentedController>
 *   <SegmentedController.Tooltip tooltip="Item 1 is the first item">
 *     <SegmentedController.Segment>
 *       Item 1
 *     </SegmentedController.Segment>
 *   </SegmentedController.Tooltip>
 * </SegmentedController>
 * ```
 *
 * **After**
 *
 * ```
 * <SegmentedController>
 *   <SegmentedController.Segment tooltip="Item 1 is the first item">
 *     Item 1
 *   </SegmentedController.Segment>
 * </SegmentedController>
 * ```
 *
 * @deprecatedSince 10.20.0
 */
export declare const Tooltip: React.ForwardRefExoticComponent<SegmentedControllerTooltipProps & React.RefAttributes<HTMLElement>>;
/**
 * @deprecated
 *
 * This `SegmentedController.State` utility has been deprecated. Please just
 * use a simple state management hook instead.
 *
 *
 * **Before**
 *
 * ```
 * <SegmentedController.State>
 *   {({ selectedIndex, setSelected }) => (
 *     <SegmentedController>
 *       <SegmentedController.Segment onClick={() => setSelected(0)} active={selectedIndex === 0}>
 *         Item 1
 *       </SegmentedController.Segment>
 *     </SegmentedController>
 *   )}
 * </SegmentedController.State>
 * ```
 *
 * **After**
 *
 * ```
 * const [selected, setSelected] = React.useState(0)
 *
 * <SegmentedController onChange={setSelected}>
 *   <SegmentedController.Segment active={selectedIndex === 0}>
 *     Item 1
 *   </SegmentedController.Segment>
 * </SegmentedController>
 * ```
 *
 * @deprecatedSince 10.20.0
 */
export declare const State: (props: any) => JSX.Element;
export declare const SegmentedController: React.ForwardRefExoticComponent<Omit<DivAttributes, "onChange"> & SegmentedControllerProps & React.RefAttributes<HTMLDivElement>> & {
    Segment: React.ForwardRefExoticComponent<ButtonAttributes & SegmentedControllerSegmentProps & React.RefAttributes<HTMLButtonElement>>;
    State: (props: any) => JSX.Element;
    Tooltip: React.ForwardRefExoticComponent<SegmentedControllerTooltipProps & React.RefAttributes<HTMLElement>>;
};
