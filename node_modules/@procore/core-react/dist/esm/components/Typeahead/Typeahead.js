var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Clear, Search } from '@procore/core-icons/dist';
import React from 'react';
import { Button } from '../Button';
import { StyledIcon, StyledInput, StyledTypeahead } from './Typeahead.styles';
export var Typeahead = React.forwardRef(function (_a, ref) {
    var className = _a.className, disabled = _a.disabled, onChange_ = _a.onChange, style = _a.style, _b = _a.value, value = _b === void 0 ? '' : _b, props = __rest(_a, ["className", "disabled", "onChange", "style", "value"]);
    var onChange = React.useCallback(function onChange(e) {
        onChange_ === null || onChange_ === void 0 ? void 0 : onChange_(e.target.value, e);
    }, [onChange_]);
    var onKeyDown = React.useCallback(function onKeyDown(e) {
        if (e.key === 'Escape' || e.key === 'Esc') {
            onChange_ === null || onChange_ === void 0 ? void 0 : onChange_('', e);
        }
    }, [onChange_]);
    var onClickClear = React.useCallback(function onClickClear(e) {
        if (!disabled) {
            onChange_ === null || onChange_ === void 0 ? void 0 : onChange_('', e);
        }
    }, [disabled, onChange_]);
    return (React.createElement(StyledTypeahead, { className: className, style: style, "data-qa": props['data-qa'] },
        React.createElement(StyledInput, __assign({}, props, { type: "search", "data-qa": "core-typeahead-input", ref: ref, onChange: onChange, onKeyDown: onKeyDown, disabled: disabled, value: value })),
        React.createElement(StyledIcon, { disabled: disabled }, value ? (React.createElement(Button, { "aria-label": "Clear the input", "data-qa": "core-typeahead-clear-icon", size: "sm", variant: "tertiary", icon: React.createElement(Clear, null), disabled: disabled, onClick: onClickClear, tabIndex: -1 })) : (React.createElement(Search, { "data-qa": "core-typeahead-search-icon", size: "sm" })))));
});
//# sourceMappingURL=Typeahead.js.map