var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useOverflowObserver } from '../../effects/OverflowObserver';
import { parseFilename } from '../../utils/filename';
import Tooltip from '../Tooltip';
import { StyledCaptionText, StyledMultilineCaption, StyledPlaceholderCaption, StyledSingleLineCaption, StyledSinglelineCaptionBody, StyledSinglelineCaptionEnding, } from './Thumbnail.styles';
function CaptionTooltip(_a) {
    var children = _a.children, overlay = _a.overlay, isVisible = _a.isVisible;
    return (React.createElement(Tooltip, { overlay: React.createElement(Tooltip.Content, null, overlay), placement: "bottom", trigger: isVisible ? 'hover' : 'none' }, children));
}
function MultilineCaption(_a) {
    var disabled = _a.disabled, caption = _a.caption, error = _a.error, layout = _a.layout, qa = _a.qa, props = __rest(_a, ["disabled", "caption", "error", "layout", "qa"]);
    var _b = useOverflowObserver(), ref = _b.ref, isOverflowing = _b.isOverflowing;
    return (React.createElement(CaptionTooltip, { overlay: caption, isVisible: isOverflowing },
        React.createElement("span", { "data-qa": qa },
            React.createElement(StyledMultilineCaption, __assign({ ref: ref, disabled: disabled, error: error, layout: layout }, props),
                React.createElement(StyledCaptionText, null, caption)))));
}
function SinglelineCaption(_a) {
    var caption = _a.caption, error = _a.error, disabled = _a.disabled, layout = _a.layout, qa = _a.qa, props = __rest(_a, ["caption", "error", "disabled", "layout", "qa"]);
    var _b = useOverflowObserver(), ref = _b.ref, isOverflowing = _b.isOverflowing;
    var _c = parseFilename(caption), filename = _c.filename, extension = _c.extension, isFilename = _c.isFilename;
    return (React.createElement(CaptionTooltip, { overlay: caption, isVisible: isOverflowing },
        React.createElement(StyledSingleLineCaption, __assign({ error: error, disabled: disabled, layout: layout, "data-qa": qa }, props),
            React.createElement(StyledSinglelineCaptionBody, { ref: ref }, isFilename ? "".concat(filename, ".") : caption),
            isFilename && (React.createElement(StyledSinglelineCaptionEnding, null, extension)))));
}
export function ThumbnailCaption(_a) {
    var layout = _a.layout, disabled = _a.disabled, error = _a.error, caption = _a.caption, hasCaptionPlaceholder = _a.hasCaptionPlaceholder, multiline = _a.multiline, _b = _a.qa, qa = _b === void 0 ? '' : _b, props = __rest(_a, ["layout", "disabled", "error", "caption", "hasCaptionPlaceholder", "multiline", "qa"]);
    if (!caption) {
        var captionPlaceholder = hasCaptionPlaceholder && '- -';
        if (captionPlaceholder) {
            return (React.createElement(StyledPlaceholderCaption, __assign({}, props, { disabled: disabled, error: error, layout: layout, "data-qa": qa }),
                React.createElement(StyledCaptionText, null, captionPlaceholder)));
        }
        return null;
    }
    if (multiline) {
        return (React.createElement(MultilineCaption, __assign({ disabled: disabled, caption: caption, error: error, layout: layout, qa: qa }, props)));
    }
    return (React.createElement(SinglelineCaption, __assign({ caption: caption, disabled: disabled, error: error, layout: layout, qa: qa }, props)));
}
//# sourceMappingURL=ThumbnailCaption.js.map