var _a;
import { getFileExtension } from '../../utils/filename';
export function getIsFilePreviewableAsImage(src) {
    return (src instanceof File &&
        src.type.startsWith('image/') &&
        // not allow previewing vendor image mime types, such as "image/vnd.adobe.photoshop"
        !src.type.startsWith('image/vnd.') &&
        // not allow previewing .tiff images, as a not browser-compatible format
        src.type !== 'image/tiff');
}
var extensions = (_a = {
        image: ['png', 'jpg', 'jpeg', 'gif', 'psd', 'tiff', 'tif', 'bmp'],
        drawing: ['cad', 'dwg'],
        email: ['msg', 'eml'],
        gantt: ['mpp', 'p6', 'xer'],
        zip: ['zip', 'rar', '7zip'],
        xml: ['rtf', 'txt'],
        word: ['doc', 'docx'],
        ini: ['ini', 'xml', 'exe'],
        mov: ['mov', 'avi'],
        pdf: ['pdf'],
        powerpoint: ['ppt', 'pptx'],
        excel: ['csv', 'xls', 'xlsx']
    },
    _a['3d'] = ['stl', 'obj', 'ma', 'fbx', 'dae', '3ds', 'iges', 'step', 'wrl'],
    _a.unknown = [],
    _a);
var extensionsByVariant = Object.entries(extensions);
var variantByExtension = extensionsByVariant.reduce(function (acc, _a) {
    var type = _a[0], exts = _a[1];
    exts.forEach(function (ext) {
        acc[ext] = type;
    });
    return acc;
}, {});
export function getVariantForFilename(filename) {
    var defaultUnknownName = 'unknown';
    try {
        var ext = getFileExtension(filename);
        return ext
            ? variantByExtension[ext] || defaultUnknownName
            : defaultUnknownName;
    }
    catch (_a) {
        return defaultUnknownName;
    }
}
//# sourceMappingURL=Thumbnail.utils.js.map