import { ReactNode } from 'react';
import { DocumentIconVariant } from './DocumentIcon';
export declare type SizeVariant = 'sm' | 'lg';
export declare type LayoutVariant = 'row' | 'column';
export interface QaTags {
    caption?: string;
}
export interface ThumbnailProps {
    /**
     * An image URL or a <Code>File</Code> to generate a preview for
     */
    src?: File | string;
    /**
     * Thumbnail size
     * @default 'lg'
     */
    size?: SizeVariant;
    /**
     * Use "focused" view
     * @default false
     */
    focused?: boolean;
    /**
     * Use "selected" view
     * @default false
     */
    selected?: boolean;
    /**
     * Use "disabled" view
     * @default false
     */
    disabled?: boolean;
    error?: boolean;
    clickable?: boolean;
    /**
     * Thumbnail caption
     * @default ''
     */
    caption?: string;
    /**
     * Show placeholder for caption if it is empty
     * @default false
     */
    hasCaptionPlaceholder?: boolean;
    /**
     * Thumbnail label
     * @default ''
     */
    label?: string;
    className?: string;
    qa?: QaTags;
}
export interface FilePreviewProps {
    file: File;
}
export declare type PlaceholderProps = Omit<ThumbnailProps, 'src'> & {
    /**
     * Unless variant is provided, filename is used
     * to choose a placeholder icon based on extension.
     * E.g. for 'filename="panda.png"', image {' '}
     * variant will be used
     * */
    filename?: string;
    variant?: DocumentIconVariant;
};
export interface MultilineCaptionProps {
    disabled: boolean;
    caption: string;
    error: boolean;
    layout: 'row' | 'column';
    qa: string;
}
export interface SinglelineCaptionProps {
    caption: string;
    disabled: boolean;
    error: boolean;
    layout: 'row' | 'column';
    qa: string;
}
export interface CaptionTooltipProps {
    overlay: string;
    isVisible: boolean;
    children: ReactNode;
}
export interface CaptionProps {
    layout: LayoutVariant;
    caption: string;
    disabled: boolean;
    error: boolean;
    hasCaptionPlaceholder: boolean;
    multiline: boolean;
    qa?: string;
}
export interface LabelProps {
    label: string;
    disabled: boolean;
}
export interface TickIconProps {
    size: SizeVariant;
    selected: boolean;
}
