import { Props } from '../../utils/types';
import { Locale } from '../../state/I18n';
export declare type SegmentType = 'day' | 'month' | 'year';
declare type DateInputVariant = '' | 'error' | 'disabled';
export interface DateSegmentProps {
    disabled?: boolean;
    maxLength: number;
    maxValue: number;
    minValue: number;
    nextRef?: React.RefObject<HTMLDivElement>;
    onChange?: (value: number) => void;
    placeholder: string;
    prevRef?: React.RefObject<HTMLDivElement>;
    tabIndex?: number;
    type: SegmentType;
    value?: number;
}
export interface DateInputConfig {
    onChange: (date: Date | null) => void;
    value?: Date | null;
    log?: string;
}
export interface DateInputApi {
    clear: () => void;
    day: number;
    hasValues: boolean;
    month: number;
    setDay: (value: number) => void;
    setMonth: (value: number) => void;
    setYear: (value: number) => void;
    year: number;
}
interface SegmentConfig {
    maxLength: number;
    placeholder: 'dd' | 'mm' | 'yyyy';
}
export declare type Segments = {
    [key in SegmentType]: SegmentConfig;
};
export declare type DateInputLocales = {
    [key in Locale]: {
        delimiter?: string;
        segments: [SegmentType, SegmentType, SegmentType];
    };
};
export interface DateInputProps extends Props {
    clearRef: React.RefObject<HTMLButtonElement>;
    /**
     * Error variant
     * @default false
     */
    error?: boolean;
    disabled?: boolean;
    /**
     * @param {Date | null} date
     * Change handler for when a valid date is entered
     */
    onChange?: (date: Date | null) => void;
    onChangeSegment?: (type: SegmentType, value: number) => void;
    /**
     * @param {MouseEvent} e
     * Handler for when the clear icon is clicked
     */
    onClear?: (e: React.MouseEvent<HTMLButtonElement>) => void;
    segmentRefs?: {
        segmentOne?: React.RefObject<HTMLDivElement>;
        segmentTwo?: React.RefObject<HTMLDivElement>;
        segmentThree?: React.RefObject<HTMLDivElement>;
    };
    tabIndex?: number;
    /**
     * Date value for the input
     */
    value?: Date;
    variant?: DateInputVariant;
}
export {};
