import React from 'react';
import { NavigationProps } from '../Menu';
import { GroupItem, MultiSelectProps } from '../MultiSelect';
export declare type ChangeEvent = React.ChangeEvent<HTMLInputElement>;
export declare type Option = any;
export declare type GroupOption = any;
export declare type PickedMultiSelectProps = Omit<MultiSelectProps, 'value' | 'options' | 'getId' | 'getLabel' | 'onChange' | 'optionRenderer' | 'getGroup' | 'groupHeaderRenderer'>;
export interface GroupSelectProps extends PickedMultiSelectProps {
    value?: Option[];
    /**
     * Array of available options
     * `{ id: number label: string groupId?: string | number }`
     * `arrayOf: [object]`
     */
    options?: Option[];
    /**
     * Array of available collections, field options contain option id's
     * `{ id: number label: string options: Option[] groupId?: string | number }`
     * `arrayOf: [object]`
     */
    groups?: GroupOption[];
    /**
     * Callback with options selected when selecting or removing an option
     * `(value: T[]) => void`
     */
    onChange?: (value: Option[], event?: Event) => void;
    getId?: (option: Option | GroupOption) => number | string;
    /**
     * Callback for each entry in options to generate the token label, also used for default searching.
     * `(option: T) => string`
     */
    getLabel?: (option: Option | GroupOption) => string;
    /**
     * Callback for each entry in groups for keying and optimizations
     * `(option: T) => Option[]`
     */
    getGroup?: (option: Option | GroupOption) => Option[];
    /**
     * Callback for each entry in groups and options to define relation in optgroups
     * `(option: OptionItem) => number | string`
     */
    getOptGroup?: (option: Option | GroupOption) => number | string;
    onSearch?: (e: ChangeEvent) => void;
    /**
     * Callback for rendering each option
     * `(option: T, props: OptionRendererProps) => React.ReactNode`
     */
    optionRenderer?: (option: Option, props: OptionRendererProps) => React.ReactNode;
    /**
     * Callback for rendering each group option
     * `(groupOption: T, props: OptionRendererProps) => React.ReactNode`
     */
    groupRenderer?: (option: GroupOption, props: OptionRendererProps) => React.ReactNode;
    /**
     * Callback for rendering header for each entry in `optgroups`
     * `(group: GroupItem) => React.ReactNode`
     */
    optGroupRenderer?: (option: GroupItem) => React.ReactNode;
}
export interface OptionRendererProps extends NavigationProps, Required<Pick<GroupSelectProps, 'getId' | 'getLabel'>> {
    value: Option;
    selected?: boolean;
    disabled?: boolean;
}
export interface GroupSelectConfig {
    value: Option[];
    options: Option[];
    groups: GroupOption[];
    getId: (option: Option | GroupOption) => number | string;
    getLabel: (option: Option | GroupOption) => string;
    getGroup: (option: Option | GroupOption) => Option[];
    onChange: (value: Option[]) => void;
    onSearch?: (e: ChangeEvent) => void;
}
