var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import styles from '@procore/core-css/src/components/_typography.scss';
import React from 'react';
import { useDeprecation } from '../../effects/Deprecation';
var classnames = require('classnames/bind');
var cx = classnames.bind(styles);
var availableFonts = Object.keys(styles);
/**
 * @deprecated Please use H1, H2, H3, P, UL, or Typography
 */
export var Font = React.forwardRef(function Font(_a, ref) {
    var children = _a.children, className = _a.className, _b = _a.size, size = _b === void 0 ? 'sm' : _b, _c = _a.weight, weight = _c === void 0 ? 'regular' : _c, _d = _a.fontStyle, fontStyle = _d === void 0 ? '' : _d, _e = _a.variant, variant = _e === void 0 ? 'primary' : _e, props = __rest(_a, ["children", "className", "size", "weight", "fontStyle", "variant"]);
    useDeprecation({
        oldThing: 'Font',
        newThing: 'H1, H2, H3, P, UL, or Typography',
    });
    var style = fontStyle ? "-".concat(fontStyle) : '';
    var fontClassName = "".concat(size, "-").concat(weight).concat(style, "--").concat(variant);
    if (availableFonts.length && availableFonts.indexOf(fontClassName) < 0) {
        console.error("Warning: Font component failed to load class; ".concat(fontClassName, " does not exist."));
    }
    return (React.createElement("span", __assign({ ref: ref, className: cx(fontClassName, className) }, props), children));
});
Font.displayName = 'Font';
export default Font;
//# sourceMappingURL=Font.js.map