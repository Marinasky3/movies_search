var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { isEventSource } from '../../effects/ClickOutside';
import { useI18nContext } from '../../state/I18n';
import { OverlayTrigger } from '../OverlayTrigger';
import { Button as SelectButton } from '../Select';
import { TieredSelectContext } from './TieredSelect';
import { TieredSelectMenu } from './TieredSelectMenu';
var empty = [];
var hideKeys = {
    overlay: ['Escape', 'Esc'],
    target: ['Escape', 'Esc'],
};
export var LeafSelectionTieredSelect = React.forwardRef(function LeafSelectionTieredSelect(_a, ref) {
    var className = _a.className, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.error, error = _c === void 0 ? false : _c, _d = _a.loading, loading = _d === void 0 ? false : _d, onKeyDown = _a.onKeyDown, _e = _a.options, options = _e === void 0 ? empty : _e, _f = _a.value, value = _f === void 0 ? empty : _f, props = __rest(_a, ["className", "disabled", "error", "loading", "onKeyDown", "options", "value"]);
    var _g = React.useContext(TieredSelectContext), afterHide = _g.afterHide, afterShow = _g.afterShow, beforeHide = _g.beforeHide, beforeShow = _g.beforeShow, block = _g.block, getGroupId = _g.getGroupId, getNextGroupId = _g.getNextGroupId, getValueString = _g.getValueString, i18nScope = _g.i18nScope, isLeaf = _g.isLeaf, onChange = _g.onChange, onClear = _g.onClear, onNavigate = _g.onNavigate, onSearch = _g.onSearch, tabIndex = _g.tabIndex;
    var I18n = useI18nContext();
    var tieredSelectMenuRef = React.useRef(null);
    var tieredSelectButtonRef = React.useRef(null);
    var clearRef = React.createRef();
    var _h = React.useState(''), valueString = _h[0], setValueString = _h[1];
    var _j = React.useState(null), currentTier = _j[0], setCurrentTier = _j[1];
    // internal value used for navigation
    var _k = React.useState(value), internalValue = _k[0], setInternalValue = _k[1];
    // value to reset to if navigation occurs but no selection has been made
    var _l = React.useState(value), previousValue = _l[0], setPreviousValue = _l[1];
    // if value prop changes, update value state, current tier, and set button label
    // else open to root
    React.useEffect(function () {
        var lastEntryInValue = value[value.length - 1];
        if (value.length > 0) {
            setInternalValue(value);
            setPreviousValue(value);
            setValueString(getValueString(value));
            // show children of last tier in value if not a leaf node
            // otherwise we want to show the parent of the last tier in value
            if (isLeaf && !isLeaf(lastEntryInValue)) {
                setCurrentTier(getNextGroupId(lastEntryInValue));
            }
            else {
                setCurrentTier(getGroupId(lastEntryInValue));
            }
        }
        else {
            setCurrentTier(null);
            setInternalValue([]);
            setPreviousValue([]);
            setValueString('');
        }
    }, [getGroupId, getValueString, getNextGroupId, isLeaf, value]);
    var internalOnChange = React.useCallback(function (selection) {
        setInternalValue(selection.value);
        setPreviousValue(selection.value);
        setValueString(getValueString(selection.value));
        setCurrentTier(getGroupId(selection.item));
        onChange(selection);
    }, [getGroupId, onChange, getValueString]);
    var internalOnNavigate = React.useCallback(function (nextGroupId, value) {
        setInternalValue(value);
        setCurrentTier(nextGroupId);
        onNavigate && onNavigate(nextGroupId, value);
    }, [onNavigate]);
    var internalOnClear = React.useCallback(function (event) {
        setValueString('');
        setInternalValue([]);
        setPreviousValue([]);
        internalOnNavigate(null, []);
        onClear && onClear(event);
    }, [internalOnNavigate, onClear]);
    var internalOnSearch = React.useCallback(function (event) {
        onSearch && onSearch(event);
    }, [onSearch]);
    var internalBeforeHide = React.useCallback(function (e) {
        var _a;
        var isEscapeKey = e instanceof KeyboardEvent && (e.key === 'Escape' || e.key === 'Esc');
        var isClickOutside = e instanceof MouseEvent &&
            !isEventSource({ current: (_a = tieredSelectMenuRef === null || tieredSelectMenuRef === void 0 ? void 0 : tieredSelectMenuRef.current) === null || _a === void 0 ? void 0 : _a.el }, e);
        var lastValue = previousValue[previousValue.length - 1];
        if (valueString && (isClickOutside || isEscapeKey)) {
            setInternalValue(previousValue);
            if (isLeaf && isLeaf(lastValue)) {
                setCurrentTier(getGroupId(lastValue));
            }
            else {
                setCurrentTier(getNextGroupId(lastValue));
            }
        }
        return beforeHide && beforeHide(e);
    }, [
        beforeHide,
        getGroupId,
        getNextGroupId,
        isLeaf,
        tieredSelectMenuRef,
        previousValue,
        valueString,
    ]);
    return (React.createElement(OverlayTrigger, { afterHide: afterHide, afterShow: afterShow, beforeHide: internalBeforeHide, beforeShow: function (e) {
            return beforeShow && e.target !== clearRef.current && beforeShow(e);
        }, canFlip: true, hideKeys: hideKeys, overlay: React.createElement(TieredSelectMenu, __assign({ currentTier: currentTier, options: options, loading: loading, menuRef: tieredSelectMenuRef, onNavigate: internalOnNavigate, onSearch: internalOnSearch, onChange: internalOnChange, value: internalValue, previousValue: previousValue }, props)), placement: "bottom-left", ref: ref, trigger: "click" },
        React.createElement(SelectButton, { block: block, className: className, clearRef: clearRef, disabled: disabled, error: error, label: valueString, loading: loading, placeholder: I18n.t('placeholder', { scope: i18nScope }), onClear: internalOnClear, ref: tieredSelectButtonRef, tabIndex: tabIndex }, valueString || I18n.t('placeholder', { scope: i18nScope }))));
});
//# sourceMappingURL=LeafSelectionTieredSelect.js.map