import { MenuRef, Selection } from '../MenuImperative/MenuImperative.types';
import { SelectProps } from '../Select';
export declare type GetValueStringFn = (value: any[]) => string | undefined;
export declare type GetValueString = 'full-path' | 'leaf-only' | GetValueStringFn;
export declare type Div = React.ComponentPropsWithoutRef<'div'>;
export declare type Id = number | string | null | undefined;
export interface Tier {
    id?: Id;
    label?: string;
    nextGroupId?: Id;
    groupId?: Id;
}
export interface TierSelection extends Selection {
    value: any[];
}
export interface InternalTieredSelectProps extends Omit<Div, 'onSelect' | 'onChange'> {
    block?: SelectProps['block'];
    disabled?: SelectProps['disabled'];
    error?: SelectProps['error'];
    loading?: SelectProps['loading'];
    options?: any[];
    value?: any[];
}
export interface TieredSelectApi {
    afterHide: SelectProps['afterHide'];
    afterShow: SelectProps['afterShow'];
    beforeHide: SelectProps['beforeHide'];
    beforeShow: SelectProps['beforeShow'];
    block?: boolean;
    /**
     * Callback for using a custom <Code>tier</Code> shape
     * <CodeBlock>{'(tier: any) => Id'}</CodeBlock>
     * Defaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>
     */
    getGroupId: (tier: any) => Id;
    /**
     * Callback for using a custom <Code>tier</Code> shape
     * <CodeBlock>{'(tier: any) => Id'}</CodeBlock>
     * Defaults to <CodeBlock>{'(tier: any) => tier.Id'}</CodeBlock>
     */
    getId: (tier: any) => Id;
    /**
     * Callback for using a custom <Code>tier</Code> shape
     * <CodeBlock>{'(tier: any) => string'}</CodeBlock>
     * Defaults to <CodeBlock>{'(tier: any) => tier.Label'}</CodeBlock>
     */
    getLabel: (tier: any) => string | undefined;
    /**
     * Callback for using a custom <Code>tier</Code> shape
     * <CodeBlock>{'(tier: any) => Id'}</CodeBlock>
     * Defaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>
     */
    getNextGroupId: (tier: any) => Id;
    /**
     * Predefined strings or a callback for using a custom <Code>value</Code>{' '}
     * string
     * <CodeBlock>{'(value: any[]) => string | undefined'}</CodeBlock>
     * Defaults to{' '}
     * <CodeBlock>
     * {
     *     '(value: any[]) => value.map((tier) => getLabel!(tier)).join(" > ")'
     * }
     * </CodeBlock>
     */
    getValueString: GetValueStringFn;
    /**
     * The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings.
     */
    i18nScope: string;
    isTierDisabled?: (tier: any) => boolean | string | undefined;
    isLeaf?: (tier: any) => boolean;
    /**
     * Used to display a loading indicator as the last item of the list. Can
     * be used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}
     * (empty <Code>options</Code> during search async call) to indicate the
     * loading of new items.
     */
    loadingMore?: boolean;
    /**
     * <div>
     *  Callback for selecting an item from the tiered select. Returns the{' '}
     *  <Code>Selection</Code> object from the <Code>Menu</Code> api, along
     *  with the updated <Code>value</Code>
     * </div>
     * <CodeBlock>
     *  {'(Selection: { event, item, group }, value) =>'}
     * </CodeBlock>
     */
    onChange: (selection: TierSelection) => void;
    /**
     * Callback for when the x icon is pressed.
     * <CodeBlock>{'(event) =>'}</CodeBlock>
     */
    onClear?: SelectProps['onClear'];
    /**
     * Callback for when navigation occurs. Triggered by the left and right
     * arrow keys, or clicking a navigable item. Returns the id of the next
     * group that will be navigated to, and the updated path.
     * <CodeBlock>
     *  {'(nextGroupId: string | number | undefined, path: any[]) => '}
     * </CodeBlock>
     */
    onNavigate?: (nextGroupId: Id, value: any[]) => void;
    /**
     * Pass this callback when a quick create experience is desired. Called
     * when the "create" button in quick create mode is clicked. Returns the
     * value of the quick create input.
     * <CodeBlock>{'(string) =>'}</CodeBlock>
     */
    onQuickCreate?: (name: string) => void;
    /**
     * Called when the selection menu is scrolled to the bottom. Can be
     * combined with <Code>loadingMore</Code>
     * for an async infinite scrolling menu.
     * <CodeBlock>{'(event) =>'}</CodeBlock>
     */
    onScrollBottom?: SelectProps['onScrollBottom'];
    /**
     * Called when searching the TieredSelect. Behavior must be controlled by
     * implementor
     * <CodeBlock>{'(event) =>'}</CodeBlock>
     */
    onSearch?: SelectProps['onSearch'];
    tabIndex?: number;
}
export interface TieredSelectProps extends Partial<Omit<TieredSelectApi, 'getValueString'>>, Omit<Div, 'onSelect' | 'onChange'> {
    block?: SelectProps['block'];
    disabled?: SelectProps['disabled'];
    error?: SelectProps['error'];
    getValueString?: GetValueString;
    loading?: SelectProps['loading'];
    /**
     * Flat array of tier objects, this array is used as data for the component
     */
    options?: any[];
    /**
     * If true, any tier is selectable. If false, only leaf nodes are selectable
     * @default true
     */
    selectableTiers?: boolean;
    /**
     * Flat array of tier objects that represents the selected value
     */
    value?: any[];
}
export interface TieredSelectMenuProps extends Omit<Div, 'onSelect' | 'onChange' | 'onDragEnd'> {
    currentTier: Id;
    loading: TieredSelectProps['loading'];
    loadingMore?: TieredSelectProps['loadingMore'];
    menuRef: React.RefObject<MenuRef>;
    onChange: (selection: TierSelection) => void;
    onNavigate: (nextGroupId: Id, value: any[]) => void;
    onSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;
    options: any[];
    previousValue: any[];
    value: any[];
}
export interface ArrowButtonProps {
    onClick?: (event: React.SyntheticEvent) => void;
}
export interface QuickCreateInputProps {
    autoFocus: boolean;
    onSubmit: (name: string) => void;
    placeholder: string;
}
export interface OptionsProps {
    children: React.ReactNode;
    emptyMessage?: string;
}
