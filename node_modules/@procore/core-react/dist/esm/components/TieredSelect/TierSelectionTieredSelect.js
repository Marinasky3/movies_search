var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { ChevronRight, Home, Plus } from '@procore/core-icons/dist';
import React from 'react';
import { isEventSource } from '../../effects/ClickOutside';
import { Box } from '../../layouts/Box';
import { FlexList } from '../../layouts/FlexList';
import { useI18nContext } from '../../state/I18n';
import { Breadcrumbs } from '../Breadcrumbs';
import { Button } from '../Button';
import { Input } from '../Input';
import { MenuImperative } from '../MenuImperative';
import { CloseOnFocus, OverlayTrigger, useOverlayTriggerContext, } from '../OverlayTrigger';
import { Button as SelectButton } from '../Select';
import Spinner from '../Spinner';
import { Typography } from '../Typography/Typography';
import { TieredSelectContext, useHighlightItemEffects } from './TieredSelect';
import { StyledTieredSelect, StyledTieredSelectArrowButton, StyledTieredSelectBreadcrumbs, StyledTieredSelectHome, StyledTieredSelectLoadingMore, StyledTieredSelectOption, StyledTieredSelectOverlay, StyledTieredSelectSpinnerOverlay, } from './TieredSelect.styles';
var empty = [];
var hideKeys = {
    overlay: ['Escape', 'Esc'],
    target: ['Escape', 'Esc'],
};
function ArrowButton(_a) {
    var onClick = _a.onClick, props = __rest(_a, ["onClick"]);
    return (React.createElement(StyledTieredSelectArrowButton, __assign({}, props, { icon: React.createElement(ChevronRight, null), onClick: function (event) {
            event.preventDefault();
            event.stopPropagation();
            onClick && onClick(event);
        }, size: "sm", tabIndex: -1, variant: "tertiary" })));
}
var QuickCreateInput = React.forwardRef(function QuickCreateInput(_a, ref) {
    var autoFocus = _a.autoFocus, onSubmit = _a.onSubmit, placeholder = _a.placeholder;
    function onKeyDown(e) {
        if (e.key === 'Enter') {
            onSubmit(e.currentTarget.value);
        }
    }
    return (React.createElement(Box, { flexGrow: "1", justifyContent: "center", padding: "md" },
        React.createElement(Input, { autoFocus: autoFocus, onKeyDown: onKeyDown, placeholder: placeholder, ref: ref })));
});
function Options(_a) {
    var children = _a.children, emptyMessage = _a.emptyMessage, props = __rest(_a, ["children", "emptyMessage"]);
    if (React.Children.count(children) === 0) {
        return (React.createElement(MenuImperative.Options, null,
            React.createElement(Box, __assign({ paddingLeft: "lg" }, props),
                React.createElement(Typography, { color: "gray45", intent: "small", italic: true }, emptyMessage))));
    }
    return React.createElement(MenuImperative.Options, null, children);
}
var TieredSelectMenu = React.forwardRef(function TieredSelectMenu(_a, ref) {
    var children = _a.children, currentTier = _a.currentTier, loading = _a.loading, loadingMore = _a.loadingMore, menuRef = _a.menuRef, onNavigate = _a.onNavigate, onSearch = _a.onSearch, onChange = _a.onChange, _b = _a.options, options = _b === void 0 ? empty : _b, value = _a.value, previousValue = _a.previousValue, props = __rest(_a, ["children", "currentTier", "loading", "loadingMore", "menuRef", "onNavigate", "onSearch", "onChange", "options", "value", "previousValue"]);
    var _c = React.useContext(TieredSelectContext), getGroupId = _c.getGroupId, getId = _c.getId, getLabel = _c.getLabel, getNextGroupId = _c.getNextGroupId, i18nScope = _c.i18nScope, onQuickCreate = _c.onQuickCreate, onScrollBottom = _c.onScrollBottom;
    var quickCreateRef = React.useRef(null);
    var hide = useOverlayTriggerContext().hide;
    var I18n = useI18nContext();
    var _d = React.useState(false), isQuickCreating = _d[0], setIsQuickCreating = _d[1];
    var _e = React.useState(''), searchValue = _e[0], setSearchValue = _e[1];
    var searchIsEmpty = searchValue === '';
    var lastEntryInValue = value[value.length - 1];
    var internalOnSearch = React.useCallback(function (e) {
        setSearchValue(e.target.value);
        onSearch && onSearch(e);
    }, [onSearch]);
    // When searching (all options have been flattened) we dont filter by id
    var filteredOptions = React.useMemo(function () {
        return searchIsEmpty
            ? options.filter(function (tier) {
                return getGroupId(tier) === currentTier;
            })
            : options;
    }, [currentTier, getGroupId, options, searchIsEmpty]);
    useHighlightItemEffects({
        currentTier: currentTier,
        searchValue: searchValue,
        menuRef: menuRef,
        loading: loading,
        loadingMore: loadingMore,
    });
    var onNavigateHome = React.useCallback(function () {
        var _a;
        onNavigate(null, []);
        (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightFirst();
    }, [menuRef, onNavigate]);
    var onBreadCrumbNavigate = React.useCallback(function (tier) {
        var _a;
        var newTier = value.indexOf(tier);
        onNavigate(getNextGroupId(tier), value.slice(0, newTier + 1));
        (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightFirst();
    }, [getNextGroupId, menuRef, onNavigate, value]);
    function onNavigateForward(tier) {
        var _a;
        if (searchIsEmpty && !isQuickCreating && tier) {
            var newValue = __spreadArray(__spreadArray([], value, true), [tier], false);
            onNavigate(getNextGroupId(tier), newValue);
            (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightFirst();
        }
    }
    /**
     * need to skip back two levels if coming from a leaf node;
     * out from the leaf and then out of the parent. this is because
     * when tiers aren't selectectable we show the parent of the leaf
     */
    function onNavigateBackward() {
        var _a;
        if (value.length !== 0 && searchIsEmpty) {
            var newValue = value.slice(0, Math.max(0, value.length - 1));
            var newTier = value[value.length - 1];
            !isQuickCreating && onNavigate(getGroupId(newTier), newValue);
            (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlightFirst();
        }
    }
    function onKeyDown(e) {
        var _a;
        var tier = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.highlighted();
        if (e.key === 'Right' || e.key === 'ArrowRight') {
            onNavigateForward(tier);
        }
        else if (e.key === 'Left' || e.key === 'ArrowLeft') {
            onNavigateBackward();
        }
    }
    function onTierSelect(selection) {
        var isSameGroup = value.length
            ? getGroupId(lastEntryInValue) === getGroupId(selection.item)
            : false;
        // if the selection is in the same group as the old selection, replace the old selection
        var newValue = isSameGroup
            ? __spreadArray(__spreadArray([], value.slice(0, value.length - 1), true), [selection.item], false) : __spreadArray(__spreadArray([], value, true), [selection.item], false);
        onChange(__assign(__assign({}, selection), { value: newValue }));
        searchValue &&
            internalOnSearch({
                target: { value: '' },
            });
        hide(selection.event);
    }
    function showBreadcrumbs() {
        return value.length && searchIsEmpty;
    }
    var menuEmptyMessage = searchIsEmpty
        ? I18n.t('emptyMessage', { scope: i18nScope })
        : I18n.t('searchEmptyMessage', { scope: i18nScope });
    var handleQuickCreate = React.useCallback(function (e) {
        // stops menu from selecting item and closing on enter press
        e.stopPropagation();
        if (e.key === 'Enter') {
            setIsQuickCreating(true);
        }
    }, [setIsQuickCreating]);
    var onQuickCreateSubmit = React.useCallback(function () {
        onQuickCreate &&
            quickCreateRef.current &&
            onQuickCreate(quickCreateRef.current.value);
        setIsQuickCreating(false);
    }, [onQuickCreate, quickCreateRef, setIsQuickCreating]);
    function isTierSelected(tier) {
        if (previousValue.length) {
            return getId(tier) === getId(previousValue[previousValue.length - 1]);
        }
        return false;
    }
    return (React.createElement(StyledTieredSelectOverlay, { ref: ref, shadowStrength: 2 },
        React.createElement(StyledTieredSelectSpinnerOverlay, { "data-qa": "tiered-select-loading", "data-loading": loading, loading: loading, label: I18n.t('spinnerLabel', { scope: i18nScope }) || '', size: "md" },
            React.createElement(StyledTieredSelect, __assign({ onKeyDown: onKeyDown, onScrollBottom: onScrollBottom, onSelect: onTierSelect, ref: menuRef }, props),
                React.createElement(MenuImperative.Header, null,
                    !isQuickCreating && (React.createElement(MenuImperative.Search, { autoComplete: "false", autoFocus: true, onChange: internalOnSearch, placeholder: I18n.t('searchPlaceholder', {
                            scope: i18nScope,
                        }) })),
                    showBreadcrumbs() ? (React.createElement(StyledTieredSelectBreadcrumbs, { "$nonInteractive": isQuickCreating },
                        React.createElement(Breadcrumbs.Crumb, { onClick: onNavigateHome },
                            React.createElement(StyledTieredSelectHome, { alignItems: "center", justifyContent: "center" },
                                React.createElement(Home, { "data-qa": "tiered-select-home" }))),
                        value.map(function (tier, index, array) {
                            return (React.createElement(Breadcrumbs.Crumb, { active: index === array.length - 1, key: "".concat(getId(tier), "-").concat(index), onClick: function () { return onBreadCrumbNavigate(tier); } }, getLabel(tier)));
                        }))) : null),
                !isQuickCreating ? (React.createElement(Options, { emptyMessage: menuEmptyMessage }, filteredOptions
                    .map(function (tier, index) {
                    return (React.createElement(StyledTieredSelectOption, { item: tier, key: "".concat(getId(tier), "-").concat(index), selected: isTierSelected(tier) },
                        getLabel(tier),
                        (getNextGroupId(tier) || onQuickCreate) && (React.createElement(Box, { paddingLeft: "sm" },
                            React.createElement(ArrowButton, { "data-qa": "tiered-select-arrow", onClick: function () { return onNavigateForward(tier); } })))));
                })
                    .concat(loadingMore && !loading
                    ? [
                        React.createElement(StyledTieredSelectLoadingMore, { "data-qa": "tiered-select-loading-more", key: 'tiered-select-loading-more' },
                            React.createElement(Spinner, { size: "sm" })),
                    ]
                    : []))) : (React.createElement(QuickCreateInput, { autoFocus: isQuickCreating, onSubmit: onQuickCreateSubmit, placeholder: I18n.t('quickCreatePlaceholder', {
                        scope: i18nScope,
                    }), ref: quickCreateRef })),
                onQuickCreate && (React.createElement(MenuImperative.Footer, null, isQuickCreating ? (React.createElement(FlexList, { size: "xs", justifyContent: "flex-end" },
                    React.createElement(Button, { onClick: function () { return setIsQuickCreating(false); }, size: "sm", variant: "tertiary" }, I18n.t('quickCreateCancelLabel', {
                        scope: i18nScope,
                    })),
                    React.createElement(Button, { onClick: onQuickCreateSubmit, size: "sm" }, I18n.t('quickCreateCreateLabel', {
                        scope: i18nScope,
                    })))) : (React.createElement(Button, { block: true, icon: React.createElement(Plus, { size: "md" }), onClick: function () { return setIsQuickCreating(true); }, onKeyDown: handleQuickCreate, size: "sm" }, I18n.t('quickCreateActionLabel', {
                    scope: i18nScope,
                }))))),
                React.createElement(CloseOnFocus, { hide: hide })))));
});
export var TierSelectionTieredSelect = React.forwardRef(function TierSelectionTieredSelect(_a, ref) {
    var className = _a.className, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.error, error = _c === void 0 ? false : _c, _d = _a.loading, loading = _d === void 0 ? false : _d, onKeyDown = _a.onKeyDown, _e = _a.options, options = _e === void 0 ? empty : _e, _f = _a.value, value = _f === void 0 ? empty : _f, props = __rest(_a, ["className", "disabled", "error", "loading", "onKeyDown", "options", "value"]);
    var _g = React.useContext(TieredSelectContext), afterHide = _g.afterHide, afterShow = _g.afterShow, beforeHide = _g.beforeHide, beforeShow = _g.beforeShow, block = _g.block, getLabel = _g.getLabel, getNextGroupId = _g.getNextGroupId, getValueString = _g.getValueString, i18nScope = _g.i18nScope, isLeaf = _g.isLeaf, onChange = _g.onChange, onClear = _g.onClear, onNavigate = _g.onNavigate, onSearch = _g.onSearch, tabIndex = _g.tabIndex;
    var I18n = useI18nContext();
    var tieredSelectMenuRef = React.useRef(null);
    var tieredSelectButtonRef = React.useRef(null);
    var clearRef = React.createRef();
    var _h = React.useState(''), valueString = _h[0], setValueString = _h[1];
    var _j = React.useState(null), currentTier = _j[0], setCurrentTier = _j[1];
    // internal value used for navigation
    var _k = React.useState(value), internalValue = _k[0], setInternalValue = _k[1];
    // value to reset to if navigation occurs but no selection has been made
    var _l = React.useState(value), previousValue = _l[0], setPreviousValue = _l[1];
    // if value prop changes, update value state, current tier, and set button label
    // else open to root
    React.useEffect(function () {
        var lastEntryInValue = value[value.length - 1];
        if (value.length > 0) {
            setInternalValue(value);
            setPreviousValue(value);
            setValueString(getValueString(value));
            // show children of last tier in value
            setCurrentTier(getNextGroupId(lastEntryInValue));
        }
        else {
            setCurrentTier(null);
            setInternalValue([]);
            setPreviousValue([]);
            setValueString('');
        }
    }, [getValueString, getNextGroupId, isLeaf, value]);
    var internalOnChange = React.useCallback(function (selection) {
        setInternalValue(selection.value);
        setPreviousValue(selection.value);
        setValueString(getValueString(selection.value));
        setCurrentTier(getNextGroupId(selection.item));
        onChange(selection);
    }, [getNextGroupId, getValueString, onChange]);
    var internalOnNavigate = React.useCallback(function (nextGroupId, value) {
        setInternalValue(value);
        setCurrentTier(nextGroupId);
        onNavigate && onNavigate(nextGroupId, value);
    }, [onNavigate]);
    var internalOnClear = React.useCallback(function (event) {
        setValueString('');
        setInternalValue([]);
        setPreviousValue([]);
        internalOnNavigate(null, []);
        onClear && onClear(event);
    }, [internalOnNavigate, onClear]);
    var internalOnSearch = React.useCallback(function (event) {
        onSearch && onSearch(event);
    }, [onSearch]);
    var internalBeforeHide = React.useCallback(function (e) {
        var _a;
        var isEscapeKey = e instanceof KeyboardEvent && (e.key === 'Escape' || e.key === 'Esc');
        var isClickOutside = e instanceof MouseEvent &&
            !isEventSource({ current: (_a = tieredSelectMenuRef === null || tieredSelectMenuRef === void 0 ? void 0 : tieredSelectMenuRef.current) === null || _a === void 0 ? void 0 : _a.el }, e);
        var lastValue = previousValue[previousValue.length - 1];
        if (valueString && (isClickOutside || isEscapeKey)) {
            setInternalValue(previousValue);
            setCurrentTier(getNextGroupId(lastValue));
        }
        return beforeHide && beforeHide(e);
    }, [
        beforeHide,
        getNextGroupId,
        tieredSelectMenuRef,
        previousValue,
        valueString,
    ]);
    return (React.createElement(OverlayTrigger, { afterHide: afterHide, afterShow: afterShow, beforeHide: internalBeforeHide, beforeShow: function (e) {
            return beforeShow && e.target !== clearRef.current && beforeShow(e);
        }, canFlip: true, hideKeys: hideKeys, overlay: React.createElement(TieredSelectMenu, __assign({ currentTier: currentTier, options: options, loading: loading, menuRef: tieredSelectMenuRef, onNavigate: internalOnNavigate, onSearch: internalOnSearch, onChange: internalOnChange, value: internalValue, previousValue: previousValue }, props)), placement: "bottom-left", ref: ref, trigger: "click" },
        React.createElement(SelectButton, { block: block, className: className, clearRef: clearRef, disabled: disabled, error: error, label: valueString, loading: loading, placeholder: I18n.t('placeholder', { scope: i18nScope }), onClear: internalOnClear, ref: tieredSelectButtonRef, tabIndex: tabIndex }, valueString || I18n.t('placeholder', { scope: i18nScope }))));
});
//# sourceMappingURL=TierSelectionTieredSelect.js.map