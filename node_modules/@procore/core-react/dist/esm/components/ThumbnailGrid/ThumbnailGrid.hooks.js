import React from 'react';
export var useGridNavigation = function (_a) {
    var initialIndicesRows = _a.indicesRows;
    var _b = React.useState(0), index = _b[0], setIndex = _b[1];
    var _c = React.useState(initialIndicesRows), indicesRows = _c[0], setIndicesRows = _c[1];
    var _d = React.useState(0), gridSize = _d[0], setGridSize = _d[1];
    React.useEffect(function () {
        setGridSize(indicesRows.flat().length);
    }, [indicesRows]);
    React.useEffect(function () {
        setIndex(function (prev) { return (prev < gridSize ? prev : 0); });
    }, [gridSize]);
    var finalIndex = gridSize - 1;
    var up = function (e) {
        e.preventDefault();
        var getNextIndex = function () {
            var rowIndex = indicesRows.findIndex(function (rowCells) {
                return rowCells.includes(index);
            });
            var nextRowIndex = rowIndex - 1;
            if (nextRowIndex < 0) {
                return indicesRows[rowIndex][0];
            }
            var nextRow = indicesRows[nextRowIndex];
            var nextCellIndex = indicesRows[rowIndex].findIndex(function (navigationIndex) { return navigationIndex === index; });
            var nextNavigationIndex = nextRow[nextCellIndex];
            return nextNavigationIndex !== null && nextNavigationIndex !== void 0 ? nextNavigationIndex : nextRow[nextRow.length - 1];
        };
        var nextIndex = getNextIndex();
        setIndex(nextIndex);
        return nextIndex;
    };
    var down = function (e) {
        e.preventDefault();
        var getNextIndex = function () {
            var rowIndex = indicesRows.findIndex(function (rowCells) {
                return rowCells.includes(index);
            });
            var nextRowIndex = rowIndex + 1;
            var finalRowIndex = indicesRows.length - 1;
            if (nextRowIndex > finalRowIndex) {
                var row = indicesRows[rowIndex];
                return row[row.length - 1];
            }
            var nextRow = indicesRows[nextRowIndex];
            var nextCellIndex = indicesRows[rowIndex].findIndex(function (navigationIndex) { return navigationIndex === index; });
            var nextNavigationIndex = nextRow[nextCellIndex];
            return nextNavigationIndex !== null && nextNavigationIndex !== void 0 ? nextNavigationIndex : nextRow[nextRow.length - 1];
        };
        var nextIndex = getNextIndex();
        setIndex(nextIndex);
        return nextIndex;
    };
    var right = function (e) {
        if (index === finalIndex) {
            return index;
        }
        e.preventDefault();
        var nextIndex = index + 1;
        if (nextIndex <= finalIndex) {
            setIndex(nextIndex);
        }
        return nextIndex;
    };
    var left = function (e) {
        if (index === 0) {
            return index;
        }
        e.preventDefault();
        var nextIndex = index - 1;
        if (nextIndex >= 0) {
            setIndex(nextIndex);
        }
        return nextIndex;
    };
    return {
        index: index,
        setIndex: setIndex,
        setIndicesRows: setIndicesRows,
        up: up,
        down: down,
        left: left,
        right: right,
    };
};
//# sourceMappingURL=ThumbnailGrid.hooks.js.map