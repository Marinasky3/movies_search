var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { CaretDown, CaretUp } from '@procore/core-icons/dist';
import React from 'react';
import { useBoundingRect } from '../../state/BoundingRect';
import { useEvent } from '../../state/Event';
import { useI18nContext } from '../../state/I18n';
import { addSubcomponents } from '../../utils/addSubcomponents';
import { MenuImperative } from '../MenuImperative';
import { OverlayTrigger, useOverlayTriggerContext } from '../OverlayTrigger';
import { StyledDropdownTab, StyledLink, StyledOverlay, StyledTab, StyledTabList, StyledTabs, } from './Tabs.styles';
function noop() { }
export var Link = React.forwardRef(function Link(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledLink, __assign({ ref: ref }, props), children));
});
export var Tab = React.forwardRef(function Tab(_a, ref) {
    var _b = _a.active, active = _b === void 0 ? false : _b, children = _a.children, _c = _a.onLayout, onLayout = _c === void 0 ? noop : _c, _d = _a.overflowing, overflowing = _d === void 0 ? false : _d, _e = _a.dropdown, dropdown = _e === void 0 ? false : _e, _f = _a.variant, variant = _f === void 0 ? '' : _f, props = __rest(_a, ["active", "children", "onLayout", "overflowing", "dropdown", "variant"]);
    var _g = useBoundingRect({}), rectRef = _g.ref, rect = _g.rect;
    React.useEffect(function () {
        onLayout(rect);
        return function () {
            // rerun layout with an empty object
            // for proper resize on unmount
            onLayout({});
        };
    }, [rect]);
    return (React.createElement(StyledTab, __assign({}, props, { ref: rectRef, active: active || variant === 'active' }),
        React.createElement("div", { ref: ref }, children)));
});
export var MoreMenu = React.forwardRef(function MoreMenu(_a, ref) {
    var children = _a.children;
    var ctx = useOverlayTriggerContext();
    var menuRef = React.useRef(null);
    React.useEffect(function () {
        var _a, _b, _c, _d;
        (_b = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.el) === null || _b === void 0 ? void 0 : _b.focus();
        (_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.highlightFirst();
        (_d = menuRef.current) === null || _d === void 0 ? void 0 : _d.highlightSelected();
    }, []);
    function onSelect(selection) {
        ctx.hide(selection.event);
    }
    return (React.createElement(StyledOverlay, { ref: ref },
        React.createElement(MenuImperative, { ref: menuRef, onSelect: onSelect },
            React.createElement(MenuImperative.Options, null, React.Children.map(children, function (child, i) {
                if (React.isValidElement(child)) {
                    return (React.createElement(MenuImperative.Item, { item: null, key: i, selected: child.props.active }, React.cloneElement(child, { ref: null })));
                }
            })))));
});
var Tabs_ = React.forwardRef(function Tabs(_a, ref) {
    var children = _a.children, className = _a.className, _b = _a.dark, dark = _b === void 0 ? false : _b, qa = _a.qa, props = __rest(_a, ["children", "className", "dark", "qa"]);
    var i18n = useI18nContext();
    var _c = React.useState([]), rects = _c[0], setRects = _c[1];
    var _d = React.useState(false), moreMenuIsShown = _d[0], setMoreMenuIsShown = _d[1];
    var resize = useEvent({ event: 'resize' }).value;
    var container = useBoundingRect({ dependencies: [resize] });
    var dropdown = useBoundingRect({ dependencies: [resize] });
    var subtotals = rects.reduce(function (_a, rect) {
        var total = _a.total, subtotals = _a.subtotals;
        return ({
            subtotals: __spreadArray(__spreadArray([], subtotals, true), [total + rect.width], false),
            total: total + rect.width,
        });
    }, { subtotals: new Array(), total: 0 }).subtotals;
    var index = subtotals.findIndex(function (val) { return val >= container.rect.width - dropdown.rect.width; });
    var filtered = React.Children.toArray(children).filter(function (child) { return child; });
    var overflowing = filtered.slice(index - 1);
    var isOverflowingActive = React.Children.toArray(overflowing).some(function (child) { return React.isValidElement(child) && child.props.active; });
    return (React.createElement(StyledTabs, __assign({ ref: ref, dark: dark, index: index }, props),
        React.createElement(StyledTabList, { ref: container.ref },
            filtered.map(function (child, i) {
                if (React.isValidElement(child))
                    return React.cloneElement(child, {
                        dark: dark,
                        onLayout: function (rect) {
                            setRects(function (rects) {
                                var oldRects = __spreadArray([], rects, true);
                                oldRects[i] = rect;
                                return oldRects;
                            });
                        },
                    });
            }),
            React.createElement(OverlayTrigger, { beforeShow: function () { return setMoreMenuIsShown(true); }, afterHide: function () { return setMoreMenuIsShown(false); }, trigger: "click", placement: "bottom-right", overlay: React.createElement(MoreMenu, null, overflowing), ref: ref },
                React.createElement(StyledDropdownTab, { ref: dropdown.ref, active: isOverflowingActive, dark: dark },
                    React.createElement(StyledLink, { "data-qa": qa === null || qa === void 0 ? void 0 : qa.more }, i18n.t('core.tabs.more')),
                    moreMenuIsShown ? (React.createElement(CaretUp, { size: "sm" })) : (React.createElement(CaretDown, { size: "sm" })))))));
});
Tabs_.displayName = 'Tabs';
Link.displayName = 'Tabs.Link';
Tab.displayName = 'Tabs.Tab';
export var Tabs = addSubcomponents({
    Link: Link,
    Tab: Tab,
}, Tabs_);
export default Tabs;
//# sourceMappingURL=Tabs.js.map