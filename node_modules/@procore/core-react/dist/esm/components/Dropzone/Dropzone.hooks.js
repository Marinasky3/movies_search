var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
import React from 'react';
import { useDropzone as useDropzoneBase } from 'react-dropzone';
import { useI18nContext } from '../../state/I18n';
import { partition } from '../../utils/partition';
import { MultipleErrors } from './Dropzone';
import { StyledErrorBannerDetails } from './Dropzone.styles';
import { dropErrors, fileRejectionReason, } from './Dropzone.types';
var oneDropAtATimeRejectionReason = 'one-drop-at-a-time';
var dropErrorsByReason = (_a = {},
    _a[fileRejectionReason.maxFiles] = dropErrors.fileAmount,
    _a[fileRejectionReason.maxFileSize] = dropErrors.maxFileSize,
    _a[fileRejectionReason.minFileSize] = dropErrors.minFileSize,
    _a[fileRejectionReason.fileType] = dropErrors.fileType,
    _a);
var getSizeInMB = function (maxSize) { return maxSize / 10e5; };
/**
 * WARNING:
 * Use ACCEPT prop carefully, because mime type determination is not reliable across platforms.
 * Details: https://github.com/react-dropzone/react-dropzone/tree/master/examples/accept#browser-limitations
 */
export var useDropzone = function (_a) {
    if (_a === void 0) { _a = {}; }
    var _b = _a.value, value = _b === void 0 ? [] : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.multiple, multiple = _d === void 0 ? false : _d, _e = _a.noClick, noClick = _e === void 0 ? true : _e, _f = _a.noKeyboard, noKeyboard = _f === void 0 ? true : _f, onDragEnter = _a.onDragEnter, onDragOver = _a.onDragOver, onDragLeave = _a.onDragLeave, onDropRejected = _a.onDropRejected, maxSize = _a.maxFileSize, minSize = _a.minFileSize, _g = _a.maxFileNumber, maxFileNumber = _g === void 0 ? Infinity : _g, _onDrop = _a.onDrop, onDropAccepted = _a.onDropAccepted, props = __rest(_a, ["value", "disabled", "multiple", "noClick", "noKeyboard", "onDragEnter", "onDragOver", "onDragLeave", "onDropRejected", "maxFileSize", "minFileSize", "maxFileNumber", "onDrop", "onDropAccepted"]);
    var I18n = useI18nContext();
    var _h = React.useState([]), acceptedFiles = _h[0], setAcceptedFiles = _h[1];
    var _j = React.useState([]), fileRejections = _j[0], setFileRejections = _j[1];
    var maxFilesRemaining = maxFileNumber - value.length;
    var defaultDropError = {
        type: dropErrors.reset,
        title: '',
        message: '',
    };
    var dropErrorReducer = function (state, action) {
        var rejectedFiles = (React.createElement(StyledErrorBannerDetails, null, fileRejections.map(function (_a) {
            var name = _a.file.name;
            return (React.createElement("li", { key: name }, name));
        })));
        var title = I18n.t('core.dropzone.errorTitle');
        switch (action) {
            case dropErrors.oneFileAtATime:
                return {
                    type: dropErrors.oneFileAtATime,
                    title: '',
                    message: I18n.t('core.dropzone.oneFileAtATimeError'),
                };
            case dropErrors.fileAmount:
                return {
                    type: dropErrors.fileAmount,
                    title: title,
                    message: I18n.t('core.dropzone.standaloneMaxFileNumberError', {
                        maxFiles: maxFileNumber,
                    }),
                    body: rejectedFiles,
                };
            case dropErrors.fileType:
                return {
                    type: dropErrors.fileType,
                    title: title,
                    message: I18n.t('core.dropzone.standaloneUnsupportedFileTypeError'),
                    body: rejectedFiles,
                };
            case dropErrors.maxFileSize:
                return {
                    type: dropErrors.maxFileSize,
                    title: title,
                    message: I18n.t('core.dropzone.standaloneMaxFileSizeError', {
                        sizeInMegabytes: getSizeInMB(maxSize),
                    }),
                    body: rejectedFiles,
                };
            case dropErrors.minFileSize:
                return {
                    type: dropErrors.minFileSize,
                    title: title,
                    message: I18n.t('core.dropzone.standaloneMinFileSizeError', {
                        sizeInMegabytes: getSizeInMB(minSize),
                    }),
                    body: rejectedFiles,
                };
            case dropErrors.multipleErrors:
                return {
                    type: dropErrors.multipleErrors,
                    title: title,
                    message: I18n.t('core.dropzone.multipleErrorsMessage'),
                    body: (React.createElement(MultipleErrors, { fileRejections: fileRejections, maxFiles: maxFileNumber, maxSize: maxSize, minSize: minSize })),
                };
            case dropErrors.reset:
                return __assign({}, defaultDropError);
            default:
                return state;
        }
    };
    var withOneDropAtATimeError = function (file) { return ({
        file: file,
        errors: [
            {
                message: I18n.t('core.dropzone.oneDropAtATimeError'),
                code: oneDropAtATimeRejectionReason,
            },
        ],
    }); };
    var _k = React.useReducer(dropErrorReducer, __assign({}, defaultDropError)), dropError = _k[0], dispatchDropError = _k[1];
    var onDrop = React.useCallback(function (acceptedFiles, rejectedFiles, event) {
        dispatchDropError(dropErrors.reset);
        var droppedFiles = __spreadArray(__spreadArray([], acceptedFiles, true), rejectedFiles.map(function (rej) { return rej.file; }), true);
        if (!multiple && droppedFiles.length > 1) {
            dispatchDropError(dropErrors.oneFileAtATime);
            onDropRejected === null || onDropRejected === void 0 ? void 0 : onDropRejected(droppedFiles.map(withOneDropAtATimeError), event);
            return;
        }
        var allFilesWithRejections = __spreadArray(__spreadArray([], acceptedFiles.map(function (file) { return ({ file: file, errors: [] }); }), true), rejectedFiles, true).map(function (_a, i) {
            var file = _a.file, errors = _a.errors;
            return ({
                file: file,
                errors: i < maxFilesRemaining
                    ? errors
                    : __spreadArray(__spreadArray([], errors, true), [{ message: '', code: fileRejectionReason.maxFiles }], false),
            });
        });
        var _a = partition(function (_a) {
            var errors = _a.errors;
            return errors.length === 0;
        }, allFilesWithRejections), actualAcceptedFiles_ = _a[0], actualRejectedFiles = _a[1];
        var actualAcceptedFiles = actualAcceptedFiles_.map(function (_a) {
            var file = _a.file;
            return file;
        });
        _onDrop === null || _onDrop === void 0 ? void 0 : _onDrop(actualAcceptedFiles, actualRejectedFiles, event);
        setAcceptedFiles(actualAcceptedFiles);
        setFileRejections(actualRejectedFiles);
        if (actualAcceptedFiles.length) {
            onDropAccepted === null || onDropAccepted === void 0 ? void 0 : onDropAccepted(actualAcceptedFiles, event);
        }
        if (actualRejectedFiles.length) {
            onDropRejected === null || onDropRejected === void 0 ? void 0 : onDropRejected(actualRejectedFiles, event);
        }
        var errorCodes = actualRejectedFiles
            .flatMap(function (rejection) { return rejection.errors; })
            .map(function (error) { return error.code; });
        var hasMultipleErrors = new Set(__spreadArray([], errorCodes, true)).size > 1;
        if (hasMultipleErrors) {
            dispatchDropError(dropErrors.multipleErrors);
        }
        else {
            dispatchDropError(dropErrorsByReason[errorCodes[0]]);
        }
    }, [_onDrop, maxFilesRemaining, onDropRejected, onDropAccepted, multiple]);
    var _l = useDropzoneBase(__assign(__assign({}, props), { disabled: disabled, minSize: minSize, maxSize: maxSize, multiple: multiple, onDragEnter: onDragEnter, onDragLeave: onDragLeave, onDragOver: onDragOver, onDrop: onDrop, noClick: noClick, noKeyboard: noKeyboard })), getRootProps = _l.getRootProps, getInputProps = _l.getInputProps, isDragActive = _l.isDragActive, isFileDialogActive = _l.isFileDialogActive, isDragReject = _l.isDragReject, isFocused = _l.isFocused, isDragAccept = _l.isDragAccept, draggedFiles = _l.draggedFiles, open = _l.open, rootRef = _l.rootRef, inputRef = _l.inputRef;
    var dragError = React.useMemo(function () {
        var getFileTypeError = function () {
            return isDragReject
                ? I18n.t('core.dropzone.incorrectFileTypeMessage', {
                    count: draggedFiles.length,
                })
                : '';
        };
        var getFileAmountError = function () {
            var fileLimit = multiple ? maxFilesRemaining : 1;
            var amountError = multiple
                ? I18n.t('core.dropzone.invalidAmountAttachments', {
                    count: maxFileNumber,
                })
                : I18n.t('core.dropzone.incorrectFileNumber');
            return draggedFiles.length > fileLimit ? amountError : '';
        };
        return getFileAmountError() || getFileTypeError();
    }, [
        I18n,
        draggedFiles.length,
        maxFilesRemaining,
        isDragReject,
        maxFileNumber,
        multiple,
    ]);
    return {
        getRootProps: getRootProps,
        getInputProps: getInputProps,
        isDragActive: isDragActive,
        isFileDialogActive: isFileDialogActive,
        isDragReject: isDragReject,
        isFocused: isFocused,
        isDragAccept: isDragAccept,
        draggedFiles: draggedFiles,
        acceptedFiles: acceptedFiles,
        fileRejections: fileRejections,
        open: open,
        rootRef: rootRef,
        inputRef: inputRef,
        multiple: multiple,
        dragError: dragError,
        dropError: dropError,
        dispatchDropError: dispatchDropError,
        disabled: disabled,
    };
};
//# sourceMappingURL=Dropzone.hooks.js.map