import React from 'react';
import { DropzoneInputProps as DropzoneInputPropsBase, DropzoneOptions, DropzoneRootProps as DropzoneRootPropsBase, DropzoneState, FileRejection, FileError as FileRejectionError } from 'react-dropzone';
export declare type DropzoneFile = any;
export declare type FileRejectionReason = FileRejectionError['code'];
export declare const fileRejectionReason: Record<string, FileRejectionReason>;
export { FileRejection, FileRejectionError };
export interface DropzoneErrorBannerProps {
    error: DropzoneHookState['dropError'];
    /**
     * Rejected files and why they were rejected
     * <CodeBlock>
     *  {`{
     *   file: File,
     *   errors: FileError[]
     *  }[]`}
     * </CodeBlock>
     */
    fileRejections: DropzoneHookState['fileRejections'];
    onDismiss: () => void;
    className?: string;
    qa?: {
        showErrorDetails?: string;
        hideError?: string;
    };
}
export interface MultipleErrorsProps {
    fileRejections: FileRejection[];
    maxFiles?: number;
    maxSize?: number;
    minSize?: number;
}
export interface ContainerProps {
    /**
     * Additional props for dropzone container element
     */
    rootProps: DropzoneRootProps;
    /**
     * Returns the props you should apply to the root drop container you render
     */
    getRootProps: DropzoneState['getRootProps'];
    active: boolean;
    /**
     * Enable/disable the dropzone container
     */
    disabled: boolean;
}
export interface ContentProps {
    /**
     * Force icon visibility
     * <Code>NOTICE:</Code> passing <Code>true</Code> or <Code>false</Code>
     * value explicitly will make component ignore resizing.
     */
    isIconVisible: boolean;
    /**
     * Enable/disable the dropzone content
     */
    disabled: boolean;
    contentMessage: React.ReactNode;
}
export interface DropzoneContentProps {
    /**
     * Open the native file selection dialog
     */
    open: () => void;
    /**
     * Enable/disable the dropzone content
     */
    disabled: boolean;
    errorMessage?: string;
}
export interface DropzoneHookProps extends Partial<Omit<DropzoneOptions, 'minSize' | 'maxSize'>> {
    /**
     * Array of already selected items
     */
    value?: DropzoneFile[];
    /**
     * Maximum number files to the dropzone is allowed. All files above the limit
     * will be rejected.
     */
    maxFileNumber?: number;
    /**
     * Minimum file size (in bytes)
     */
    minFileSize?: DropzoneOptions['minSize'];
    /**
     * Maximum file size (in bytes)
     */
    maxFileSize?: DropzoneOptions['maxSize'];
}
export declare const dropErrors: {
    readonly fileType: "FILE_TYPE_ERROR";
    readonly fileAmount: "FILE_AMOUNT_ERROR";
    readonly maxFileSize: "MAX_FILE_SIZE";
    readonly minFileSize: "MIN_FILE_SIZE";
    readonly oneFileAtATime: "ONE_FILE_AT_A_TIME";
    readonly multipleErrors: "MULTIPLE_ERRORS";
    readonly reset: "RESET";
};
export declare type DropErrorType = typeof dropErrors[keyof typeof dropErrors];
export declare type DropError = {
    type: DropErrorType;
    title: string;
    message: string;
    body?: React.ReactNode;
};
export declare type DropzoneHookState = DropzoneState & {
    /**
     * Allow drag 'n' drop (or selection from the file dialog) of multiple files
     * @default false
     * */
    multiple: boolean;
    /**
     * Error message if dragged files is rejected
     * <CodeBlock>
     *  {`{ type: DropErrorType, title: string, message: string }`}
     * </CodeBlock>
     */
    dragError: string;
    /**
     * Error message if dropped files is rejected
     * <CodeBlock>
     *  {`{ type: DropErrorType, title: string, message: string }`}
     * </CodeBlock>
     */
    dropError: DropError;
    /**
     * Enable/disable the dropzone
     * @default false
     */
    disabled: boolean;
    /**
     * Sets <Code>dropError</Code>.
     * <CodeBlock>{'(error: DropErrorType) => void'}</CodeBlock>
     */
    dispatchDropError: (error: DropErrorType) => void;
};
/**
 * WARNING
 * To keep component work as expected according to props passed to `useDropzone` hook
 * Some properties are omitted
 */
declare type FrozenDropzoneRootKeys = 'disabled';
declare type FrozenDropzoneRootProps = {
    [key in FrozenDropzoneRootKeys]?: never;
};
declare type FrozenDropzoneInputKeys = 'accept' | 'multiple' | 'type';
declare type FrozenDropzoneInputProps = {
    [key in FrozenDropzoneInputKeys]: never;
};
export declare type DropzoneRootProps = DropzoneRootPropsBase & FrozenDropzoneRootProps;
export declare type DropzoneInputProps = DropzoneInputPropsBase & FrozenDropzoneInputProps;
export interface QaTags {
    dropzone?: string;
    showErrorDetails?: string;
    hideError?: string;
}
export interface DropzoneProps extends DropzoneHookState {
    /**
     * Render prop to specify a custom dropzone body message
     */
    contentRenderer?: (props: DropzoneContentProps) => React.ReactNode;
    /**
     * <Code>NOTICE:</Code>
     * <br/>
     * <Code>true</Code> - will make Icon always visible, despite the component height
     * <br/>
     * <Code>false</Code> - will make Icon always hide, despite the component height
     * <br/>
     * <Code>undefined</Code> - will look on the component height to decide show or hide Icon
     */
    isIconVisible?: boolean;
    /**
     * Dropzone tooltip content
     */
    tooltip?: React.ReactNode | string;
    /**
     * Additional props for dropzone element
     */
    rootProps?: DropzoneRootProps;
    /**
     * Additional props for input element
     */
    inputProps?: DropzoneInputProps;
    className?: string;
    qa?: QaTags;
}
export interface DropzoneRef {
    rootRef: React.RefObject<HTMLElement>;
    inputRef: React.RefObject<HTMLInputElement>;
    /**
     * Open the native file selection dialog
     */
    open: () => void;
}
