var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { mergeRefs } from '../../effects/mergeRefs';
import { StyledActions } from '../../layouts/Content/Content.styles';
import { addSubcomponents } from '../../utils/addSubcomponents';
import { StyledLinkTile, StyledSelectableTile, StyledInteractableTile, StyledFooter, StyledHeroMedia, StyledHeroText, StyledTileContent, StyledHeroOverlay, } from './Tile.styles';
var heroTextGridTemplateColumns = 'auto 1fr';
var TileContext = React.createContext({
    orientation: 'portrait',
});
var HeroMedia = React.forwardRef(function HeroMedia(_a, ref) {
    var children = _a.children, _b = _a.overlay, overlay = _b === void 0 ? false : _b, onOverlayClick = _a.onOverlayClick, props = __rest(_a, ["children", "overlay", "onOverlayClick"]);
    var orientation = React.useContext(TileContext).orientation;
    var heroRef = React.useRef(null);
    React.useLayoutEffect(function () {
        var _a, _b;
        if (orientation === 'landscape') {
            (_b = (_a = heroRef.current) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.style.removeProperty('--core-tile-grid-template-columns');
        }
    }, [orientation]);
    return (React.createElement(StyledHeroMedia, __assign({ ref: mergeRefs(heroRef, ref), "$orientation": orientation }, props),
        overlay && React.createElement(StyledHeroOverlay, { onClick: onOverlayClick }),
        children));
});
var HeroText = React.forwardRef(function HeroText(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var orientation = React.useContext(TileContext).orientation;
    var heroRef = React.useRef(null);
    React.useLayoutEffect(function () {
        var _a, _b;
        if (orientation === 'landscape') {
            (_b = (_a = heroRef.current) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.style.setProperty('--core-tile-grid-template-columns', heroTextGridTemplateColumns);
        }
    }, [orientation]);
    return (React.createElement(StyledHeroText, __assign({ ref: mergeRefs(heroRef, ref), "$orientation": orientation }, props), children));
});
var Content = React.forwardRef(function Content(props, ref) {
    return React.createElement(StyledTileContent, __assign({ ref: ref }, props));
});
var Footer = React.forwardRef(function Footer(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledFooter, __assign({ ref: ref }, props), children));
});
var Actions = React.forwardRef(function Actions(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(StyledActions, __assign({ ref: ref }, props), children));
});
export var InteractableTile = React.forwardRef(function InteractableTile(_a, ref) {
    var orientation = _a.orientation, children = _a.children, props = __rest(_a, ["orientation", "children"]);
    return (React.createElement(StyledInteractableTile, __assign({ ref: ref, "$orientation": orientation }, props),
        React.createElement(TileContext.Provider, { value: { orientation: orientation } }, children)));
});
export var LinkTile = React.forwardRef(function LinkTile(_a, ref) {
    var orientation = _a.orientation, children = _a.children, props = __rest(_a, ["orientation", "children"]);
    return (React.createElement(StyledLinkTile, __assign({ ref: ref, "$orientation": orientation }, props),
        React.createElement(TileContext.Provider, { value: { orientation: orientation } }, children)));
});
export var SelectableTile = React.forwardRef(function SelectableTile(_a, ref) {
    var orientation = _a.orientation, _b = _a.selected, selected = _b === void 0 ? false : _b, onClick = _a.onClick, onKeyDown = _a.onKeyDown, _c = _a.disabled, disabled = _c === void 0 ? false : _c, children = _a.children, props = __rest(_a, ["orientation", "selected", "onClick", "onKeyDown", "disabled", "children"]);
    return (React.createElement(StyledSelectableTile, __assign({ ref: ref, "$disabled": disabled, "$orientation": orientation, "$selected": selected, tabIndex: !disabled ? 0 : undefined, onClick: function (e) {
            if (!disabled) {
                onClick === null || onClick === void 0 ? void 0 : onClick();
            }
        }, onKeyDown: function (e) {
            var code = e.code;
            if (code === 'Enter' || code === 'Space') {
                onClick === null || onClick === void 0 ? void 0 : onClick();
            }
            onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        } }, props),
        React.createElement(TileContext.Provider, { value: { orientation: orientation } }, children)));
});
var Tile_ = React.forwardRef(function Tile(_a, ref) {
    var _b = _a.variant, variant = _b === void 0 ? 'interactive' : _b, _c = _a.orientation, orientation = _c === void 0 ? 'portrait' : _c, props = __rest(_a, ["variant", "orientation"]);
    switch (variant) {
        case 'interactive':
            return (React.createElement(InteractableTile, __assign({ ref: ref, orientation: orientation }, props)));
        case 'selectable':
            return (React.createElement(SelectableTile, __assign({ ref: ref, orientation: orientation }, props)));
        case 'link':
            return (React.createElement(LinkTile, __assign({ ref: ref, orientation: orientation }, props)));
    }
});
export var Tile = addSubcomponents({ Actions: Actions, Content: Content, Footer: Footer, HeroText: HeroText, HeroMedia: HeroMedia }, Tile_);
//# sourceMappingURL=Tile.js.map