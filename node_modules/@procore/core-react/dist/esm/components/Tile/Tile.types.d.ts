import { AnchorAttributes, DivAttributes, Props } from '../../utils/types';
import React from 'react';
export interface HeroTextProps extends Props {
}
export interface HeroMediaProps extends Props {
    overlay?: boolean;
    onOverlayClick?: React.MouseEventHandler<HTMLDivElement>;
}
export interface TileCommonProps extends Props {
    orientation: 'portrait' | 'landscape';
}
export interface InteractableTileProps extends TileCommonProps, DivAttributes {
    variant?: 'interactive';
}
export interface LinkTileProps extends TileCommonProps, AnchorAttributes {
    variant?: 'link';
}
export interface SelectableTileProps extends TileCommonProps, Omit<DivAttributes, 'onClick'> {
    /**
     * To change tile behaviour
     */
    variant?: 'selectable';
    /**
     * For variant selectable
     * <CodeBlock>{`() : void`}</CodeBlock>A function for controlling{' '}
     * <Code>selected</Code> Tile prop.
     * <br />
     * <br />
     * For variant interactive. There is no restriction for using it with
     * interactive, but interactive means that there is a button or a link
     * inside tile, so be careful with potential clicks inside clicks. And
     * there is also no hover state for interactive.
     * <CodeBlock>{`React.MouseEventHandler<HTMLDivElement>`}</CodeBlock>
     * For variant link:
     * <CodeBlock>{`React.MouseEventHandler<HTMLAnchorElement>`}</CodeBlock>
     */
    onClick?: () => {};
    /**
     * Only with selectable variant.
     * @default false
     */
    selected?: boolean;
    /**
     * Only with selectable variant.
     * @default false
     */
    disabled?: boolean;
}
export declare type TileProps = SelectableTileProps | InteractableTileProps | LinkTileProps;
