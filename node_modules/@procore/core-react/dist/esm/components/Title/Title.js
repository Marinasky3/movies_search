var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { addSubcomponents } from '../../utils/addSubcomponents';
import { slotify } from '../../utils/slotify';
import { StyledText, StyledSubtext, StyledTitle, StyledTitleActions, StyledAssets, StyledTitlePill, StyledTitleContent, } from './Title.styles';
function isValidElement(element) {
    return Boolean(element);
}
var Title_ = React.forwardRef(function Title_(_a, ref) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var _b = slotify(children, {
        pills: TitlePills,
        text: TitleText,
        subtext: TitleSubtext,
        actions: TitleActions,
        assets: TitleAssets,
    }), pills = _b.pills, text = _b.text, subtext = _b.subtext, actions = _b.actions, assets = _b.assets;
    var hasActions = isValidElement(actions.slotChildren);
    var hasAssets = isValidElement(assets.slotChildren);
    var hasPills = isValidElement(pills.slotChildren);
    var hasText = isValidElement(text.slotChildren);
    var hasSubtext = isValidElement(subtext.slotChildren);
    var isEmpty = [hasActions, hasAssets, hasPills, hasText, hasSubtext].every(function (el) { return !el; });
    if (isEmpty) {
        return null;
    }
    return (React.createElement(StyledTitle, __assign({ ref: ref }, props),
        hasAssets && (React.createElement(StyledAssets, __assign({ ref: assets.slotRef }, assets.slotProps), assets.slotChildren)),
        React.createElement(StyledTitleContent, { "$hasActions": hasActions },
            hasText && (React.createElement(StyledText, __assign({ ref: text.slotRef }, text.slotProps), text.slotChildren)),
            hasPills && (React.createElement(StyledTitlePill, __assign({ ref: pills.slotRef }, pills.slotProps), pills.slotChildren)),
            hasSubtext && (React.createElement(StyledSubtext, __assign({ ref: subtext.slotRef }, subtext.slotProps, { color: "gray45" }), subtext.slotChildren))),
        hasActions && (React.createElement(StyledTitleActions, __assign({ ref: actions.slotRef }, actions.slotProps), actions.slotChildren))));
});
var TitlePills = React.forwardRef(function TitlePills() {
    return React.createElement("div", null);
});
var TitleText = React.forwardRef(function TitleText() {
    return React.createElement("div", null);
});
var TitleSubtext = React.forwardRef(function TitleSubtext() {
    return React.createElement("div", null);
});
var TitleActions = React.forwardRef(function TitleActions() {
    return React.createElement("div", null);
});
var TitleAssets = React.forwardRef(function TitleAssets() {
    return React.createElement("div", null);
});
export var Title = addSubcomponents({
    Pills: TitlePills,
    Text: TitleText,
    Subtext: TitleSubtext,
    Actions: TitleActions,
    Assets: TitleAssets,
}, Title_);
//# sourceMappingURL=Title.js.map