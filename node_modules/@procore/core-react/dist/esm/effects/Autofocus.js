var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
export var Autofocus = React.forwardRef(function Autofocus(_a, ref) {
    var children = _a.children, _b = _a.enabled, enabled = _b === void 0 ? true : _b, props = __rest(_a, ["children", "enabled"]);
    var childRef = children.ref;
    var scope = React.createRef();
    useAutofocus({ ref: scope, enabled: enabled });
    useSharedRef({ ref: scope, refs: [ref, childRef] });
    if (React.isValidElement(children)) {
        return React.cloneElement(children, __assign(__assign({}, props), { ref: scope }));
    }
    return children;
});
export function useAutofocus(_a) {
    var _b = _a.enabled, enabled = _b === void 0 ? true : _b, ref = _a.ref;
    React.useLayoutEffect(function () {
        enabled && ref && ref.current && ref.current.focus();
    }, [ref.current]);
}
// ==========
// SHARED REF
// ==========
// TODO: Move to own hook
function useSharedRef(_a) {
    var ref = _a.ref, refs = _a.refs;
    React.useLayoutEffect(function () {
        refs.forEach(function (reference) {
            if (reference) {
                if (typeof reference === 'function') {
                    reference;
                    reference(ref.current);
                }
                else {
                    reference.current = ref.current;
                }
            }
        });
    }, [ref]);
}
//# sourceMappingURL=Autofocus.js.map