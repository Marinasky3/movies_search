var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useDelayedCallback } from '../state/DelayedCallback';
import { useTimer } from '../state/Timer';
/* HOOK */
export function useDelayedToggle(_a) {
    var _b = _a.beforeDisable, beforeDisable = _b === void 0 ? function () { return true; } : _b, _c = _a.beforeEnable, beforeEnable = _c === void 0 ? function () { return true; } : _c, _d = _a.disableDelay, disableDelay = _d === void 0 ? 0 : _d, _e = _a.enableDelay, enableDelay = _e === void 0 ? 0 : _e, _f = _a.isEnabled, isEnabled = _f === void 0 ? false : _f, onDisable = _a.onDisable, onEnable = _a.onEnable, _g = _a.timer, timer = _g === void 0 ? useTimer({}) : _g;
    var handleEnable = React.useCallback(function () {
        timer.reset();
        return true;
    }, [timer]);
    var handleCancel = React.useCallback(function () {
        timer.cancel();
        return false;
    }, [timer]);
    var enable = useDelayedCallback({
        after: onEnable,
        before: isEnabled ? handleEnable : beforeEnable,
        delay: enableDelay,
        timer: timer,
    });
    var disable = useDelayedCallback({
        after: onDisable,
        before: isEnabled ? beforeDisable : handleCancel,
        delay: disableDelay,
        timer: timer,
    });
    return {
        disable: disable,
        enable: enable,
        toggle: isEnabled ? disable : enable,
    };
}
/* DECORATOR */
export function withDelayedToggle(config) {
    return function (Component) {
        return function DelayedToggleComponent(props) {
            return (React.createElement(Component, __assign({}, props, { delayedToggle: useDelayedToggle(__assign(__assign({}, config), props.DelayedToggle)) })));
        };
    };
}
/* RENDER PROP */
export var DelayedToggle = React.forwardRef(function DelayedToggle(props, ref) {
    var children = props.children, config = __rest(props, ["children"]);
    var toggle = useDelayedToggle(config);
    var element = typeof children === 'function'
        ? children(toggle)
        : children;
    return element && React.cloneElement(element, { ref: ref });
});
/* CONTEXT */
var noop = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in an `<DelayedToggleProvider>`"));
}; };
export var initDelayedToggle = {
    disable: noop('disable'),
    enable: noop('enable'),
    toggle: noop('toggle'),
};
export var DelayedToggleContext = React.createContext(initDelayedToggle);
export function DelayedToggleProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(DelayedToggleContext.Provider, { value: useDelayedToggle(props) }, children));
}
export function useDelayedToggleContext() {
    return React.useContext(DelayedToggleContext);
}
export var consumeDelayedToggle = useDelayedToggleContext;
//# sourceMappingURL=DelayedToggle.js.map