import React from 'react';
export declare type Scope = Window | React.RefObject<HTMLElement> | React.RefObject<HTMLElement>[];
export interface Config {
    dependencies?: any[];
    event: string;
    handler: React.EventHandler<any>;
    options?: AddEventListenerOptions;
    scope?: Scope;
    noopHandler?: boolean;
}
export interface EventCallbackConfig {
    handler: React.EventHandler<any>;
    dependencies?: Array<any>;
}
export declare function useLayoutEventListener({ dependencies, event, handler, options, scope, noopHandler, }: Config): void;
export declare function useEventListener({ dependencies, event, handler, options, scope, noopHandler, }: Config): void;
export declare function useEventCallback({ handler, dependencies, }: EventCallbackConfig): React.EventHandler<any>;
