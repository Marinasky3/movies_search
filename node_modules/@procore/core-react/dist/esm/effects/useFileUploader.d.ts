import { Method } from 'axios';
export declare type GetEndpoint = (file: File) => string;
export declare type GetMethod = (file: File) => Method;
export declare type GetPayload = (file: File) => FormData;
export declare type GetPayloadKey = (file: File) => string;
export declare type GetHeaders = (file: File) => Record<string, string>;
declare type UploadTargetId = string | number;
declare type UploadTarget = {
    id: UploadTargetId;
    blob: File;
};
interface UploadFileCallbacks {
    onProgress: (progress: number) => void;
    onSuccess: (response: unknown) => void;
    onError: (error: unknown) => void;
}
export interface UploadFile {
    (file: File, callbacks: UploadFileCallbacks): void;
}
export interface FileUploaderProps {
    getEndpoint?: GetEndpoint;
    getMethod?: GetMethod;
    getPayload?: GetPayload;
    getPayloadKey?: GetPayloadKey;
    getHeaders?: GetHeaders;
    uploadFile?: UploadFile;
}
export interface FileUploader {
    uploadFiles: (files: UploadTarget[], { onCompleteAll, onComplete, onError, onProgress, }: {
        onCompleteAll?: () => void;
        onComplete?: (fileId: UploadTargetId, response: unknown) => void;
        onError?: (fileId: UploadTargetId, error: unknown) => void;
        onProgress?: (fileId: UploadTargetId, progress: number) => void;
    }) => void;
}
export declare function useFileUploader({ getEndpoint: externalGetEndpoint, getMethod, getPayload, getPayloadKey, getHeaders, uploadFile, }: FileUploaderProps): FileUploader;
export {};
