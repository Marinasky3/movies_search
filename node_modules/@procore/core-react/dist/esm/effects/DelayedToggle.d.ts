import React from 'react';
import { BeforeCallback } from '../state/DelayedCallback';
import { TimerApi } from '../state/Timer';
export declare type Callback = () => void;
export interface DelayedToggleConfig {
    beforeDisable?: BeforeCallback;
    beforeEnable?: BeforeCallback;
    disableDelay?: number;
    enableDelay?: number;
    isEnabled?: boolean;
    onDisable: Callback;
    onEnable: Callback;
    timer?: TimerApi;
}
export interface DelayedToggleProps extends DelayedToggleConfig {
    children: React.ReactNode;
}
interface DelayedToggleRenderProps extends DelayedToggleConfig {
    children: React.ReactElement | ((props: Api) => React.ReactElement);
}
export interface Api {
    disable: (event: any) => any;
    enable: (event: any) => any;
    toggle: (event: any) => any;
}
export declare function useDelayedToggle({ beforeDisable, beforeEnable, disableDelay, enableDelay, isEnabled, onDisable, onEnable, timer, }: DelayedToggleConfig): Api;
export declare function withDelayedToggle<T extends {}>(config: DelayedToggleConfig): (Component: React.ComponentType<T>) => (props: T & {
    DelayedToggle: DelayedToggleConfig;
}) => JSX.Element;
export declare const DelayedToggle: React.ForwardRefExoticComponent<DelayedToggleRenderProps & React.RefAttributes<HTMLElement>>;
export declare const initDelayedToggle: Api;
export declare const DelayedToggleContext: React.Context<Api>;
export declare function DelayedToggleProvider({ children, ...props }: DelayedToggleProps): JSX.Element;
export declare function useDelayedToggleContext(): Api;
export declare const consumeDelayedToggle: typeof useDelayedToggleContext;
export {};
