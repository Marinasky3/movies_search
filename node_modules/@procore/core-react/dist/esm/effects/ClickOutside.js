import { useEventListener } from './EventListener';
// to support MenuRef had to change to any. Could manually do <HTMLElement & MenuRef> but seems brittle
export function isEventSource(ref, event) {
    if ((ref === null || ref === void 0 ? void 0 : ref.current) &&
        event &&
        (event.target instanceof HTMLElement || event.target instanceof SVGElement)) {
        return ref.current.contains(event.target);
    }
    else {
        return false;
    }
}
export function useClickOutside(_a) {
    var _b = _a.refs, refs = _b === void 0 ? [] : _b, onClickOutside = _a.onClickOutside;
    var handler = function (event) {
        if (onClickOutside && !refs.find(function (ref) { return isEventSource(ref, event); })) {
            onClickOutside(event);
        }
    };
    var options = { capture: true };
    useEventListener({ event: 'click', handler: handler, options: options });
    useEventListener({ event: 'touchend', handler: handler, options: options });
}
//# sourceMappingURL=ClickOutside.js.map