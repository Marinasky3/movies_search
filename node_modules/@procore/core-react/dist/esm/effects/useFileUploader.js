var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import axios from 'axios';
import { isFunction } from 'formik';
import { runInQueue } from '../utils/runInQueue';
// max number of concurrent connections in most modern browsers
var maxConcurrentUpload = 6;
var progressUpdateInterval = 750;
function coroutine(generatorFunction) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var generatorObject = generatorFunction.apply(void 0, args);
        generatorObject.next();
        return generatorObject;
    };
}
function uploadQueue() {
    return __asyncGenerator(this, arguments, function uploadQueue_1() {
        var uploadProcess;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    uploadProcess = function () { return Promise.resolve(); };
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 5];
                    return [4 /*yield*/, __await(uploadProcess())];
                case 2: return [4 /*yield*/, __await.apply(void 0, [_a.sent()])];
                case 3: return [4 /*yield*/, _a.sent()];
                case 4:
                    uploadProcess = _a.sent();
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/];
            }
        });
    });
}
var queue = coroutine(uploadQueue)();
export function useFileUploader(_a) {
    var _this = this;
    var externalGetEndpoint = _a.getEndpoint, getMethod = _a.getMethod, getPayload = _a.getPayload, getPayloadKey = _a.getPayloadKey, getHeaders = _a.getHeaders, uploadFile = _a.uploadFile;
    if (!externalGetEndpoint && !uploadFile) {
        throw new Error('FileSelect.LocalSource: neither "getEndpoint" nor "uploadFile" is defined');
    }
    return {
        uploadFiles: function (files, _a) {
            var onCompleteAll = _a.onCompleteAll, onComplete = _a.onComplete, onError = _a.onError, onProgress = _a.onProgress;
            return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, queue.next(function () { return __awaiter(_this, void 0, void 0, function () {
                                var uploadProgressState, updateProgress, completeProgressUpdate, notifyProgress, upload, progressNotifierId;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            uploadProgressState = new Map();
                                            updateProgress = function (id, progress) {
                                                var _a;
                                                var isCompleted = ((_a = uploadProgressState.get(id)) === null || _a === void 0 ? void 0 : _a.done) || false;
                                                if (!isCompleted) {
                                                    uploadProgressState.set(id, {
                                                        progress: progress,
                                                        done: isCompleted,
                                                    });
                                                }
                                            };
                                            completeProgressUpdate = function (fileId) {
                                                uploadProgressState.set(fileId, {
                                                    progress: 100,
                                                    done: true,
                                                });
                                            };
                                            notifyProgress = function () {
                                                if (isFunction(onProgress)) {
                                                    uploadProgressState.forEach(function (_a, fileId) {
                                                        var progress = _a.progress, done = _a.done;
                                                        if (!done) {
                                                            onProgress(fileId, progress);
                                                        }
                                                    });
                                                }
                                            };
                                            upload = function (file) { return __awaiter(_this, void 0, void 0, function () {
                                                var getEndpoint, execFileUpload, response, err_1;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            getEndpoint = externalGetEndpoint;
                                                            execFileUpload = uploadFile !== null && uploadFile !== void 0 ? uploadFile : uploadFileViaNetwork.bind(null, {
                                                                getEndpoint: getEndpoint,
                                                                getMethod: getMethod,
                                                                getPayload: getPayload,
                                                                getPayloadKey: getPayloadKey,
                                                                getHeaders: getHeaders,
                                                            });
                                                            _a.label = 1;
                                                        case 1:
                                                            _a.trys.push([1, 3, 4, 5]);
                                                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                                                    execFileUpload(file.blob, {
                                                                        onSuccess: resolve,
                                                                        onProgress: function (progress) {
                                                                            updateProgress(file.id, progress);
                                                                        },
                                                                        onError: reject,
                                                                    });
                                                                })];
                                                        case 2:
                                                            response = _a.sent();
                                                            onComplete === null || onComplete === void 0 ? void 0 : onComplete(file.id, response);
                                                            return [3 /*break*/, 5];
                                                        case 3:
                                                            err_1 = _a.sent();
                                                            onError === null || onError === void 0 ? void 0 : onError(file.id, err_1);
                                                            return [3 /*break*/, 5];
                                                        case 4:
                                                            completeProgressUpdate(file.id);
                                                            return [7 /*endfinally*/];
                                                        case 5: return [2 /*return*/];
                                                    }
                                                });
                                            }); };
                                            progressNotifierId = setInterval(notifyProgress, progressUpdateInterval);
                                            return [4 /*yield*/, Promise.all(runInQueue(files, upload, maxConcurrentUpload))];
                                        case 1:
                                            _a.sent();
                                            clearInterval(progressNotifierId);
                                            onCompleteAll === null || onCompleteAll === void 0 ? void 0 : onCompleteAll();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        },
    };
}
function getDefaultPayload(key, file) {
    var payload = new FormData();
    payload.append(key, file);
    return payload;
}
function uploadFileViaNetwork(_a, file, _b) {
    var getEndpoint = _a.getEndpoint, _c = _a.getMethod, getMethod = _c === void 0 ? function () { return 'POST'; } : _c, _d = _a.getHeaders, getHeaders = _d === void 0 ? function () { return ({}); } : _d, getPayload = _a.getPayload, _e = _a.getPayloadKey, getPayloadKey = _e === void 0 ? function () { return 'file'; } : _e;
    var onProgress = _b.onProgress, onSuccess = _b.onSuccess, onError = _b.onError;
    return __awaiter(this, void 0, void 0, function () {
        var endpoint, method, headers, payload, response, err_2;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    endpoint = getEndpoint(file);
                    method = getMethod(file);
                    headers = getHeaders(file);
                    payload = isFunction(getPayload)
                        ? getPayload(file)
                        : getDefaultPayload(getPayloadKey(file), file);
                    _f.label = 1;
                case 1:
                    _f.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios({
                            url: endpoint,
                            method: method,
                            data: payload,
                            headers: headers,
                            onUploadProgress: function (e) {
                                var progress = Math.floor((e.loaded / e.total) * 100);
                                onProgress(progress);
                            },
                        })];
                case 2:
                    response = _f.sent();
                    onSuccess(response.data);
                    return [3 /*break*/, 4];
                case 3:
                    err_2 = _f.sent();
                    onError(err_2);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=useFileUploader.js.map