var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
// TODO this is kind of hacky and just to satisfy gatsby. There are other usages of
// window in the library which don't trigger this error, so we should probably figure
// out what's going on here
function getWindow() {
    if (typeof window !== 'undefined') {
        return window;
    }
}
export function useLayoutEventListener(_a) {
    var _b = _a.dependencies, dependencies = _b === void 0 ? [] : _b, event = _a.event, handler = _a.handler, _c = _a.options, options = _c === void 0 ? {} : _c, scope = _a.scope, _d = _a.noopHandler, noopHandler = _d === void 0 ? false : _d;
    if (!event) {
        console.warn("\"event\" option missing, no listeners added");
    }
    else if (!handler) {
        console.warn("\"handler\" option missing, no listeners added");
    }
    var actualScope = scope === getWindow() || !scope
        ? { current: getWindow() }
        : scope || {};
    var listener = useEventCallback({ handler: handler, dependencies: dependencies });
    React.useLayoutEffect(function () {
        if (noopHandler) {
            return;
        }
        var current = actualScope.current;
        if (current) {
            current.addEventListener(event, listener, options);
            return function () { return current.removeEventListener(event, listener, options); };
        }
    }, [noopHandler, event, listener, actualScope.current]);
}
export function useEventListener(_a) {
    var _b = _a.dependencies, dependencies = _b === void 0 ? [] : _b, event = _a.event, handler = _a.handler, _c = _a.options, options = _c === void 0 ? {} : _c, scope = _a.scope, _d = _a.noopHandler, noopHandler = _d === void 0 ? false : _d;
    if (!event) {
        console.warn("\"event\" option missing, no listeners added");
    }
    else if (!handler) {
        console.warn("\"handler\" option missing, no listeners added");
    }
    var actualScope = scope === getWindow() || !scope
        ? { current: getWindow() }
        : scope || {};
    var listener = useEventCallback({ handler: handler, dependencies: dependencies });
    React.useEffect(function () {
        if (noopHandler) {
            return;
        }
        var current = actualScope.current;
        if (current) {
            current.addEventListener(event, listener, options);
            return function () { return current.removeEventListener(event, listener, options); };
        }
    }, [noopHandler, event, listener, actualScope.current]);
}
export function useEventCallback(_a) {
    var handler = _a.handler, _b = _a.dependencies, dependencies = _b === void 0 ? [] : _b;
    var ref = React.useRef(handler);
    React.useLayoutEffect(function () {
        ref.current = handler;
    }, __spreadArray([handler], dependencies, true));
    return React.useCallback(function (event) { return ref.current(event); }, []);
}
//# sourceMappingURL=EventListener.js.map