var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ChevronDown, ChevronRight } from '@procore/core-icons/dist';
import cx from 'classnames';
import React from 'react';
import { ulid } from 'ulid';
import { Title } from '../../components/Title';
import { Button } from '../../components/Button';
import { H2, H3 } from '../../components/Semantic';
import { StyledSection, StyledSectionInner, StyledSectionHeader, StyledSectionCollapseHeading, StyledSectionContentRegion, sectionClassnames, StyledTitle, } from './Section.styles';
function H4(props) {
    return React.createElement(H3, __assign({ as: "h4" }, props));
}
var isFunction = function (obj) { return typeof obj === 'function'; };
// Header levels start at level 2
export var LevelContext = React.createContext(2);
var SectionContext = React.createContext({
    open: {},
    setSection: function () { },
    toggleSection: function () { },
});
export var SectionProvider = function (_a) {
    var children = _a.children;
    var _b = React.useState({}), open = _b[0], setSectionsOpen = _b[1];
    var toggleSection = function (id) {
        return setSectionsOpen(function (prev) {
            var _a;
            return (__assign(__assign({}, prev), (_a = {}, _a[id] = !prev[id], _a)));
        });
    };
    var setSection = function (id, open) {
        return setSectionsOpen(function (prev) {
            var _a;
            return (__assign(__assign({}, prev), (_a = {}, _a[id] = open, _a)));
        });
    };
    return (React.createElement(SectionContext.Provider, { value: {
            open: open,
            toggleSection: toggleSection,
            setSection: setSection,
        } }, children));
};
export var Section = React.forwardRef(function Section(_a, ref) {
    var _b;
    var actions = _a.actions, children = _a.children, className = _a.className, expandId = _a.expandId, heading = _a.heading, _c = _a.initialIsOpen, initialIsOpen = _c === void 0 ? true : _c, pills = _a.pills, subtext = _a.subtext, assets = _a.assets, props = __rest(_a, ["actions", "children", "className", "expandId", "heading", "initialIsOpen", "pills", "subtext", "assets"]);
    var level = React.useContext(LevelContext);
    var sections = React.useContext(SectionContext);
    var toggleOpen = React.useCallback(function () {
        if (expandId) {
            sections.toggleSection(expandId);
        }
    }, [expandId]);
    var open = expandId ? sections.open[expandId] : true;
    React.useEffect(function () {
        if (expandId && open === undefined) {
            sections.setSection(expandId, initialIsOpen);
        }
    }, []);
    var _d = React.useMemo(function () {
        return {
            contentRegionId: "content-".concat(ulid()),
            headingTextId: "heading-".concat(ulid()),
        };
    }, []), contentRegionId = _d.contentRegionId, headingTextId = _d.headingTextId;
    var Heading = level === 2 ? H2 : level === 3 ? H3 : H4;
    var expandClosed = !open || !children;
    var divide = level >= 3 || !heading;
    var hasHeader = heading || actions;
    return (React.createElement(LevelContext.Provider, { value: level + 1 },
        React.createElement(StyledSection, __assign({ ref: ref, className: cx(className, (_b = {},
                _b[sectionClassnames.divide] = divide,
                _b[sectionClassnames.levelAnonymous] = !heading,
                _b[sectionClassnames.level(level)] = heading && level,
                _b)) }, props),
            React.createElement(StyledSectionInner, null,
                hasHeader ? (React.createElement(StyledSectionHeader, null,
                    expandId ? (React.createElement(StyledSectionCollapseHeading, { "aria-labelledby": headingTextId, "aria-level": level, role: "heading" },
                        React.createElement(Button, { "aria-controls": contentRegionId, "aria-expanded": open, "aria-labelledby": headingTextId, icon: open ? React.createElement(ChevronDown, null) : React.createElement(ChevronRight, null), onClick: toggleOpen, variant: "tertiary" }))) : null,
                    React.createElement(StyledTitle, null,
                        React.createElement(Title.Text, null, heading && (React.createElement(Heading, { "aria-hidden": expandId ? true : false, id: headingTextId }, heading))),
                        React.createElement(Title.Subtext, null, subtext),
                        React.createElement(Title.Pills, null, pills),
                        React.createElement(Title.Actions, null, isFunction(actions)
                            ? actions({ open: open })
                            : actions),
                        React.createElement(Title.Assets, null, assets)))) : null,
                React.createElement(StyledSectionContentRegion, { "aria-hidden": !open, id: contentRegionId, role: "region", "$closed": expandClosed, "$noHeader": !hasHeader }, open ? children : null)))));
});
Section.displayName = 'Section';
//# sourceMappingURL=Section.js.map