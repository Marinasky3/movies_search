var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Box } from '../Box';
import { StyledFlex } from './FlexList.styles';
function getSingleSize(size) {
    if (size === void 0) { size = ''; }
    return size.split(' ')[0];
}
function getItemMargin(direction, size) {
    return direction.includes('row') ? "0 ".concat(size) : "".concat(size, " 0");
}
function getMargin(direction, space, size) {
    if (size === void 0) { size = 'md'; }
    if (space === undefined) {
        return { margin: getItemMargin(direction, size) };
    }
    if (space && direction.includes('row')) {
        return { marginRight: space };
    }
    if (space && direction.includes('column')) {
        return { marginBottom: space };
    }
    return {};
}
export var FlexList = React.forwardRef(function FlexList(_a, ref) {
    var boxProps = _a.boxProps, children = _a.children, _b = _a.direction, direction = _b === void 0 ? 'row' : _b, _c = _a.size, size = _c === void 0 ? 'md' : _c, space = _a.space, props = __rest(_a, ["boxProps", "children", "direction", "size", "space"]);
    var singleSize = React.useMemo(function () { return getSingleSize(size); }, [size]);
    var margin = React.useMemo(function () { return getMargin(direction, space, singleSize); }, [
        direction,
        space,
        singleSize,
    ]);
    return (React.createElement(StyledFlex, __assign({}, props, { ref: ref, direction: direction, "$direction": direction }), React.Children.toArray(children)
        .filter(function (child) { return child; })
        .map(function (child, i) {
        return child && (React.createElement(Box, __assign({}, boxProps, margin, { key: child.key || i }), child));
    })));
});
FlexList.displayName = 'FlexList';
// TODO remove default exports
export default FlexList;
//# sourceMappingURL=FlexList.js.map