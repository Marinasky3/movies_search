var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { addSubcomponents } from '../../utils/addSubcomponents';
import { NextGrid } from '../NextGrid';
import { StyledPageHeader, StyledBody, StyledAside, StyledPageMain, StyledPageContainer, StyledPageTitle, StyledPageTabs, StyledPageBanner, StyledPageBreadcrumbs, StyledAsidePanel, StyledFooter, } from './PageLayout.styles';
import { mergeRefs } from '../../effects/mergeRefs';
import { pageLayoutRootDataAttr } from './PageLayout.constants';
import { useResize } from '../../effects/Resize';
import { useScroll } from '../../effects/Scroll';
import Flex from '../Flex';
export var PageContext = React.createContext({
    bodyRef: React.createRef(),
    footerRef: React.createRef(),
    aside: {
        open: function () { },
        close: function () { },
        isOpen: false,
    },
});
function getIsIntersectingVertically(upperEl, lowerEl) {
    return (upperEl.getBoundingClientRect().bottom > lowerEl.getBoundingClientRect().top);
}
function getIsIntersectingHorizontally(leftEl, rightEl) {
    return (leftEl.getBoundingClientRect().right > rightEl.getBoundingClientRect().left);
}
var PageGrid = function (_a) {
    var gutterX = _a.gutterX, props = __rest(_a, ["gutterX"]);
    return React.createElement(NextGrid, __assign({ gutterX: gutterX !== null && gutterX !== void 0 ? gutterX : 'lg' }, props));
};
var PageHeader = React.forwardRef(function PageHeader(_a, ref) {
    var transparent = _a.transparent, props = __rest(_a, ["transparent"]);
    return React.createElement(StyledPageHeader, __assign({ "$transparent": transparent }, props, { ref: ref }));
});
var PageBody = React.forwardRef(function PageBody(props, ref) {
    var bodyRef = React.useContext(PageContext).bodyRef;
    return React.createElement(StyledBody, __assign({}, props, { ref: mergeRefs(ref, bodyRef) }));
});
var PageFooter = React.forwardRef(function PageFooter(props, ref) {
    var _a = React.useContext(PageContext), bodyRef = _a.bodyRef, footerRef = _a.footerRef, aside = _a.aside;
    var _b = React.useState(false), isIntersecting = _b[0], setIsIntersecting = _b[1];
    function calculateIntersections() {
        if (!footerRef.current || !bodyRef.current) {
            return;
        }
        setIsIntersecting(getIsIntersectingVertically(bodyRef.current, footerRef.current));
    }
    React.useEffect(calculateIntersections, []);
    useScroll({ onScroll: calculateIntersections });
    useResize({ onResize: calculateIntersections });
    return (React.createElement(React.Fragment, null,
        React.createElement(StyledFooter, __assign({}, props, { "$isAsideOpen": aside.isOpen, "$hasShadow": isIntersecting, ref: mergeRefs(ref, footerRef) }))));
});
var PageAside = React.forwardRef(function PageAside(_a, ref) {
    var children = _a.children, controlledIsOpen = _a.open, props = __rest(_a, ["children", "open"]);
    var _b = React.useContext(PageContext).aside, isOpen = _b.isOpen, open = _b.open, close = _b.close;
    var footerRef = React.useContext(PageContext).footerRef;
    var innerRef = React.useRef(null);
    var upperRef = React.useRef(null);
    var lowerRef = React.useRef(null);
    var _c = React.useState(0), topOffset = _c[0], setTopOffset = _c[1];
    var _d = React.useState(0), bottomOffset = _d[0], setBottomOffset = _d[1];
    React.useEffect(function () {
        if (controlledIsOpen) {
            open();
        }
        else {
            close();
        }
    }, [controlledIsOpen]);
    function calculateVerticalOffsets() {
        var _a, _b;
        if (!innerRef.current || !upperRef.current) {
            return;
        }
        // push from the global header
        var upperRect = upperRef.current.getBoundingClientRect();
        var viewportTopOffset = (_a = upperRect.y) !== null && _a !== void 0 ? _a : upperRect.top;
        var upperTopOffset = Math.max(viewportTopOffset, 0);
        setTopOffset(upperTopOffset);
        if (!lowerRef.current) {
            return;
        }
        // push from the global footer
        var lowerRect = lowerRef.current.getBoundingClientRect();
        var lowerTopOffset = (_b = lowerRect.y) !== null && _b !== void 0 ? _b : lowerRect.top;
        var viewportHeight = document.documentElement.clientHeight;
        var globalFooterOffset = Math.max(viewportHeight - lowerTopOffset, 0);
        setBottomOffset(globalFooterOffset);
        if (!footerRef.current) {
            return;
        }
        // occasionally push from the sticky footer too, relevant on smaller screens
        var isIntersectingWithFooter = getIsIntersectingHorizontally(footerRef.current, innerRef.current);
        if (isIntersectingWithFooter) {
            var footerHeight = footerRef.current.getBoundingClientRect().height;
            setBottomOffset(globalFooterOffset + footerHeight);
            return;
        }
    }
    useScroll({ onScroll: calculateVerticalOffsets });
    useResize({ onResize: calculateVerticalOffsets });
    React.useEffect(function () {
        if (isOpen) {
            calculateVerticalOffsets();
        }
    }, [isOpen]);
    return isOpen ? (React.createElement(React.Fragment, null,
        React.createElement(Flex, { alignSelf: "flex-start", ref: upperRef }),
        React.createElement(StyledAside, __assign({}, props, { ref: mergeRefs(ref, innerRef, calculateVerticalOffsets) }),
            React.createElement(StyledAsidePanel, { "$offsetTop": topOffset, "$minusHeight": topOffset + bottomOffset }, children)),
        React.createElement(Flex, { alignSelf: "flex-end", ref: lowerRef }))) : null;
});
var PageContainer = React.forwardRef(function PageContainer(props, ref) {
    var _a = React.useState(true), isAsideOpen = _a[0], setIsAsideOpen = _a[1];
    var openAside = function () { return setIsAsideOpen(true); };
    var closeAside = function () { return setIsAsideOpen(false); };
    var bodyRef = React.useRef(null);
    var footerRef = React.useRef(null);
    return (React.createElement(PageContext.Provider, { value: {
            bodyRef: bodyRef,
            footerRef: footerRef,
            aside: {
                open: openAside,
                close: closeAside,
                isOpen: isAsideOpen,
            },
        } },
        React.createElement(StyledPageContainer, __assign({}, props, { ref: ref }))));
});
var PageMain = React.forwardRef(function PageMain(props, ref) {
    var _a;
    var attrs = (_a = {}, _a[pageLayoutRootDataAttr] = true, _a);
    return (React.createElement(PageGrid, null,
        React.createElement(StyledPageMain, __assign({}, props, attrs, { ref: ref }))));
});
var PageBreadcrumbs = React.forwardRef(function PageBreadcrumbs(props, ref) {
    return React.createElement(StyledPageBreadcrumbs, __assign({ ref: ref }, props));
});
var PageBanner = React.forwardRef(function PageBanner(props, ref) {
    return React.createElement(StyledPageBanner, __assign({ ref: ref }, props));
});
var PageTitle = React.forwardRef(function PageTitle(props, ref) {
    return React.createElement(StyledPageTitle, __assign({ ref: ref }, props));
});
var PageTabs = React.forwardRef(function PageTabs(props, ref) {
    return React.createElement(StyledPageTabs, __assign({ ref: ref }, props));
});
PageGrid.displayName = 'Page.Grid';
PageHeader.displayName = 'Page.Header';
PageBanner.displayName = 'Page.Banner';
PageBreadcrumbs.displayName = 'Page.Breadcrumbs';
PageTitle.displayName = 'Page.Title';
PageTabs.displayName = 'Page.Tabs';
PageBody.displayName = 'Page.Body';
PageFooter.displayName = 'Page.Footer';
PageAside.displayName = 'Page.Aside';
PageContainer.displayName = 'Page';
PageMain.displayName = 'Page.Main';
export var Page = addSubcomponents({
    Header: PageHeader,
    Banner: PageBanner,
    Breadcrumbs: PageBreadcrumbs,
    Title: PageTitle,
    Tabs: PageTabs,
    Footer: PageFooter,
    Body: PageBody,
    Main: PageMain,
    Aside: PageAside,
    // Grid utilities
    Grid: PageGrid,
    Column: NextGrid.Col,
    Row: NextGrid.Row,
}, PageContainer);
//# sourceMappingURL=PageLayout.js.map