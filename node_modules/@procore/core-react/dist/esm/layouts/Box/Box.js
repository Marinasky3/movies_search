var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { StyledBox } from './Box.styles';
// TODO remove this after we decommission the LegacyDisplay type
function getLegacyDisplayAndDirection(d) {
    if (!d) {
        return {};
    }
    var display = d;
    var direction = display.includes('flex')
        ? 'row'
        : undefined;
    if (d.includes('flex-inline') || d.includes('inline-flex')) {
        display = 'inline-flex';
    }
    else if (d.includes('flex')) {
        display = 'flex';
    }
    if (d.includes('column-reverse')) {
        direction = 'column-reverse';
    }
    else if (d.includes('column')) {
        direction = 'column';
    }
    if (d.includes('row-reverse')) {
        direction = 'row-reverse';
    }
    else if (d.includes('row')) {
        direction = 'row';
    }
    return {
        display: display,
        direction: direction,
    };
}
export var Box = React.forwardRef(function Box(_a, ref) {
    var as = _a.as, alignContent = _a.alignContent, alignItems = _a.alignItems, alignSelf = _a.alignSelf, bgColor = _a.bgColor, children = _a.children, display = _a.display, flex = _a.flex, flexBasis = _a.flexBasis, flexDirection = _a.flexDirection, flexGrow = _a.flexGrow, flexShrink = _a.flexShrink, flexWrap = _a.flexWrap, height = _a.height, justifyContent = _a.justifyContent, margin = _a.margin, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, marginRight = _a.marginRight, marginTop = _a.marginTop, minHeight = _a.minHeight, minWidth = _a.minWidth, order = _a.order, padding = _a.padding, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, paddingRight = _a.paddingRight, paddingTop = _a.paddingTop, textAlign = _a.textAlign, width = _a.width, props = __rest(_a, ["as", "alignContent", "alignItems", "alignSelf", "bgColor", "children", "display", "flex", "flexBasis", "flexDirection", "flexGrow", "flexShrink", "flexWrap", "height", "justifyContent", "margin", "marginBottom", "marginLeft", "marginRight", "marginTop", "minHeight", "minWidth", "order", "padding", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "textAlign", "width"]);
    var legacyProps = getLegacyDisplayAndDirection(display);
    return (React.createElement(StyledBox, __assign({}, props, { ref: ref, "$as": as, "$alignContent": alignContent, "$alignItems": alignItems, "$alignSelf": alignSelf, "$bgColor": bgColor, "$display": legacyProps.display, "$flex": flex, "$flexBasis": flexBasis, "$flexDirection": flexDirection !== null && flexDirection !== void 0 ? flexDirection : legacyProps.direction, "$flexGrow": flexGrow, "$flexShrink": flexShrink, "$flexWrap": flexWrap, "$height": height, "$justifyContent": justifyContent, "$margin": margin, "$marginBottom": marginBottom, "$marginLeft": marginLeft, "$marginRight": marginRight, "$marginTop": marginTop, "$minHeight": minHeight, "$minWidth": minWidth, "$order": order, "$padding": padding, "$paddingBottom": paddingBottom, "$paddingLeft": paddingLeft, "$paddingRight": paddingRight, "$paddingTop": paddingTop, "$textAlign": textAlign, "$width": width }), children));
});
Box.displayName = 'Box';
// TODO remove default exports
export default Box;
//# sourceMappingURL=Box.js.map