import { Props, Size } from '../../utils/types';
/**
 * @deprecated
 *
 * These display modes are no longer valid, please use `direction` prop
 *
 * @deprecatedSince 10.20.0
 */
export declare type DeprecatedDisplay = 'flex-column-reverse' | 'flex-column' | 'flex-inline-column-reverse' | 'flex-inline-column' | 'flex-inline-row-reverse' | 'flex-inline-row' | 'flex-row-reverse' | 'flex-row';
export declare type Display = DeprecatedDisplay | 'block' | 'flex' | 'inline' | 'inline-block' | 'inline-flex';
export declare type FlexAlign = 'baseline' | 'center' | 'flex-end' | 'flex-start' | 'normal' | 'stretch';
export declare type FlexDirection = 'column' | 'column-reverse' | 'row' | 'row-reverse';
export declare type FlexJustify = 'center' | 'flex-end' | 'flex-start' | 'normal' | 'space-around' | 'space-between' | 'space-evenly';
export declare type FlexAlignContent = FlexJustify | 'stretch';
export declare type FlexWrap = 'nowrap' | 'wrap-reverse' | 'wrap';
export declare type TextAlign = 'center' | 'left' | 'right';
export declare type MarginSize = Extract<Size, 'auto' | 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'>;
export declare type PaddingSize = Extract<Size, 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'>;
export declare type BoxSize = MarginSize | PaddingSize | undefined;
export interface MarginOptions {
    margin?: MarginSize | string;
    marginBottom?: MarginSize;
    marginLeft?: MarginSize;
    marginRight?: MarginSize;
    marginTop?: MarginSize;
}
export interface PaddingOptions {
    padding?: PaddingSize | string;
    paddingBottom?: PaddingSize;
    paddingLeft?: PaddingSize;
    paddingRight?: PaddingSize;
    paddingTop?: PaddingSize;
}
export interface FlexOptions {
    alignContent?: FlexAlignContent;
    alignItems?: FlexAlign;
    alignSelf?: FlexAlign;
    justifyContent?: FlexJustify;
}
export interface BoxProps extends Props, FlexOptions, MarginOptions, PaddingOptions, StyleOptions {
    /**
     * Render semantic HTML tags with browser reset and normalize CSS
     */
    as?: 'ul' | 'ol' | 'li';
    display?: Display;
    /**
     * Alias to the `flex` property on a flexbox child.
     */
    flex?: string | number;
    /**
     * Alias to the `basis` property on a flexbox child.
     */
    flexBasis?: string | number;
    /**
     * Alias to the `direction` property on a flexbox child.
     */
    flexDirection?: FlexDirection;
    /**
     * Alias to the `grow` property on a flexbox child.
     */
    flexGrow?: string | number;
    /**
     * Alias to the `shrink` property on a flexbox child.
     */
    flexShrink?: string | number;
    /**
     * Alias to the `wrap` property on a flexbox child.
     */
    flexWrap?: FlexWrap;
    /**
     * Alias to the `order` property on a flexbox child
     */
    order?: number;
    tabIndex?: number;
    textAlign?: TextAlign;
}
export interface $BoxProps {
    $as?: BoxProps['as'];
    $alignContent?: BoxProps['alignContent'];
    $alignItems?: BoxProps['alignItems'];
    $alignSelf?: BoxProps['alignSelf'];
    $bgColor?: BoxProps['bgColor'];
    $display?: BoxProps['display'];
    $flex?: BoxProps['flex'];
    $flexBasis?: BoxProps['flexBasis'];
    $flexDirection?: BoxProps['flexDirection'];
    $flexGrow?: BoxProps['flexGrow'];
    $flexShrink?: BoxProps['flexShrink'];
    $flexWrap?: BoxProps['flexWrap'];
    $height?: BoxProps['height'];
    $justifyContent?: BoxProps['justifyContent'];
    $margin?: BoxProps['margin'];
    $marginBottom?: BoxProps['marginBottom'];
    $marginLeft?: BoxProps['marginLeft'];
    $marginRight?: BoxProps['marginRight'];
    $marginTop?: BoxProps['marginTop'];
    $minHeight?: BoxProps['minHeight'];
    $minWidth?: BoxProps['minWidth'];
    $order?: BoxProps['order'];
    $padding?: BoxProps['padding'];
    $paddingBottom?: BoxProps['paddingBottom'];
    $paddingLeft?: BoxProps['paddingLeft'];
    $paddingRight?: BoxProps['paddingRight'];
    $paddingTop?: BoxProps['paddingTop'];
    $textAlign?: BoxProps['textAlign'];
    $width?: BoxProps['width'];
}
