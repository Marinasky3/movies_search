var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useEventListener } from '../effects/EventListener';
function noop() { }
var availableTriggers = [
    'click',
    'hover',
    'none',
    'contextmenu',
    'focus',
    'always',
];
export function triggerListeners(_a) {
    var value = _a.value, off = _a.off, on = _a.on, trigger = _a.trigger, scope = _a.scope;
    var targetTriggers = Array.isArray(trigger) ? trigger : [trigger];
    var handlerOrNoop = function (fn, trigger) {
        var isTargetTrigger = targetTriggers.includes(trigger);
        return {
            handler: isTargetTrigger ? fn : noop,
            noopHandler: !isTargetTrigger,
        };
    };
    availableTriggers.forEach(function (trigger) {
        switch (trigger) {
            case 'click':
                var handler = handlerOrNoop(value ? off : on, trigger);
                useEventListener(__assign({ dependencies: [handler], event: 'click', scope: scope }, handler));
                break;
            case 'contextmenu':
                var ctxMenuHandler = handlerOrNoop(value ? off : on, trigger);
                useEventListener(__assign({ dependencies: [ctxMenuHandler], event: 'contextmenu', scope: scope }, ctxMenuHandler));
                break;
            case 'hover':
                var mouseLeaveHandler = handlerOrNoop(off, trigger);
                useEventListener(__assign({ event: 'mouseleave', scope: scope }, mouseLeaveHandler));
                var mouseEnterHandler = handlerOrNoop(on, trigger);
                useEventListener(__assign({ event: 'mouseenter', scope: scope }, mouseEnterHandler));
                break;
            case 'focus':
                var blurHandler = handlerOrNoop(off, trigger);
                useEventListener(__assign({ event: 'blur', scope: scope }, blurHandler));
                var focusHandler = handlerOrNoop(on, trigger);
                useEventListener(__assign({ event: 'focus', scope: scope }, focusHandler));
                break;
        }
    });
}
//# sourceMappingURL=triggerListeners.js.map