import { formatMachineDate, intlDateTimeFormat, toDate } from '../dateTime';
describe('I18n Date Formatter', function () {
    var date = new Date(2018, 11, 7);
    it('renders date with en locale', function () {
        expect(intlDateTimeFormat('en').format(date)).toEqual('12/7/2018');
    });
    it('renders date with en-CA locale', function () {
        expect(intlDateTimeFormat('en-CA').format(date)).toEqual('12/7/2018');
    });
    it('renders date with en-AU locale', function () {
        expect(intlDateTimeFormat('en-Au').format(date)).toEqual('07/12/2018');
    });
    it('renders date with fr-CA locale', function () {
        expect(intlDateTimeFormat('fr-CA').format(date)).toEqual('07/12/2018');
    });
    it('renders date with en-owner locale', function () {
        expect(intlDateTimeFormat('en-owner').format(date)).toEqual('12/7/2018');
    });
    it('renders date with en-international locale', function () {
        expect(intlDateTimeFormat('en-international').format(date)).toEqual('07/12/2018');
    });
    it('renders date with en-budget locale', function () {
        expect(intlDateTimeFormat('en-budget').format(date)).toEqual('12/7/2018');
    });
    it('renders date with es locale', function () {
        expect(intlDateTimeFormat('es').format(date)).toEqual('7/12/2018');
    });
    it('renders date with pseudo locale', function () {
        expect(intlDateTimeFormat('pseudo').format(date)).toEqual('12.7.2018');
    });
    it('accepts options', function () {
        expect(intlDateTimeFormat('de', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        }).format(date)).toEqual('Freitag, 7. Dezember 2018');
    });
    it('pseudolocalizes formatToParts', function () {
        expect(intlDateTimeFormat('pseudo').formatToParts(date)[1].value).toEqual('.');
    });
    it('supports resolvedOptions in pseudo locale', function () {
        expect(intlDateTimeFormat('pseudo').resolvedOptions().numberingSystem).toEqual('latn');
    });
    it('throws error if no locale is passed', function () {
        expect(function () {
            // @ts-ignore
            intlDateTimeFormat().format(date);
        }).toThrowError(/^Locale is a required parameter.$/);
    });
    it('defaults to en-US if invalid locale is passed', function () {
        expect(intlDateTimeFormat('sadfsd').format(date)).toEqual('12/7/2018');
    });
});
describe('formatMachineDate', function () {
    it('Date format is valid YYYY-MM-DD', function () {
        expect(formatMachineDate(new Date(2020, 0, 0))).toBe('2019-12-31');
        expect(formatMachineDate(new Date(2020, 0, 1))).toBe('2020-01-01');
        expect(formatMachineDate(new Date(2020, 9, 31))).toBe('2020-10-31');
        expect(formatMachineDate(new Date(2020, 9, 31, 23, 59))).toBe('2020-10-31');
    });
});
var regexMilliSeconds = /\.[0-9][0-9][0-9]/;
var regexSecondsAndMilliSeconds = /\:[0-9][0-9]\.[0-9][0-9][0-9]/;
describe('toDate', function () {
    it('returns same Date reference if Date', function () {
        var date = new Date(2020, 9, 31);
        expect(toDate(date)).toEqual(date);
        expect(toDate(date)).toBe(date);
    });
    describe('returns a Date for a valid string date format', function () {
        it('0000-00-00T00:00:00.000Z', function () {
            var date = new Date(2020, 9, 31, 1, 1, 1, 111);
            var dateString = date.toISOString();
            expect(toDate(dateString)).toEqual(date);
        });
        it('0000-00-00T00:00:00Z', function () {
            var date = new Date(2020, 9, 31, 1, 1, 1);
            var dateString = date.toISOString().replace(regexMilliSeconds, '');
            expect(toDate(dateString)).toEqual(date);
        });
        it('0000-00-00T00:00Z', function () {
            var date = new Date(2020, 9, 31, 1, 1);
            var dateString = date
                .toISOString()
                .replace(regexSecondsAndMilliSeconds, '');
            expect(toDate(dateString)).toEqual(date);
        });
    });
    describe('unsupported format', function () {
        var spyWarn;
        beforeAll(function () {
            spyWarn = jest.spyOn(console, 'warn').mockImplementation(function () { });
        });
        afterAll(function () {
            spyWarn.mockRestore();
        });
        it('returns same self if invalid', function () {
            expect(toDate('Tuesday')).toBe('Tuesday');
            // @ts-ignore
            expect(toDate(1000000)).toBe(1000000);
            // @ts-ignore
            expect(toDate(undefined)).toBe(undefined);
            // @ts-ignore
            expect(toDate(null)).toBe(null);
            // @ts-ignore
            expect(toDate(NaN)).toBe(NaN);
            var obj = {};
            // @ts-ignore
            expect(toDate(obj)).toBe(obj);
        });
    });
});
//# sourceMappingURL=dateTime.js.map