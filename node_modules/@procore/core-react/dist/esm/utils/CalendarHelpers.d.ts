import { Locale } from '../state/I18n';
export declare const maxMonth = 12;
export declare const minYear: number;
export declare const maxYear: number;
export declare const daysInCalendar: number;
export declare const addDays: (date: Date, num: number) => Date;
export declare const addMonths: (date: Date, num: number) => Date;
export declare const eachDay: (date1: Date, date2: Date) => Date[];
export declare const format: (date: Date, formatString: string) => string;
export declare const formatMonth: (month: number) => string;
export declare const getDate: (date: Date) => number;
export declare const getStartDayOfWeek: (locale: Locale) => number;
export declare const getDates: (date: Date, locale: Locale) => Date[];
export declare const getMonth: (date: Date) => number;
export declare const getRows: (dates: Date[]) => Date[][];
export declare const getYear: (date: Date) => number;
export declare const isAfter: (date1: Date, date2: Date) => boolean;
export declare const isBefore: (date1: Date, date2: Date) => boolean;
export declare const isSameDay: (date1: Date, date2: Date) => boolean;
export declare const isSameMonth: (date1: Date, date2: Date) => boolean;
export declare const isToday: (date: Date) => boolean;
export declare const isWithinRange: (date: Date, start?: Date, end?: Date) => boolean;
export declare const normalizeExistingDate: (day: Date) => Date;
export declare const normalizeNewDate: (year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number) => Date;
interface SelectOption {
    label: string;
    value: number;
}
export declare const getMonthLabel: (month: number, locale?: Locale) => string;
export declare const getMonthOptions: (locale: Locale) => SelectOption[];
export declare const getYearOptions: (date: Date) => SelectOption[];
export declare const getDayOfWeekLabel: (day: number, locale?: Locale) => string;
export declare const updateMonth: (date: Date, month: number) => Date;
export declare const updateYear: (date: Date, year: number) => Date;
export declare const subDays: (date: Date, num: number) => Date;
export declare const subMonths: (date: Date, num: number) => Date;
declare const CalendarHelpers: {
    addDays: (date: Date, num: number) => Date;
    addMonths: (date: Date, num: number) => Date;
    eachDay: (date1: Date, date2: Date) => Date[];
    format: (date: Date, formatString: string) => string;
    formatMonth: (month: number) => string;
    getDate: (date: Date) => number;
    getDates: (date: Date, locale: Locale) => Date[];
    getMonth: (date: Date) => number;
    getMonthLabel: (month: number, locale?: Locale) => string;
    getMonthOptions: (locale: Locale) => SelectOption[];
    getRows: (dates: Date[]) => Date[][];
    getYear: (date: Date) => number;
    getYearOptions: (date: Date) => SelectOption[];
    isAfter: (date1: Date, date2: Date) => boolean;
    isBefore: (date1: Date, date2: Date) => boolean;
    isSameDay: (date1: Date, date2: Date) => boolean;
    isSameMonth: (date1: Date, date2: Date) => boolean;
    isToday: (date: Date) => boolean;
    isWithinRange: (date: Date, start?: Date | undefined, end?: Date | undefined) => boolean;
    normalizeExistingDate: (day: Date) => Date;
    normalizeNewDate: (year: number, month: number, day: number, hour?: number | undefined, minute?: number | undefined, second?: number | undefined, millisecond?: number | undefined) => Date;
    subDays: (date: Date, num: number) => Date;
    subMonths: (date: Date, num: number) => Date;
    updateMonth: (date: Date, month: number) => Date;
    updateYear: (date: Date, year: number) => Date;
};
export default CalendarHelpers;
