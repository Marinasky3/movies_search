import { addDays as addDaysFn, addMonths as addMonthsFn, eachDayOfInterval as eachDayFn, format as formatFn, getDate as getDateFn, getDay as getDayFn, getMonth as getMonthFn, getYear as getYearFn, isAfter as isAfterFn, isBefore as isBeforeFn, isSameDay as isSameDayFn, isSameMonth as isSameMonthFn, isToday as isTodayFn, isWithinInterval as isWithinRangeFn, startOfMonth as startOfMonthFn, startOfWeek, subDays as subDaysFn, subMonths as subMonthsFn, subYears as subYearsFn, } from 'date-fns';
import { de, enUS as en, es, fr, is, ko, pt, th } from 'date-fns/esm/locale';
import { range, splitEvery } from 'ramda';
var dateFnsLocales = {
    en: en,
    'en-CA': en,
    'fr-CA': fr,
    'fr-FR': fr,
    es: es,
    'es-ES': es,
    'en-AE': en,
    'en-AU': en,
    'en-GB': en,
    'en-SG': en,
    ko: ko,
    'th-TH': th,
    pt: pt,
    'is-IS': is,
    'de-DE': de,
    pseudo: en,
};
// values 0 - 6 represent indexes of days of the week, Sunday - Saturday respectively
var localeStartDayOfWeek = {
    en: 0,
    'en-CA': 0,
    'fr-CA': 0,
    'fr-FR': 1,
    es: 1,
    'es-ES': 1,
    'en-AE': 6,
    'en-AU': 0,
    'en-GB': 1,
    'en-SG': 0,
    ko: 0,
    'th-TH': 0,
    pt: 0,
    'is-IS': 1,
    'de-DE': 1,
    pseudo: 0,
};
export var maxMonth = 12;
export var minYear = 0;
export var maxYear = new Date().getFullYear() + 100;
// rows in calendar
var calendarWeeks = 6;
var daysInWeek = 7;
export var daysInCalendar = calendarWeeks * daysInWeek;
export var addDays = addDaysFn;
export var addMonths = addMonthsFn;
export var eachDay = function (date1, date2) {
    return eachDayFn({ start: date1, end: date2 });
};
export var format = formatFn;
// An entire date object has to be formed, format(month, 'MMM') breaks for month >= 10 (it just outputs 'Dec')
export var formatMonth = function (month) {
    return formatFn(normalizeNewDate(2019, month, 2), 'MMM');
};
export var getDate = getDateFn;
export var getStartDayOfWeek = function (locale) {
    return localeStartDayOfWeek[locale] || localeStartDayOfWeek['en'];
};
export var getDates = function (date, locale) {
    var startDayOfWeek = getStartDayOfWeek(locale);
    // Shift first day appearing on the calendar based on day of the week of the first day of the month and based on the start day of the week
    var dayShift = 7 - startDayOfWeek;
    var subDays = (getDayFn(startOfMonthFn(date)) + dayShift) % 7;
    var start = subDaysFn(startOfMonthFn(date), subDays);
    var end = addDaysFn(start, daysInCalendar - 1);
    return eachDayFn({ start: start, end: end });
};
export var getMonth = getMonthFn;
export var getRows = splitEvery(7);
export var getYear = getYearFn;
export var isAfter = function (date1, date2) {
    return isAfterFn(normalizeExistingDate(date1), normalizeExistingDate(date2));
};
export var isBefore = function (date1, date2) {
    return isBeforeFn(normalizeExistingDate(date1), normalizeExistingDate(date2));
};
export var isSameDay = function (date1, date2) { return isSameDayFn(normalizeExistingDate(date1), normalizeExistingDate(date2)); };
export var isSameMonth = isSameMonthFn;
export var isToday = isTodayFn;
export var isWithinRange = function (date, start, end) {
    if (!start || !end) {
        return false;
    }
    return isWithinRangeFn(normalizeExistingDate(date), {
        start: normalizeExistingDate(start),
        end: normalizeExistingDate(end),
    });
};
export var normalizeExistingDate = function (day) {
    return normalizeNewDate(getYearFn(day), getMonthFn(day), getDateFn(day));
};
export var normalizeNewDate = function (year, month, day, hour, minute, second, millisecond) {
    if (hour === void 0) { hour = 0; }
    if (minute === void 0) { minute = 0; }
    if (second === void 0) { second = 0; }
    if (millisecond === void 0) { millisecond = 0; }
    var normalizedDate = new Date();
    normalizedDate.setFullYear(year, month, day);
    normalizedDate.setHours(hour);
    normalizedDate.setMinutes(minute);
    normalizedDate.setSeconds(second);
    normalizedDate.setMilliseconds(millisecond);
    return normalizedDate;
};
export var getMonthLabel = function (month, locale) {
    if (locale === void 0) { locale = 'en'; }
    return formatFn(normalizeNewDate(1970, month, 1), 'MMM', {
        locale: dateFnsLocales[locale],
    });
};
export var getMonthOptions = function (locale) {
    return range(0, 12).map(function (value) { return ({
        value: value,
        label: getMonthLabel(value, locale),
    }); });
};
export var getYearOptions = function (date) {
    var start = Math.max(minYear, getYear(subYearsFn(date, 10)));
    return range(start, start + 21).map(function (value) { return ({
        value: value,
        label: String(value).padStart(4, '0'),
    }); });
};
export var getDayOfWeekLabel = function (day, locale) {
    if (locale === void 0) { locale = 'en'; }
    return formatFn(addDaysFn(startOfWeek(new Date()), day), 'iiiiii', {
        locale: dateFnsLocales[locale],
    });
};
export var updateMonth = function (date, month) {
    return normalizeNewDate(getYear(date), month, getDate(date));
};
export var updateYear = function (date, year) {
    return normalizeNewDate(year, getMonth(date), getDate(date));
};
export var subDays = subDaysFn;
export var subMonths = subMonthsFn;
var CalendarHelpers = {
    addDays: addDays,
    addMonths: addMonths,
    eachDay: eachDay,
    format: format,
    formatMonth: formatMonth,
    getDate: getDate,
    getDates: getDates,
    getMonth: getMonth,
    getMonthLabel: getMonthLabel,
    getMonthOptions: getMonthOptions,
    getRows: getRows,
    getYear: getYear,
    getYearOptions: getYearOptions,
    isAfter: isAfter,
    isBefore: isBefore,
    isSameDay: isSameDay,
    isSameMonth: isSameMonth,
    isToday: isToday,
    isWithinRange: isWithinRange,
    normalizeExistingDate: normalizeExistingDate,
    normalizeNewDate: normalizeNewDate,
    subDays: subDays,
    subMonths: subMonths,
    updateMonth: updateMonth,
    updateYear: updateYear,
};
export default CalendarHelpers;
//# sourceMappingURL=CalendarHelpers.js.map