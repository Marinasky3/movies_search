import { getFormatterLocale } from './i18n';
var dateTimePresets = {
    time: {
        hour: 'numeric',
        minute: 'numeric',
        timeZoneName: 'short',
    },
    'abbr-weekday-abbr-date': {
        weekday: 'short',
        year: 'numeric',
        month: 'short',
        day: 'numeric',
    },
    date: {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    },
    'weekday-date': {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    },
    none: {},
    'numeric-date': {
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
    },
};
export var getPresetDateTimeOptions = function (type) {
    return dateTimePresets[type] || dateTimePresets.none;
};
var pseudoDate = function (date) { return date.replace(/[\/\-\,\:]/g, '.'); };
var pseudoFormatPart = function (_a) {
    var type = _a.type, value = _a.value;
    return type === 'literal' ? { type: type, value: '.' } : { type: type, value: value };
};
function formatterFactory(formatterLocale, options) {
    try {
        return new Intl.DateTimeFormat(formatterLocale, options);
    }
    catch (error) {
        console.error("@procore/core-react Intl.DateTimeFormat error for locale ".concat(formatterLocale, ". Will fall back to en-US"), error);
        return new Intl.DateTimeFormat('en-US', options);
    }
}
var mapFormatToParts = function (parts) { return parts.map(pseudoFormatPart); };
export function intlDateTimeFormat(locale, options) {
    if (options === void 0) { options = {}; }
    if (!locale) {
        throw new Error('Locale is a required parameter.');
    }
    var formatterLocale = getFormatterLocale(locale);
    var formatter = formatterFactory(formatterLocale, options);
    return locale === 'pseudo'
        ? {
            format: function (date) { return pseudoDate(formatter.format(date)); },
            formatToParts: function (date) {
                return mapFormatToParts(formatter.formatToParts(date));
            },
            resolvedOptions: function () { return formatter.resolvedOptions(); },
        }
        : formatter;
}
export function toDate(date, log) {
    if (date instanceof Date) {
        return date;
    }
    if (!isNaN(Date.parse(date))) {
        return new Date(date);
    }
    if (log) {
        console.warn("@procore/core-react: ".concat(log, "; toDate invalid date format"), date);
    }
    return date;
}
// Date should already be shifted to the time zone, meaning we already have the date in location and
// now we need it in a specific style https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#valid_datetime_values
// toLocaleDateString uses Intl DateTimeFormat
// alternative toLocaleDateString('en-GB', { timeZone })
export function formatMachineDate(date) {
    return date.toLocaleDateString('en-GB').split('/').reverse().join('-');
}
//# sourceMappingURL=dateTime.js.map