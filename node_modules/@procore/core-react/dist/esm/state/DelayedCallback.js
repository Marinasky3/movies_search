import React from 'react';
import { useTimer } from './Timer';
function noop() { }
function returnTrue() {
    return true;
}
export function isPromise(obj) {
    return typeof obj === 'object' && typeof obj.then === 'function';
}
export function wrapPromise(result) {
    if (isPromise(result)) {
        return result;
    }
    if (typeof result === 'boolean') {
        return Promise.resolve(result);
    }
    return Promise.resolve(true);
}
/* HOOK */
export function useDelayedCallback(_a) {
    var _b = _a.after, after = _b === void 0 ? noop : _b, _c = _a.before, before = _c === void 0 ? returnTrue : _c, _d = _a.delay, delay = _d === void 0 ? 0 : _d, timer = _a.timer;
    var defaultTimer = useTimer({});
    var t = timer || defaultTimer;
    return React.useCallback(function (event) {
        return wrapPromise(before(event)).then(function (shouldUpdate) { return shouldUpdate && t.setTimer(after, delay); });
    }, [delay, before, after, t]);
}
//# sourceMappingURL=DelayedCallback.js.map