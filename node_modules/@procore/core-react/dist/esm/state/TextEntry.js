var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { isEmpty } from 'ramda';
import React from 'react';
import { useBuffer } from './Buffer';
/* HOOK */
export function useTextEntry(_a) {
    var _b = _a.initialValue, initialValue = _b === void 0 ? '' : _b, _c = _a.onChange, onChange = _c === void 0 ? function () { } : _c;
    var _d = useBuffer({ initialValue: initialValue }), value = _d.value, update = _d.update, clear = _d.clear, reset = _d.reset;
    return {
        clear: function () {
            onChange({ target: { value: '' } });
            clear();
        },
        empty: isEmpty(value),
        onChange: function (event) {
            onChange(event);
            update(event.target.value);
        },
        reset: function () {
            onChange({ target: { value: value } });
            reset();
        },
        value: value,
    };
}
/* DECORATOR */
export function withTextEntry(config) {
    return function (Component) {
        return function WithTextEntry(props) {
            return (React.createElement(Component, __assign({}, props, { textEntry: useTextEntry(__assign(__assign({}, config), props.textEntry)) })));
        };
    };
}
/* RENDER PROP */
export function TextEntry(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var textEntry = useTextEntry(props);
    return typeof children === 'function' ? children(textEntry) : children;
}
/* CONTEXT */
var noop = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in a `<TextEntryProvider>`"));
}; };
export var TextEntryContext = React.createContext({
    value: '',
    empty: true,
    clear: noop('clear'),
    reset: noop('reset'),
});
export function TextEntryProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(TextEntryContext.Provider, { value: useTextEntry(props) }, children));
}
export function useTextEntryContext() {
    return React.useContext(TextEntryContext);
}
/**
 * @deprecated
 *
 * Please use `useTextEntryContext()`
 *
 * @deprecatedSince 10.20.0
 */
export var consumeTextEntry = useTextEntryContext;
//# sourceMappingURL=TextEntry.js.map