var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
function clamp(max, n) {
    return Math.min(max - 1, Math.max(0, n));
}
function wrap(max, n) {
    if (max === 0) {
        return n;
    }
    return n < 0 ? max + n : n % max;
}
export function useListNavigation(_a) {
    var _b = _a.circular, circular = _b === void 0 ? false : _b, _c = _a.initialIndex, initialIndex = _c === void 0 ? 0 : _c, _d = _a.size, initialSize = _d === void 0 ? 0 : _d;
    var _e = React.useState(initialIndex), index = _e[0], setIndex = _e[1];
    var _f = React.useState(initialSize), size = _f[0], setSize = _f[1];
    var set = React.useCallback(function (i) {
        if (size === 0) {
            setIndex(i);
        }
        else {
            setIndex(clamp(size, circular ? wrap(size, i) : i));
        }
    }, [circular, size]);
    function clear() {
        set(0);
    }
    function increment() {
        set(index + 1);
    }
    function incrementBy(amount) {
        set(index + amount);
    }
    function decrement() {
        set(index - 1);
    }
    function decrementBy(amount) {
        set(index - amount);
    }
    function reset() {
        set(initialIndex);
    }
    return {
        clear: clear,
        decrement: decrement,
        decrementBy: decrementBy,
        increment: increment,
        incrementBy: incrementBy,
        index: index,
        reset: reset,
        set: set,
        setSize: setSize,
        size: size,
    };
}
/* DECORATOR */
export function withListNavigation(config) {
    return function (Component) {
        return function WithListNavigation(props) {
            return (React.createElement(Component, __assign({}, props, { listNavigation: useListNavigation(__assign(__assign({}, config), props.listNavigation)) })));
        };
    };
}
/* RENDER PROP */
export function ListNavigation(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var listNavigation = useListNavigation(props);
    return typeof children === 'function' ? children(listNavigation) : children;
}
/* CONTEXT */
var noop = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in a `<ListNavigationProvider>`"));
}; };
export var defaultApi = {
    clear: noop('clear'),
    decrement: noop('decrement'),
    decrementBy: noop('decrementBy'),
    increment: noop('increment'),
    incrementBy: noop('incrementBy'),
    index: -1,
    reset: noop('reset'),
    set: noop('set'),
    setSize: noop('setSize'),
    size: 0,
};
export var ListNavigationContext = React.createContext(defaultApi);
export function ListNavigationProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(ListNavigationContext.Provider, { value: useListNavigation(props) }, children));
}
export var useListNavigationContext = function () {
    return React.useContext(ListNavigationContext);
};
/**
 * @deprecated
 *
 * Please use `useListNavigationContext()`
 *
 * @deprecatedSince 10.20.0
 */
export var consumeListNavigation = useListNavigationContext;
//# sourceMappingURL=ListNavigation.js.map