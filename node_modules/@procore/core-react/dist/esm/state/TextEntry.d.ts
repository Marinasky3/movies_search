import React from 'react';
export declare type ChangeEvent = React.ChangeEvent<HTMLInputElement>;
export interface TextEntryConfig {
    initialValue?: string;
    onChange: (event: ChangeEvent) => void;
}
export interface TextEntryApi {
    clear: () => void;
    empty: boolean;
    onChange: (event: ChangeEvent) => void;
    reset: () => void;
    value: string;
}
interface Props extends TextEntryConfig {
    children?: React.ReactNode;
}
interface RenderProps extends TextEntryConfig {
    children: (props: TextEntryApi) => {};
}
export declare function useTextEntry({ initialValue, onChange, }: TextEntryConfig): {
    clear: () => void;
    empty: boolean;
    onChange: (event: ChangeEvent) => void;
    reset: () => void;
    value: string;
};
export declare function withTextEntry<T>(config: TextEntryConfig): (Component: React.ComponentType<T>) => (props: T & {
    textEntry: TextEntryConfig;
}) => JSX.Element;
export declare function TextEntry({ children, ...props }: RenderProps): {};
export declare const TextEntryContext: React.Context<{
    value: string;
    empty: boolean;
    clear: () => void;
    reset: () => void;
}>;
export declare function TextEntryProvider({ children, ...props }: Props): JSX.Element;
export declare function useTextEntryContext(): {
    value: string;
    empty: boolean;
    clear: () => void;
    reset: () => void;
};
/**
 * @deprecated
 *
 * Please use `useTextEntryContext()`
 *
 * @deprecatedSince 10.20.0
 */
export declare const consumeTextEntry: typeof useTextEntryContext;
export {};
