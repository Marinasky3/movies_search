var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { useHotkey } from '../effects/Hotkey';
import { triggerListeners } from '../utils/triggerListeners';
/* HOOK */
export function useTrigger(_a) {
    var disable = _a.disable, _b = _a.disableKeys, disableKeys = _b === void 0 ? [] : _b, enable = _a.enable, _c = _a.enableKeys, enableKeys = _c === void 0 ? [] : _c, _d = _a.isEnabled, isEnabled = _d === void 0 ? false : _d, _e = _a.trigger, trigger = _e === void 0 ? 'click' : _e, triggerRef = _a.triggerRef;
    triggerListeners({
        off: disable,
        on: enable,
        scope: triggerRef,
        trigger: trigger,
        value: isEnabled,
    });
    useHotkey({
        key: enableKeys,
        handler: enable,
        preventDefault: true,
        scope: triggerRef,
    });
    useHotkey({
        key: disableKeys,
        handler: disable,
        preventDefault: true,
        scope: triggerRef,
    });
    // prevent keyup event from firing on FF
    useHotkey({
        event: 'keyup',
        key: __spreadArray(__spreadArray([], enableKeys, true), disableKeys, true),
        handler: function () { },
        preventDefault: true,
        scope: triggerRef,
    });
    return {
        disable: disable,
        enable: enable,
        isVisible: isEnabled,
        toggle: isEnabled ? disable : enable,
    };
}
/* DECORATOR */
export function withTrigger(config) {
    return function (Component) {
        return function WithTrigger(props) {
            return (React.createElement(Component, __assign({}, props, { trigger: useTrigger(__assign(__assign({}, config), props.Trigger)) })));
        };
    };
}
/* RENDER PROP */
export function Trigger(_a) {
    var children = _a.children, triggerRef = _a.triggerRef, props = __rest(_a, ["children", "triggerRef"]);
    var trigger = useTrigger(__assign(__assign({}, props), { triggerRef: triggerRef }));
    var element = typeof children === 'function'
        ? children(trigger)
        : children;
    return (element &&
        React.cloneElement(element, __assign(__assign({}, element.props), { ref: triggerRef, open: trigger.isVisible })));
}
/* CONTEXT */
var noop = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in an `<TriggerProvider>`"));
}; };
export var initTrigger = {
    disable: noop('disable'),
    enable: noop('enable'),
    isVisible: false,
    toggle: noop('toggle'),
};
export var TriggerContext = React.createContext(initTrigger);
export function TriggerProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(TriggerContext.Provider, { value: useTrigger(props) }, children));
}
export function useTriggerContext() {
    return React.useContext(TriggerContext);
}
/**
 * @deprecated
 *
 * Please use `useTriggerContext()`
 *
 * @deprecatedSince 10.20.0
 */
export var consumeTrigger = useTriggerContext;
//# sourceMappingURL=Trigger.js.map