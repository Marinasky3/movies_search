import React from 'react';
interface TimerConfig {
}
interface Props {
    children: React.ReactNode;
}
declare type TimerId = number | null;
export interface TimerApi {
    cancel: () => void;
    reset: () => void;
    setTimer: (callback: () => void, duration: number) => void;
    timerId: TimerId;
}
export declare function useTimer(config: TimerConfig): TimerApi;
export declare function withTimer<T>(config: TimerConfig): (Component: React.ComponentType<T>) => (props: T & {
    timer: TimerConfig;
}) => JSX.Element;
export declare function Timer({ children }: Props): any;
export declare const TimerContext: React.Context<TimerApi>;
export declare function TimerProvider({ children }: Props): JSX.Element;
export declare function useTimerContext(): TimerApi;
export declare const consumeTimer: typeof useTimerContext;
export {};
