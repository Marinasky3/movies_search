import React from 'react';
interface InjectedScriptConfig {
    id: string;
    src: string;
}
interface InjectedScriptApi {
    isLoaded: boolean;
    setLoaded: (isLoaded: boolean) => void;
}
interface Props extends InjectedScriptConfig {
    children?: React.ReactNode;
}
interface RenderProps extends InjectedScriptConfig {
    children?: ((props: InjectedScriptApi) => React.ReactNode) | null;
}
export declare function useInjectedScript({ id, src }: InjectedScriptConfig): {
    isLoaded: boolean;
    setLoaded: React.Dispatch<React.SetStateAction<boolean>>;
};
export declare function withInjectedScript<T>(config: InjectedScriptConfig): (Component: React.ComponentType<T>) => (props: T & {
    injectedScript: InjectedScriptConfig;
}) => JSX.Element;
export declare function InjectedScript({ children, ...props }: RenderProps): React.ReactNode;
export declare const InjectedScriptContext: React.Context<InjectedScriptApi>;
export declare function InjectedScriptProvider({ children, ...props }: Props): JSX.Element;
export declare function useInjectedScriptContext(): InjectedScriptApi;
export declare const consumeInjectedScript: typeof useInjectedScriptContext;
export {};
