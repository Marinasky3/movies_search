var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import React from 'react';
import { useLayoutEventListener } from '../effects/EventListener';
import { getBoundingRect } from '../utils/dom';
import { getAnchorPosition } from '../utils/getAnchorPosition';
export var initAnchor = {
    left: 0,
    minWidth: 0,
    placement: 'bottom-left',
    top: 0,
};
/* HOOK */
export function useAnchor(_a) {
    var _b = _a.canFlip, canFlip = _b === void 0 ? true : _b, _c = _a.dependencies, dependencies = _c === void 0 ? [] : _c, _d = _a.onLayout, onLayout = _d === void 0 ? function () { } : _d, _e = _a.padding, padding = _e === void 0 ? 0 : _e, _f = _a.placement, placement = _f === void 0 ? 'bottom-left' : _f, overlayRef = _a.overlayRef, targetRef = _a.targetRef, _g = _a.shrinkOverlay, shrinkOverlay = _g === void 0 ? false : _g;
    var _h = React.useState(__assign(__assign({}, initAnchor), { placement: placement })), anchor = _h[0], setAnchor = _h[1];
    var viewChangeHandler = function () {
        if (overlayRef.current && targetRef.current) {
            var target = getBoundingRect(targetRef.current);
            if (!shrinkOverlay) {
                // we should set minWidth before calculation
                overlayRef.current.style.minWidth = "".concat(target.width, "px");
            }
            var newAnchor = getAnchorPosition(placement, padding, undefined, target, getBoundingRect(overlayRef.current), canFlip);
            if (newAnchor.placement !== anchor.placement) {
                setAnchor(newAnchor);
            }
            onLayout(newAnchor);
        }
    };
    useLayoutEventListener({
        event: 'scroll',
        handler: viewChangeHandler,
        options: {
            capture: true,
        },
    });
    useLayoutEventListener({
        event: 'resize',
        handler: viewChangeHandler,
    });
    useLayoutEventListener({
        event: 'load',
        handler: viewChangeHandler,
    });
    React.useLayoutEffect(function () {
        viewChangeHandler();
    }, __spreadArray([overlayRef], dependencies, true));
    return anchor;
}
/* DECORATOR */
export function withAnchor(config) {
    return function (Component) {
        return function WithAnchor(props) {
            return React.createElement(Component, __assign({}, props, { anchor: useAnchor(config) }));
        };
    };
}
/* RENDER PROP */
export function Anchor(_a) {
    var children = _a.children, overlayRef = _a.overlayRef, targetRef = _a.targetRef, props = __rest(_a, ["children", "overlayRef", "targetRef"]);
    var anchor = useAnchor(__assign(__assign({}, props), { overlayRef: overlayRef, targetRef: targetRef }));
    var content = typeof children === 'function'
        ? children(anchor)
        : children;
    return (content &&
        React.cloneElement(content, __assign(__assign({}, content.props), { placement: anchor.placement, ref: overlayRef })));
}
/* CONTEXT */
export var AnchorContext = React.createContext(initAnchor);
export function AnchorProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(AnchorContext.Provider, { value: useAnchor(props) }, children));
}
export function useAnchorContext() {
    return React.useContext(AnchorContext);
}
export var consumeAnchor = useAnchorContext;
//# sourceMappingURL=Anchor.js.map