import React from 'react';
import { Scope } from '../effects/EventListener';
interface EventConfig {
    event: string;
    options?: AddEventListenerOptions;
    scope?: Scope;
}
interface EventApi {
    value: any;
}
interface Props extends EventConfig {
    children?: React.ReactNode;
}
interface RenderProps extends EventConfig {
    children: (props: EventApi) => {};
}
export declare function useEvent({ event, options, scope, }: EventConfig): EventApi;
export declare function withEvent<T>(config: EventConfig): (Component: React.ComponentType<T>) => (props: T & {
    event: EventConfig;
}) => JSX.Element;
export declare function Event({ children, ...props }: RenderProps): {};
export declare const EventContext: React.Context<EventApi>;
export declare function EventProvider({ children, ...props }: Props): JSX.Element;
export declare const useEventContext: () => EventApi;
/**
 * @deprecated
 *
 * Please use `useEventContext()`
 *
 * @deprecatedSince 10.20.0
 */
export declare const consumeEvent: () => EventApi;
export {};
