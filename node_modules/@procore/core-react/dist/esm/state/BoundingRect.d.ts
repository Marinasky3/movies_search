import React from 'react';
import { Rect } from '../utils/dom';
interface BoundingRectConfig {
    dependencies?: Array<any>;
}
interface Props extends BoundingRectConfig {
    children: React.ReactNode;
}
interface RenderProps extends BoundingRectConfig {
    children: (props: BoundingRectApi) => {};
}
interface BoundingRectApi {
    ref: React.RefObject<any>;
    rect: Rect;
}
export declare function useBoundingRect({ dependencies, }?: BoundingRectConfig): BoundingRectApi;
export declare function withBoundingRect<T>(config: BoundingRectConfig): (Component: React.ComponentType<T>) => (props: T & {
    boundingRect: BoundingRectConfig;
}) => JSX.Element;
export declare function BoundingRect({ children, ...props }: RenderProps): {};
export declare const BoundingRectContext: React.Context<BoundingRectApi>;
export declare function BoundingRectProvider({ children, ...props }: Props): JSX.Element;
export declare function useBoundingRectContext(): BoundingRectApi;
/**
 * @deprecated Please use `useBoundingRectContext()`
 */
export declare const consumeBoundingRect: typeof useBoundingRectContext;
export {};
