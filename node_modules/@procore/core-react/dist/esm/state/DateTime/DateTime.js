var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
import { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';
import * as React from 'react';
import { intlDateTimeFormat, getPresetDateTimeOptions, } from '../../utils/dateTime';
import { useI18nContext } from '../I18n';
var enableLogs = ((_a = process.env.TZ_LOG) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true';
function computerTimeZone() {
    var _a, _b, _c, _d;
    return (_d = (_b = (_a = window === null || window === void 0 ? void 0 : window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat) === null || _b === void 0 ? void 0 : (_c = _b.call(_a)).resolvedOptions) === null || _d === void 0 ? void 0 : _d.call(_c).timeZone;
}
function consoleMessageFormat(_a) {
    var _b = _a.log, log = _b === void 0 ? '' : _b, result = _a.result, timeZone = _a.timeZone, type = _a.type, value = _a.value;
    if (enableLogs) {
        console.log("core-react: ".concat(log, " useDateTime format ").concat(type, "; destintation time zone: ").concat(timeZone, ", argument ").concat(value, ", result ").concat(result));
    }
}
function consoleMessageCompareShift(_a) {
    var _b = _a.log, log = _b === void 0 ? '' : _b, result = _a.result, timeZone = _a.timeZone, value = _a.value;
    if (enableLogs) {
        console.log("core-react: ".concat(log, "; destination time zone ").concat(timeZone, ". Your time zone ").concat(computerTimeZone(), "."), '\nInput:  ', value, '\nOutput: ', result, '\nIn ISO: ', {
            input: value.toISOString(),
            output: result.toISOString(),
        });
    }
}
function consoleMessageShiftNoShift(_a) {
    var _b = _a.log, log = _b === void 0 ? '' : _b, timeZone = _a.timeZone, value = _a.value;
    if (enableLogs) {
        console.log("core-react: ".concat(log, " utcToZonedTime; destination time zone ").concat(timeZone, ". No argument, return arugment.\n"), value);
    }
}
export var dateTimeFormats = {
    'abbr-weekday-abbr-date': 'abbr-weekday-abbr-date',
    'abbr-weekday-abbr-date-at-time': 'abbr-weekday-abbr-date-at-time',
    date: 'date',
    'date-at-time': 'date-at-time',
    'numeric-date': 'numeric-date',
    'numeric-date-at-time': 'numeric-date-at-time',
    time: 'time',
    'time-on-abbr-weekday-abbr-date': 'time-on-abbr-weekday-abbr-date',
    'time-on-weekday-date': 'time-on-weekday-date',
    'time-on-date': 'time-on-date',
    'time-on-numeric-date': 'time-on-numeric-date',
    'weekday-date': 'weekday-date',
    'weekday-date-at-time': 'weekday-date-at-time',
    none: 'none', // browser default 1/8/2021
};
var DateTimeContext = React.createContext({});
export function DateTimeProvider(_a) {
    var children = _a.children, hour12 = _a.hour12, timeZone = _a.timeZone;
    return (React.createElement(DateTimeContext.Provider, { value: { hour12: hour12, timeZone: timeZone } }, children));
}
var emptyCache = {};
export function useDateTime() {
    var I18n = useI18nContext();
    var _a = React.useContext(DateTimeContext), hour12 = _a.hour12, timeZone = _a.timeZone;
    var _b = React.useState(emptyCache), cache = _b[0], setCache = _b[1];
    var getDateFormatter = React.useCallback(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var key = JSON.stringify(args);
        if (cache[key]) {
            return cache[key];
        }
        var newFormat = intlDateTimeFormat.apply(void 0, args);
        setCache(function (state) {
            var _a;
            return (__assign(__assign({}, state), (_a = {}, _a[key] = newFormat, _a)));
        });
        return newFormat;
    }, [cache, setCache]);
    var format = React.useCallback(function (value, type, options, timeOptions, UNSAFE_log) {
        if (type.startsWith('time-on-')) {
            var time = getDateFormatter(I18n.locale, __assign(__assign(__assign({}, getPresetDateTimeOptions('time')), { hour12: hour12, timeZone: timeZone }), timeOptions)).format(value);
            var date = getDateFormatter(I18n.locale, __assign(__assign(__assign({}, getPresetDateTimeOptions(type.replace('time-on-', ''))), { hour12: hour12, timeZone: timeZone }), options)).format(value);
            var result_1 = I18n.t('timeOnDate', {
                time: time,
                date: date,
                scope: 'core.dateTimeFormat',
            });
            if (UNSAFE_log) {
                consoleMessageFormat({
                    log: UNSAFE_log,
                    result: result_1,
                    timeZone: timeZone,
                    type: type,
                    value: value,
                });
            }
            return result_1;
        }
        if (type.endsWith('-at-time')) {
            var time = getDateFormatter(I18n.locale, __assign(__assign(__assign({}, getPresetDateTimeOptions('time')), { hour12: hour12, timeZone: timeZone }), timeOptions)).format(value);
            var date = getDateFormatter(I18n.locale, __assign(__assign(__assign({}, getPresetDateTimeOptions(type.replace('-at-time', ''))), { hour12: hour12, timeZone: timeZone }), options)).format(value);
            var result_2 = I18n.t('dateAtTime', {
                time: time,
                date: date,
                scope: 'core.dateTimeFormat',
            });
            if (UNSAFE_log) {
                consoleMessageFormat({
                    log: UNSAFE_log,
                    result: result_2,
                    timeZone: timeZone,
                    type: type,
                    value: value,
                });
            }
            return result_2;
        }
        var result = getDateFormatter(I18n.locale, __assign(__assign(__assign({}, getPresetDateTimeOptions(type)), { hour12: hour12, timeZone: timeZone }), options)).format(value);
        if (UNSAFE_log) {
            consoleMessageFormat({
                log: UNSAFE_log,
                timeZone: timeZone,
                type: type,
                result: result,
                value: value,
            });
        }
        return result;
    }, [getDateFormatter, I18n.locale, hour12, timeZone]);
    function shiftUtcToZonedTime(value, log) {
        if (value && timeZone) {
            var result = utcToZonedTime(value, timeZone);
            if (log) {
                consoleMessageCompareShift({
                    log: "".concat(log, " utcToZonedTime"),
                    timeZone: timeZone,
                    result: result,
                    value: value,
                });
            }
            return result;
        }
        if (log) {
            consoleMessageShiftNoShift({
                log: "".concat(log, " utcToZonedTime"),
                timeZone: timeZone,
                value: value,
            });
        }
        return value;
    }
    function shiftZonedTimeToUtc(value, log) {
        if (value && timeZone) {
            var result = zonedTimeToUtc(value, timeZone);
            if (log) {
                consoleMessageCompareShift({
                    log: "".concat(log, " zonedTimeToUtc"),
                    timeZone: timeZone,
                    result: result,
                    value: value,
                });
            }
            return result;
        }
        if (log) {
            consoleMessageShiftNoShift({
                log: "".concat(log, " zonedTimeToUtc"),
                timeZone: timeZone,
                value: value,
            });
        }
        return value;
    }
    var newDate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return timeZone
            ? utcToZonedTime(new (Date.bind.apply(Date, __spreadArray([void 0], args, false)))(), timeZone)
            : new (Date.bind.apply(Date, __spreadArray([void 0], args, false)))();
    };
    return {
        format: format,
        newDate: newDate,
        shiftUtcToZonedTime: shiftUtcToZonedTime,
        shiftZonedTimeToUtc: shiftZonedTimeToUtc,
    };
}
//# sourceMappingURL=DateTime.js.map