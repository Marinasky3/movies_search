import React from 'react';
export interface VisibilityConfig {
    afterHide?: () => void;
    afterShow?: () => void;
    initialIsVisible?: boolean;
}
interface VisibilityApi {
    hide: () => any;
    isVisible: boolean;
    show: () => any;
    toggle: () => any;
}
interface Props extends VisibilityConfig {
    children?: React.ReactNode;
}
export interface RenderProps extends VisibilityConfig {
    children: (props: VisibilityApi) => React.ReactElement<{}>;
}
export declare function useVisibility({ afterHide, afterShow, initialIsVisible, }: VisibilityConfig): VisibilityApi;
export declare function withVisibility<T>(config: VisibilityConfig): (Component: React.ComponentType<T>) => (props: T & {
    visibility: VisibilityConfig;
}) => JSX.Element;
export declare function Visibility({ children, ...props }: RenderProps): React.ReactElement<{}, string | React.JSXElementConstructor<any>>;
export declare const VisibilityContext: React.Context<VisibilityApi>;
export declare function VisibilityProvider({ children, ...props }: Props): JSX.Element;
export declare function useVisibilityContext(): VisibilityApi;
/**
 * @deprecated
 *
 * Please use `useVisibilityContext()` instead
 
* @deprecatedSince 10.20.0
 */
export declare const consumeVisibility: typeof useVisibilityContext;
export {};
