var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
/* HOOK */
function noop() { }
export function useVisibility(_a) {
    var _b = _a.afterHide, afterHide = _b === void 0 ? noop : _b, _c = _a.afterShow, afterShow = _c === void 0 ? noop : _c, _d = _a.initialIsVisible, initialIsVisible = _d === void 0 ? false : _d;
    var _e = React.useState(initialIsVisible), isVisible = _e[0], setVisibility = _e[1];
    var hide = function () {
        setVisibility(false);
        if (isVisible) {
            afterHide();
        }
    };
    var show = function () {
        setVisibility(true);
        if (!isVisible) {
            afterShow();
        }
    };
    var toggle = isVisible ? hide : show;
    return {
        hide: hide,
        isVisible: isVisible,
        show: show,
        toggle: toggle,
    };
}
/* DECORATOR */
export function withVisibility(config) {
    return function (Component) {
        return function WithVisiblity(props) {
            return (React.createElement(Component, __assign({}, props, { visibility: useVisibility(__assign(__assign({}, config), props.visibility)) })));
        };
    };
}
/* RENDER PROP */
export function Visibility(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var visibility = useVisibility(props);
    return typeof children === 'function' ? children(visibility) : children;
}
/* CONTEXT */
var noopCtx = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in a `<VisibilityProvider>`"));
}; };
export var VisibilityContext = React.createContext({
    isVisible: false,
    hide: noopCtx('hide'),
    show: noopCtx('show'),
    toggle: noopCtx('toggle'),
});
export function VisibilityProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(VisibilityContext.Provider, { value: useVisibility(props) }, children));
}
export function useVisibilityContext() {
    return React.useContext(VisibilityContext);
}
/**
 * @deprecated
 *
 * Please use `useVisibilityContext()` instead
 
* @deprecatedSince 10.20.0
 */
export var consumeVisibility = useVisibilityContext;
//# sourceMappingURL=Visibility.js.map