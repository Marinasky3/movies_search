var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
/* HOOK */
export function useInjectedScript(_a) {
    var id = _a.id, src = _a.src;
    var _b = React.useState(false), isLoaded = _b[0], setLoaded = _b[1];
    React.useEffect(function () {
        var existingScript = document.getElementById(id);
        if (existingScript) {
            setLoaded(true);
        }
        else {
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.id = id;
            script.onload = function () {
                setLoaded(true);
            };
            script.src = src;
            document.head && document.head.appendChild(script);
        }
    }, [id, src]);
    return { isLoaded: isLoaded, setLoaded: setLoaded };
}
/* DECORATOR */
export function withInjectedScript(config) {
    return function (Component) {
        return function WithInjectedScript(props) {
            return (React.createElement(Component, __assign({}, props, { injectedScript: useInjectedScript(__assign(__assign({}, config), props.injectedScript)) })));
        };
    };
}
/* RENDER PROP */
export function InjectedScript(_a) {
    var _b = _a.children, children = _b === void 0 ? null : _b, props = __rest(_a, ["children"]);
    var injectedScript = useInjectedScript(props);
    return typeof children === 'function' ? children(injectedScript) : children;
}
/* CONTEXT */
var noop = function (method) { return function () {
    return console.warn("Could not call `".concat(method, "`, please wrap your component in a `<InjectedScriptProvider>`"));
}; };
export var InjectedScriptContext = React.createContext({
    isLoaded: false,
    setLoaded: noop('setLoaded'),
});
export function InjectedScriptProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(InjectedScriptContext.Provider, { value: useInjectedScript(props) }, children));
}
export function useInjectedScriptContext() {
    return React.useContext(InjectedScriptContext);
}
export var consumeInjectedScript = useInjectedScriptContext;
//# sourceMappingURL=InjectedScript.js.map