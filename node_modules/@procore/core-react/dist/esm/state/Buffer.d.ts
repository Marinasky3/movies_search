import React from 'react';
interface BufferConfig {
    initialValue: string;
}
interface BufferApi {
    clear: () => void;
    reset: () => void;
    update: (value: string) => void;
    value: string;
}
interface Props extends BufferConfig {
    children?: React.ReactNode;
}
interface RenderProps extends BufferConfig {
    children: (props: BufferApi) => {};
}
export declare function useBuffer({ initialValue }: BufferConfig): BufferApi;
export declare function withBuffer<T>(config: BufferConfig): (Component: React.ComponentType<T>) => (props: T & {
    buffer: BufferConfig;
}) => JSX.Element;
export declare function Buffer({ children, ...props }: RenderProps): {};
export declare const BufferContext: React.Context<BufferApi>;
export declare function BufferProvider({ children, ...props }: Props): JSX.Element;
export declare function useBufferContext(): BufferApi;
/**
 * @deprecated
 *
 * please use `useBufferContext()`
 *
 * @deprecatedSince 10.20.0
 */
export declare const consumeBuffer: typeof useBufferContext;
export {};
