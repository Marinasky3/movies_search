import React from 'react';
import { RenderProp } from '../utils/types';
export declare type TriggerVariant = 'click' | 'hover' | 'none' | 'contextmenu' | 'focus' | 'always';
export interface TriggerConfig {
    disable: React.EventHandler<any>;
    disableKeys?: string[];
    enable: React.EventHandler<any>;
    enableKeys?: string[];
    isEnabled?: boolean;
    trigger?: TriggerVariant | TriggerVariant[];
    triggerRef: React.RefObject<HTMLElement>;
}
export interface TriggerProps extends TriggerConfig {
    children: React.ReactNode;
}
export interface TriggerRenderProps extends TriggerConfig, RenderProp<TriggerApi> {
}
export interface TriggerApi {
    disable: React.EventHandler<any>;
    enable: React.EventHandler<any>;
    isVisible: boolean;
    toggle: React.EventHandler<any>;
}
export declare function useTrigger({ disable, disableKeys, enable, enableKeys, isEnabled, trigger, triggerRef, }: TriggerConfig): TriggerApi;
export declare function withTrigger<T>(config: TriggerConfig): (Component: React.ComponentType<T>) => (props: T & {
    Trigger: TriggerConfig;
}) => JSX.Element;
export declare function Trigger({ children, triggerRef, ...props }: TriggerRenderProps): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
export declare const initTrigger: TriggerApi;
export declare const TriggerContext: React.Context<TriggerApi>;
export declare function TriggerProvider({ children, ...props }: TriggerProps): JSX.Element;
export declare function useTriggerContext(): TriggerApi;
/**
 * @deprecated
 *
 * Please use `useTriggerContext()`
 *
 * @deprecatedSince 10.20.0
 */
export declare const consumeTrigger: typeof useTriggerContext;
