var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createI18njs } from '@procore/core-i18n-js';
import * as R from 'ramda';
import React from 'react';
import { useDeprecation } from '../effects/Deprecation';
import deDE from '../locales/de-DE.json';
import enCA from '../locales/en-CA.json';
import enGB from '../locales/en-GB.json';
import en from '../locales/en.json';
import es from '../locales/es.json';
import esES from '../locales/es-ES.json';
import frCA from '../locales/fr-CA.json';
import frFR from '../locales/fr-FR.json';
/* Set up i18n-js */
var coreTranslations = {
    'de-DE': deDE,
    en: en,
    'en-CA': enCA,
    'en-GB': enGB,
    es: es,
    'es-ES': esES,
    'fr-CA': frCA,
    'fr-FR': frFR,
};
export function useI18n(_a) {
    var locale = _a.locale, _b = _a.translations, translations = _b === void 0 ? {} : _b;
    return createI18njs({
        locale: locale,
        translations: R.mergeDeepLeft(translations, coreTranslations),
    });
}
export var I18nContext = React.createContext(createI18njs({
    locale: 'en',
    translations: coreTranslations, // inject our translations
}));
export function I18nProvider(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React.createElement(I18nContext.Provider, { value: useI18n(props) }, children));
}
export function useI18nContext() {
    var ctx = React.useContext(I18nContext);
    if (!ctx) {
        // TODO investigate a way to do warnings that won't annoy people
        // we probably need to introduce a build system to have nice dev warnings
        // console.warn()
    }
    return ctx;
}
/**
 * @deprecated
 *
 * Please use `useI18nContext()`
 *
 * @deprecatedSince 10.20.0
 */
export function consumeI18n() {
    useDeprecation({ oldThing: 'consumeI18n', newThing: 'useI18nContext' });
    return useI18nContext();
}
//# sourceMappingURL=I18n.js.map