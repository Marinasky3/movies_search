{"MenuFooterProps":[{"name":"alignContent","type":"","required":false},{"name":"alignItems","type":"","required":false},{"name":"alignSelf","type":"","required":false},{"name":"children","type":"ReactNode","required":false,"description":"Instead of using the default children, you can pass in your own."},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"display","type":"","required":false},{"name":"flex","required":false,"description":"Alias to the `flex` property on a flexbox child."},{"name":"flexBasis","required":false,"description":"Alias to the `basis` property on a flexbox child."},{"name":"flexDirection","type":"","required":false,"description":"Alias to the `direction` property on a flexbox child."},{"name":"flexGrow","required":false,"description":"Alias to the `grow` property on a flexbox child."},{"name":"flexShrink","required":false,"description":"Alias to the `shrink` property on a flexbox child."},{"name":"flexWrap","type":"","required":false,"description":"Alias to the `wrap` property on a flexbox child."},{"name":"justifyContent","type":"","required":false},{"name":"margin","type":"string","required":false},{"name":"marginBottom","type":"","required":false},{"name":"marginLeft","type":"","required":false},{"name":"marginRight","type":"","required":false},{"name":"marginTop","type":"","required":false},{"name":"order","type":"number","required":false,"description":"Alias to the `order` property on a flexbox child"},{"name":"padding","type":"string","required":false},{"name":"paddingBottom","type":"","required":false},{"name":"paddingLeft","type":"","required":false},{"name":"paddingRight","type":"","required":false},{"name":"paddingTop","type":"","required":false},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"tabIndex","type":"number","required":false},{"name":"textAlign","type":"","required":false}],"MenuGroupProps":[{"name":"className","type":"string","required":false},{"name":"clickable","type":"boolean","required":false,"description":"Can the group item be clicked"},{"name":"item","type":"any","required":false,"description":"Value which can be passed around various callback functions. Can be anything!"}],"MenuHeaderProps":[{"name":"children","type":"ReactNode","required":false,"description":"Instead of using the default children, you can pass in your own."},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"tabIndex","type":"number","required":false}],"MenuItemProps":[{"name":"children","type":"ReactNode","required":false},{"name":"className","type":"string","required":false},{"name":"index","type":"number","required":false},{"name":"item","type":"any","required":false,"description":"Value which can be passed around various callback functions. Can be anything!"},{"name":"ref","type":"Ref","required":false},{"name":"selected","type":"boolean","required":false,"description":"Is the item selected"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"suggested","type":"boolean","required":false},{"name":"onClick","type":"any","required":true}],"MenuOptionsProps":[{"name":"children","type":"ReactNode","required":false},{"name":"className","type":"string","required":false},{"name":"padding","type":"string","required":false},{"name":"scrollable","type":"boolean","required":false}],"MenuProps":[{"name":"UNSAFE_closesOnSelect","type":"boolean","required":false},{"name":"children","type":"ReactNode","required":false,"description":"Instead of using the default children, you can pass in your own."},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"isSelectable","type":"ElementTypeChecker","required":false,"description":"<CodeBlock>\n (element: any, index?: number, list?: any[]) => boolean\n</CodeBlock>","deprecated":"\n\nThe `isSelectable` prop has been deprecated and will be removed in a future version.\nMenu item selection is now handled internally and there is no need to configure this\nanymore.\n"},{"name":"keyHandlerRef","type":"RefObject","required":false,"description":"Ref object which will get the key handler listeners"},{"name":"scrollable","type":"boolean","required":false},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"usingHook","type":"MenuHook","required":false},{"name":"onScrollBottom","type":"void","required":true},{"name":"onSelect","type":"any","required":true,"description":"<div>Callback for selecting an item from the menu</div>\n<CodeBlock>\n{\n  '({ event: ReactEvent, item: Menu.Item.props.item, group: bool }) => void'\n}\n</CodeBlock>\n<div>\n <Code>item</Code> will be the <Code>item</Code> prop supplied to the{' '}\n <Code>Item</Code> component\n <br />\n <Code>group</Code> will be <Code>true</Code> if the clicked item was\n a group label\n</div>"}],"MenuSearchProps":[{"name":"autoFocus","type":"boolean","required":false},{"name":"error","type":"boolean","required":false,"description":"Controls the error state of the `Input`, changing the\nbackground color and border colors to red"},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the menu search's configurable strings. Defaults to\nusing the core library's default strings."},{"name":"initialValue","type":"string","required":false},{"name":"typeahead","type":"boolean","required":false,"deprecated":"\n\nThe `typeahead` prop has been deprecated and will be removed in a future version.\n\nA new component, `Typeahead`, has been introduced with specific UX for typeahead-like\nbehavior. Please use this component instead.\n\n**Before**\n\n<Search typeahead onChange={() => { ... }} />\n\n**After**\n\n<Typeahead onChange={() => { ... }} />\n"},{"name":"usingHook","type":"","required":false},{"name":"value","type":"string","required":false,"description":"Initial value string"},{"name":"variant","required":false,"deprecated":"Use the `error` prop instead\n"},{"name":"onClear","type":"void","required":true},{"name":"onSubmit","type":"void","required":true,"description":"<div>Input handler for search variant</div>\n<CodeBlock>(value: string) => void</CodeBlock>"}]}