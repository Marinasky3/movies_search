{"BaseFieldProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false,"description":"A subcomponent to render on a particular view.\n<br />\n<br />\nOne or all of:\n<br />\n<Code>Form.X.Create, Form.X.Read, Form.X.Update</Code>"},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldAPI":[{"name":"helpers","type":"FieldHelperProps","required":true},{"name":"input","type":"FieldInputProps","required":true},{"name":"messages","required":true},{"name":"meta","type":"FieldMetaProps","required":true}],"FieldCheckboxComponentProps":[{"name":"checked","type":"boolean","required":false,"description":"Checked state of the checkbox"},{"name":"children","type":"ReactNode","required":false,"description":"The contents of the checkbox label"},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"disabled","type":"boolean","required":false,"description":"Disabled state of the checkbox"},{"name":"error","type":"boolean","required":false,"description":"Error state of the checkbox"},{"name":"field","type":"","required":true},{"name":"i18nScope","type":"string","required":false},{"name":"indeterminate","type":"boolean","required":false,"description":"Indeterminate state of the checkbox"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"}],"FieldCheckboxProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"checked","type":"boolean","required":false,"description":"Checked state of the checkbox"},{"name":"children","required":false},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"i18nScope","type":"string","required":false},{"name":"indeterminate","type":"boolean","required":false,"description":"Indeterminate state of the checkbox"},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldCheckboxesComponentProps":[{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"field","type":"","required":true},{"name":"options","required":false},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"isDisabledOption","type":"boolean","required":true},{"name":"isIndeterminateOption","type":"boolean","required":true}],"FieldCheckboxesProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"options","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"isDisabledOption","type":"boolean","required":true},{"name":"isIndeterminateOption","type":"boolean","required":true}],"FieldConfig":[{"name":"disabled","type":"boolean","required":false},{"name":"error","required":false},{"name":"name","type":"string","required":true},{"name":"required","type":"boolean","required":false},{"name":"validate","type":"FieldValidator","required":false},{"name":"view","required":false},{"name":"getId","required":true}],"FieldCurrencyComponentProps":[{"name":"decimalScale","required":false,"description":"The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.","defaultValue":"true\n"},{"name":"defaultValue","type":"","required":false,"description":"Initial value of an uncontrolled component"},{"name":"error","type":"boolean","required":false,"description":"Controls the error state of the `Input`, changing the\nbackground color and border colors to red"},{"name":"field","type":"","required":true},{"name":"fillDecimalScale","type":"","required":false,"description":"<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus."},{"name":"locale","type":"","required":false,"description":"A string with a BCP 47 language tag or an array of such strings which specifies number formatting.","defaultValue":"en-US\n"},{"name":"prefix","type":"string","required":false,"description":"A string which is added to input as a prefix."},{"name":"qa","type":"QaTags","required":false},{"name":"step","type":"number","required":false,"description":"A stepping interval which is used in incrementer. Zero value turns off incrementer.","defaultValue":"0\n"},{"name":"suffix","type":"string","required":false,"description":"A string which is added to input as a suffix"},{"name":"value","type":"","required":false,"description":"Value of a controlled component"},{"name":"onChange","type":"void","required":true,"description":"`(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`."}],"FieldCurrencyProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldDateComponentProps":[{"name":"beforeHide","type":"BeforeCallback","required":false,"description":"<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"},{"name":"beforeShow","type":"BeforeCallback","required":false,"description":"<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"disabled","type":"boolean","required":false},{"name":"error","type":"boolean","required":false,"description":"Error variant"},{"name":"field","type":"","required":true},{"name":"tabIndex","type":"number","required":false},{"name":"value","type":"Date","required":false},{"name":"variant","type":"DateInputVariant","required":false},{"name":"afterHide","type":"void","required":true},{"name":"afterShow","type":"void","required":true},{"name":"disabledDate","type":"boolean","required":true},{"name":"onChange","type":"void","required":true},{"name":"onClear","type":"void","required":true}],"FieldDateProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false,"description":"<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"},{"name":"beforeShow","type":"BeforeCallback","required":false,"description":"<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"},{"name":"children","required":false},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tabIndex","type":"number","required":false},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"value","type":"Date","required":false},{"name":"variant","type":"DateInputVariant","required":false},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"afterHide","type":"void","required":true},{"name":"afterShow","type":"void","required":true},{"name":"disabledDate","type":"boolean","required":true},{"name":"onChange","type":"void","required":true},{"name":"onClear","type":"void","required":true}],"FieldGroupSelectComponentProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"className","type":"string","required":false},{"name":"disabled","type":"boolean","required":false},{"name":"emptyMessage","type":"string","required":false},{"name":"field","type":"","required":true},{"name":"groups","required":false,"description":"Array of available collections, field options contain option id's\n`{ id: number label: string options: Option[] groupId?: string | number }`\n`arrayOf: [object]`"},{"name":"loading","type":"boolean","required":false},{"name":"onBlur","type":"FocusEventHandler","required":false},{"name":"onFocus","type":"FocusEventHandler","required":false},{"name":"onScrollBottom","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"placeholder","type":"string","required":false},{"name":"placement","type":"","required":false},{"name":"qa","type":"QaTags","required":false},{"name":"tabIndex","type":"number","required":false},{"name":"value","required":false},{"name":"getGroup","required":true,"description":"Callback for each entry in groups for keying and optimizations\n`(option: T) => Option[]`"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"getOptGroup","required":true,"description":"Callback for each entry in groups and options to define relation in optgroups\n`(option: OptionItem) => number | string`"},{"name":"groupRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each group option\n`(groupOption: T, props: OptionRendererProps) => React.ReactNode`"},{"name":"isOptionDisabled","type":"boolean","required":true},{"name":"onChange","type":"void","required":true,"description":"Callback with options selected when selecting or removing an option\n`(value: T[]) => void`"},{"name":"onSearch","type":"void","required":true},{"name":"optGroupRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in `optgroups`\n`(group: GroupItem) => React.ReactNode`"},{"name":"optionRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each option\n`(option: T, props: OptionRendererProps) => React.ReactNode`"},{"name":"tokenRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"}],"FieldGroupSelectProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"children","required":false},{"name":"className","type":"string","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"emptyMessage","type":"string","required":false},{"name":"error","required":false},{"name":"groups","required":false,"description":"Array of available collections, field options contain option id's\n`{ id: number label: string options: Option[] groupId?: string | number }`\n`arrayOf: [object]`"},{"name":"label","type":"string","required":false},{"name":"loading","type":"boolean","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"onBlur","type":"FocusEventHandler","required":false},{"name":"onFocus","type":"FocusEventHandler","required":false},{"name":"onScrollBottom","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"placeholder","type":"string","required":false},{"name":"placement","type":"","required":false},{"name":"qa","type":"QaTags","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tabIndex","type":"number","required":false},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"value","required":false},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getGroup","required":true,"description":"Callback for each entry in groups for keying and optimizations\n`(option: T) => Option[]`"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"getOptGroup","required":true,"description":"Callback for each entry in groups and options to define relation in optgroups\n`(option: OptionItem) => number | string`"},{"name":"groupRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each group option\n`(groupOption: T, props: OptionRendererProps) => React.ReactNode`"},{"name":"isOptionDisabled","type":"boolean","required":true},{"name":"onChange","type":"void","required":true,"description":"Callback with options selected when selecting or removing an option\n`(value: T[]) => void`"},{"name":"onSearch","type":"void","required":true},{"name":"optGroupRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in `optgroups`\n`(group: GroupItem) => React.ReactNode`"},{"name":"optionRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each option\n`(option: T, props: OptionRendererProps) => React.ReactNode`"},{"name":"tokenRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"}],"FieldMultiSelectComponentProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"className","type":"string","required":false},{"name":"disabled","type":"boolean","required":false},{"name":"emptyMessage","type":"string","required":false},{"name":"field","type":"","required":true},{"name":"getGroup","required":false},{"name":"loading","type":"boolean","required":false},{"name":"onBlur","type":"FocusEventHandler","required":false},{"name":"onFocus","type":"FocusEventHandler","required":false},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"placeholder","type":"string","required":false},{"name":"placement","type":"","required":false},{"name":"qa","type":"QaTags","required":false},{"name":"tabIndex","type":"number","required":false},{"name":"value","required":false,"description":"Array of the currently selected values"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"groupHeaderRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in <Code>groups</Code>\n<CodeBlock>{'(group: GroupItem) => React.ReactNode'}</CodeBlock>"},{"name":"isOptionDisabled","type":"boolean","required":true},{"name":"onChange","type":"void","required":true},{"name":"optionRenderer","type":"ReactNode","required":true},{"name":"tokenRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"}],"FieldMultiSelectProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"children","required":false},{"name":"className","type":"string","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"emptyMessage","type":"string","required":false},{"name":"error","required":false},{"name":"getGroup","required":false},{"name":"label","type":"string","required":false},{"name":"loading","type":"boolean","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"onBlur","type":"FocusEventHandler","required":false},{"name":"onFocus","type":"FocusEventHandler","required":false},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"placeholder","type":"string","required":false},{"name":"placement","type":"","required":false},{"name":"qa","type":"QaTags","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tabIndex","type":"number","required":false},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"value","required":false,"description":"Array of the currently selected values"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"groupHeaderRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in <Code>groups</Code>\n<CodeBlock>{'(group: GroupItem) => React.ReactNode'}</CodeBlock>"},{"name":"isOptionDisabled","type":"boolean","required":true},{"name":"onChange","type":"void","required":true},{"name":"optionRenderer","type":"ReactNode","required":true},{"name":"tokenRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"}],"FieldNumberComponentProps":[{"name":"decimalScale","required":false,"description":"The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.","defaultValue":"true\n"},{"name":"defaultValue","type":"","required":false,"description":"Initial value of an uncontrolled component"},{"name":"error","type":"boolean","required":false,"description":"Controls the error state of the `Input`, changing the\nbackground color and border colors to red"},{"name":"field","type":"","required":true},{"name":"fillDecimalScale","type":"","required":false,"description":"<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus."},{"name":"locale","type":"","required":false,"description":"A string with a BCP 47 language tag or an array of such strings which specifies number formatting.","defaultValue":"en-US\n"},{"name":"prefix","type":"string","required":false,"description":"A string which is added to input as a prefix."},{"name":"qa","type":"QaTags","required":false},{"name":"step","type":"number","required":false,"description":"A stepping interval which is used in incrementer. Zero value turns off incrementer.","defaultValue":"0\n"},{"name":"suffix","type":"string","required":false,"description":"A string which is added to input as a suffix"},{"name":"value","type":"","required":false,"description":"Value of a controlled component"},{"name":"onChange","type":"void","required":true,"description":"`(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`."}],"FieldNumberProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldPillSelectComponentProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false,"description":"Make the Select button 100% width"},{"name":"disabled","type":"boolean","required":false},{"name":"emptyMessage","type":"string","required":false,"description":"When there are no children this will render"},{"name":"field","type":"","required":true},{"name":"footer","type":"ReactNode","required":false},{"name":"hideDelay","type":"number","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."},{"name":"loading","type":"boolean","required":false,"description":"If the select is loading"},{"name":"onClear","required":false},{"name":"onScrollBottom","required":false},{"name":"onSelect","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false,"description":"Array of available options"},{"name":"optionsRef","type":"RefObject","required":false},{"name":"placeholder","type":"string","required":false,"description":"Renders when the label is blank"},{"name":"placement","type":"","required":false,"description":"The placement of the overlay"},{"name":"qa","type":"Partial","required":false},{"name":"showDelay","type":"number","required":false},{"name":"tabIndex","type":"number","required":false,"description":"Configurable tabIndex for the select button"},{"name":"getColor","type":"","required":true,"description":"A function returning the display color of an option's `Pill`\n`(option: unknown) => PillColor`","defaultValue":"`(option) => (option as PillOption).color`\n"},{"name":"getGroup","required":true,"description":"A function returning group ID for a given option to define a relation to `optgroups`\n`(option: unknown) => string | number`","defaultValue":"`(option) => (option as PillOption).groupId`\n"},{"name":"getId","type":"Id","required":true,"description":"A function returning ID of a given option\n`(option: unknown) => string | number`","defaultValue":"`(option) => (option as PillOption).id`\n"},{"name":"getLabel","type":"string","required":true,"description":"A function returning label of an option\n`(option: unknown) => string`","defaultValue":"`(option) => (option as PillOption).label`\n"},{"name":"getSuggested","required":true,"description":"A function returning `boolean` value to suggest this option if nothing is selected.\n`(option: unknown) => boolean`","defaultValue":"`(option) => (option as PillOption).suggested`\n"},{"name":"groupGetId","type":"Id","required":true,"description":"A function returning the ID of a group\n`(group: unknown) => string | number`","defaultValue":"`(group) => (group as PillOptgroup).id`\n"},{"name":"groupGetLabel","type":"string","required":true,"description":"A function returning label of a group\n`(group: unknown) => string`","defaultValue":"`(group) => (group as PillOptgroup).label`\n"},{"name":"onSearch","type":"void","required":true,"description":"Adds a search bar to the select."}],"FieldPillSelectProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false,"description":"Make the Select button 100% width"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"emptyMessage","type":"string","required":false,"description":"When there are no children this will render"},{"name":"error","required":false},{"name":"footer","type":"ReactNode","required":false},{"name":"hideDelay","type":"number","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."},{"name":"label","type":"string","required":false},{"name":"loading","type":"boolean","required":false,"description":"If the select is loading"},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"onClear","required":false},{"name":"onScrollBottom","required":false},{"name":"onSelect","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false,"description":"Array of available options"},{"name":"optionsRef","type":"RefObject","required":false},{"name":"placeholder","type":"string","required":false,"description":"Renders when the label is blank"},{"name":"placement","type":"","required":false,"description":"The placement of the overlay"},{"name":"qa","type":"Partial","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"showDelay","type":"number","required":false},{"name":"tabIndex","type":"number","required":false,"description":"Configurable tabIndex for the select button"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getColor","type":"","required":true,"description":"A function returning the display color of an option's `Pill`\n`(option: unknown) => PillColor`","defaultValue":"`(option) => (option as PillOption).color`\n"},{"name":"getGroup","required":true,"description":"A function returning group ID for a given option to define a relation to `optgroups`\n`(option: unknown) => string | number`","defaultValue":"`(option) => (option as PillOption).groupId`\n"},{"name":"getId","type":"Id","required":true,"description":"A function returning ID of a given option\n`(option: unknown) => string | number`","defaultValue":"`(option) => (option as PillOption).id`\n"},{"name":"getLabel","type":"string","required":true,"description":"A function returning label of an option\n`(option: unknown) => string`","defaultValue":"`(option) => (option as PillOption).label`\n"},{"name":"getSuggested","required":true,"description":"A function returning `boolean` value to suggest this option if nothing is selected.\n`(option: unknown) => boolean`","defaultValue":"`(option) => (option as PillOption).suggested`\n"},{"name":"groupGetId","type":"Id","required":true,"description":"A function returning the ID of a group\n`(group: unknown) => string | number`","defaultValue":"`(group) => (group as PillOptgroup).id`\n"},{"name":"groupGetLabel","type":"string","required":true,"description":"A function returning label of a group\n`(group: unknown) => string`","defaultValue":"`(group) => (group as PillOptgroup).label`\n"},{"name":"onSearch","type":"void","required":true,"description":"Adds a search bar to the select."}],"FieldProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldRadioButtonsComponentProps":[{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"field","type":"","required":true},{"name":"options","required":false},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"isDisabledOption","type":"boolean","required":true}],"FieldRadioButtonsProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"className","type":"string","required":false,"description":"Additional classNames"},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"options","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"style","type":"CSSProperties","required":false,"description":"Additional CSS styles"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"isDisabledOption","type":"boolean","required":true}],"FieldRichTextComponentProps":[{"name":"disabled","type":"boolean","required":false},{"name":"error","type":"boolean","required":false},{"name":"field","type":"","required":true},{"name":"init","required":false},{"name":"initialValue","type":"string","required":false,"deprecated":"\n`initialValue` has been deprecated and will be removed in a future version.\nPlease use the `value` prop instead\n\nThe first value passed into `value` prop will be the `TextEditor` initial\nvalue. Changing the value will update the text of the `TextEditor`.\nThe editor should be controlled via the combination of `value`\nand `onChange` props.\n\n**Before**\n\n`<TextEditor initialValue=\"Hello World\" />`\n\n**After**\n\n`<TextEditor value=\"Hello World\" />`\n"},{"name":"locale","type":"Locale","required":false,"description":"Locale which will be used used for localization. Can be passed directly or\nset by wrapping components in I18n provider. Icelandic (is-IS) is not\nactually supported by TinyMCE, so it is defaulted to english."},{"name":"plugins","required":false,"description":"<div>\n Array of plugins to use with the editor in addition to the defaults.\n Can be any of:\n</div>\n<CodeBlock>\n [{plugins.map((plugin) => `'${plugin}'`).join(', ')}]\n</CodeBlock>"},{"name":"onChange","type":"void","required":true,"description":"<div>onChange event handler for text editor area</div>\n<CodeBlock>(content: string) => void</CodeBlock>"}],"FieldRichTextProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","type":"boolean","required":false},{"name":"init","required":false},{"name":"initialValue","type":"string","required":false,"deprecated":"\n`initialValue` has been deprecated and will be removed in a future version.\nPlease use the `value` prop instead\n\nThe first value passed into `value` prop will be the `TextEditor` initial\nvalue. Changing the value will update the text of the `TextEditor`.\nThe editor should be controlled via the combination of `value`\nand `onChange` props.\n\n**Before**\n\n`<TextEditor initialValue=\"Hello World\" />`\n\n**After**\n\n`<TextEditor value=\"Hello World\" />`\n"},{"name":"label","type":"string","required":false},{"name":"locale","type":"Locale","required":false,"description":"Locale which will be used used for localization. Can be passed directly or\nset by wrapping components in I18n provider. Icelandic (is-IS) is not\nactually supported by TinyMCE, so it is defaulted to english."},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"plugins","required":false,"description":"<div>\n Array of plugins to use with the editor in addition to the defaults.\n Can be any of:\n</div>\n<CodeBlock>\n [{plugins.map((plugin) => `'${plugin}'`).join(', ')}]\n</CodeBlock>"},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"onChange","type":"void","required":true,"description":"<div>onChange event handler for text editor area</div>\n<CodeBlock>(content: string) => void</CodeBlock>"}],"FieldSelectComponentProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false,"description":"Make the Select button 100% width"},{"name":"disabled","type":"boolean","required":false},{"name":"emptyMessage","type":"string","required":false,"description":"When there are no children this will render"},{"name":"field","type":"","required":true},{"name":"footer","type":"ReactNode","required":false},{"name":"hideDelay","type":"number","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."},{"name":"label","type":"ReactNode","required":false},{"name":"loading","type":"boolean","required":false,"description":"If the select is loading"},{"name":"onClear","required":false,"description":"Callback for when cleared. Default enabled, has clear icon."},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false,"description":"Callback for when searching. Default enabled, has seach bar in menu."},{"name":"onSelect","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"optionsRef","type":"RefObject","required":false},{"name":"placeholder","type":"string","required":false,"description":"Renders when the label is blank"},{"name":"placement","type":"","required":false,"description":"The placement of the overlay"},{"name":"qa","type":"Partial","required":false},{"name":"showDelay","type":"number","required":false},{"name":"tabIndex","type":"number","required":false,"description":"Configurable tabIndex for the select button"},{"name":"getGroup","required":true,"description":"Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>optgroups</Code>\n<Code>{'(option: OptionItem) => string | number'}</Code>"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"groupGetId","required":true},{"name":"groupGetLabel","type":"string","required":true,"description":"<div>\n The display label of a group\n <Code>{'(group: GroupItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group: GroupItem) => group.label || group.name'}</Code>\n</div>"},{"name":"groupHeaderRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in <Code>optgroups</Code>\n<Code>{'(group: GroupItem) => React.ReactNode'}</Code>"},{"name":"isSuggestedOption","type":"boolean","required":true,"description":"If nothing is selected, suggest this option. From{' '}\n<Code>{'Select.Option suggested'}</Code>.\n<Code>{'(option: OptionItem) => boolean'}</Code>"},{"name":"onBlur","type":"void","required":true},{"name":"optionRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each <Code>option</Code>\n<Code>{'(option: OptionItem) => React.ReactNode'}</Code>"},{"name":"searchComparator","type":"boolean","required":true,"description":"<div>Customize how search works</div>\n<Code>{'(query: string, value: string) => boolean'}</Code>"}],"FieldSelectProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false,"description":"Make the Select button 100% width"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"emptyMessage","type":"string","required":false,"description":"When there are no children this will render"},{"name":"error","required":false},{"name":"footer","type":"ReactNode","required":false},{"name":"hideDelay","type":"number","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."},{"name":"label","type":"string","required":false},{"name":"loading","type":"boolean","required":false,"description":"If the select is loading"},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"onClear","required":false,"description":"Callback for when cleared. Default enabled, has clear icon."},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false,"description":"Callback for when searching. Default enabled, has seach bar in menu."},{"name":"onSelect","required":false},{"name":"optgroups","required":false,"description":"Array of available option groups"},{"name":"options","required":false},{"name":"optionsRef","type":"RefObject","required":false},{"name":"placeholder","type":"string","required":false,"description":"Renders when the label is blank"},{"name":"placement","type":"","required":false,"description":"The placement of the overlay"},{"name":"qa","type":"Partial","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"showDelay","type":"number","required":false},{"name":"tabIndex","type":"number","required":false,"description":"Configurable tabIndex for the select button"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getGroup","required":true,"description":"Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>optgroups</Code>\n<Code>{'(option: OptionItem) => string | number'}</Code>"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"groupGetId","required":true},{"name":"groupGetLabel","type":"string","required":true,"description":"<div>\n The display label of a group\n <Code>{'(group: GroupItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group: GroupItem) => group.label || group.name'}</Code>\n</div>"},{"name":"groupHeaderRenderer","type":"ReactNode","required":true,"description":"Callback for rendering header for each entry in <Code>optgroups</Code>\n<Code>{'(group: GroupItem) => React.ReactNode'}</Code>"},{"name":"isSuggestedOption","type":"boolean","required":true,"description":"If nothing is selected, suggest this option. From{' '}\n<Code>{'Select.Option suggested'}</Code>.\n<Code>{'(option: OptionItem) => boolean'}</Code>"},{"name":"onBlur","type":"void","required":true},{"name":"optionRenderer","type":"ReactNode","required":true,"description":"Callback for rendering each <Code>option</Code>\n<Code>{'(option: OptionItem) => React.ReactNode'}</Code>"},{"name":"searchComparator","type":"boolean","required":true,"description":"<div>Customize how search works</div>\n<Code>{'(query: string, value: string) => boolean'}</Code>"}],"FieldTextAreaComponentProps":[{"name":"error","type":"boolean","required":false,"description":"Controls the error state of the `TextArea`, changing the\nbackground color and border colors to red"},{"name":"field","type":"","required":true},{"name":"resize","required":false,"description":"Controls the resize rules for the `TextArea`"},{"name":"variant","required":false,"deprecated":"\nThe `variant` prop has been deprecated and will be removed in a future version.\nPlease use the `error` boolean prop instead.\n\n**Before**\n\n`<TextArea variant=\"error\" />`\n\n**After**\n\n`<TextArea error />`\n"}],"FieldTextAreaProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"resize","required":false,"description":"Controls the resize rules for the `TextArea`"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"variant","required":false,"deprecated":"\nThe `variant` prop has been deprecated and will be removed in a future version.\nPlease use the `error` boolean prop instead.\n\n**Before**\n\n`<TextArea variant=\"error\" />`\n\n**After**\n\n`<TextArea error />`\n"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldTextComponentProps":[{"name":"error","type":"boolean","required":false,"description":"Controls the error state of the `Input`, changing the\nbackground color and border colors to red"},{"name":"field","type":"","required":true},{"name":"variant","required":false,"deprecated":"Use the `error` prop instead\n"}],"FieldTextProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"variant","required":false,"deprecated":"Use the `error` prop instead\n"},{"name":"view","required":false,"description":"Determines show or edit state of field."}],"FieldTieredSelectComponentProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"disabled","type":"boolean","required":false},{"name":"field","type":"","required":true},{"name":"getValueString","type":"GetValueString","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."},{"name":"loading","type":"boolean","required":false},{"name":"loadingMore","type":"boolean","required":false,"description":"Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."},{"name":"onClear","required":false},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false},{"name":"options","required":false},{"name":"selectableTiers","type":"boolean","required":false,"description":"If true, any tier is selectable. If false, only leaf nodes are selectable"},{"name":"tabIndex","type":"number","required":false},{"name":"value","required":false,"description":"Flat array of tier objects that represents the selected value"},{"name":"getGroupId","type":"Id","required":true,"description":"Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"getNextGroupId","type":"Id","required":true,"description":"Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"},{"name":"isLeaf","type":"boolean","required":true},{"name":"isTierDisabled","required":true},{"name":"onChange","type":"void","required":true,"description":"<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"},{"name":"onNavigate","type":"void","required":true,"description":"Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"},{"name":"onQuickCreate","type":"void","required":true,"description":"Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"}],"FieldTieredSelectProps":[{"name":"afterHide","required":false},{"name":"afterShow","required":false},{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"beforeHide","type":"BeforeCallback","required":false},{"name":"beforeShow","type":"BeforeCallback","required":false},{"name":"block","type":"boolean","required":false},{"name":"children","required":false},{"name":"colStart","required":false,"description":"Starting location of column. For traditional variant, this does not exist\nand is not necessary."},{"name":"colWidth","required":false,"description":"Width of column. For traditional variant, will be either 6 or 12."},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"getValueString","type":"GetValueString","required":false},{"name":"i18nScope","type":"string","required":false,"description":"The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."},{"name":"label","type":"string","required":false},{"name":"loading","type":"boolean","required":false},{"name":"loadingMore","type":"boolean","required":false,"description":"Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"onClear","required":false},{"name":"onScrollBottom","required":false},{"name":"onSearch","required":false},{"name":"options","required":false},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"selectableTiers","type":"boolean","required":false,"description":"If true, any tier is selectable. If false, only leaf nodes are selectable"},{"name":"tabIndex","type":"number","required":false},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"value","required":false,"description":"Flat array of tier objects that represents the selected value"},{"name":"view","required":false,"description":"Determines show or edit state of field."},{"name":"getGroupId","type":"Id","required":true,"description":"Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"getNextGroupId","type":"Id","required":true,"description":"Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"},{"name":"isLeaf","type":"boolean","required":true},{"name":"isTierDisabled","required":true},{"name":"onChange","type":"void","required":true,"description":"<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"},{"name":"onNavigate","type":"void","required":true,"description":"Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"},{"name":"onQuickCreate","type":"void","required":true,"description":"Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"}],"FormContextAPI":[{"name":"different","type":"boolean","required":true},{"name":"disabled","type":"boolean","required":true},{"name":"enableReinitialize","type":"boolean","required":false},{"name":"validationSchema","type":"any","required":false,"description":"A <a href=\"https://github.com/jquense/yup\">Yup</a> object schema to\nvalidate all values.\n<CodeBlock>\n {`Yup.object().shape({\n   input_name: Yup.mixed().required()\n })`}\n</CodeBlock>\nThis is a great way to get error messages into the component. In\naddition, if using Yup for required, those fields will automatically\nget the required asterisk and highlight error."},{"name":"variant","required":true,"description":"Toggle between modern and traditional form styles. Leave blank for the\nmodern label-above layout."},{"name":"view","required":true,"description":"Determines show or edit state of form."},{"name":"setFieldDifferent","type":"void","required":true}],"FormErrorBannerProps":[{"name":"i18nScope","type":"string","required":false},{"name":"item","type":"string","required":true}],"FormProps":[{"name":"children","type":"ReactNode","required":true},{"name":"disabled","type":"boolean","required":false,"description":"Disable all fields at once."},{"name":"enableConfirmNavigation","type":"boolean","required":false,"description":"Enable a browser confirmation about losing of unsaved data when the\nform values are visually different from the initial values. Uses{' '}\n<Code>window.onbeforeunload</Code>"},{"name":"variant","required":false,"description":"Toggle between modern and traditional form styles. Leave blank for the modern label-above layout."},{"name":"view","required":false,"description":"Determines show or edit state of form."}],"GroupedOptionsConfig":[{"name":"optgroups","required":false},{"name":"options","required":false},{"name":"value","type":"","required":false},{"name":"comparator","type":"boolean","required":true},{"name":"getGroup","required":true},{"name":"getId","required":true,"description":"<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"},{"name":"getLabel","type":"string","required":true,"description":"<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"},{"name":"groupGetId","required":true,"description":"<div>\n The id of group{' '}\n <Code>{'(group: GroupItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group) => group.id'}</Code>\n</div>"}],"TraditionalBaseFieldProps":[{"name":"as","required":false,"description":"Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"},{"name":"children","required":false,"description":"A subcomponent to render on a particular view.\n<br />\n<br />\nOne or all of:\n<br />\n<Code>Form.X.Create, Form.X.Read, Form.X.Update</Code>"},{"name":"colWidth","required":false},{"name":"data-qa","type":"string","required":false},{"name":"disabled","type":"boolean","required":false,"description":"Specify disabled. Field disabled replaces the overall Form disabled state."},{"name":"error","required":false},{"name":"label","type":"string","required":false},{"name":"name","type":"string","required":true,"description":"Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."},{"name":"required","type":"boolean","required":false,"description":"The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"},{"name":"tooltip","type":"any","required":false},{"name":"validate","type":"FieldValidator","required":false,"description":"The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"},{"name":"view","required":false,"description":"Determines show or edit state of field."}]}