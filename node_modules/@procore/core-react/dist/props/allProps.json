{
	"id": 0,
	"name": "@procore/core-react",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 3655,
			"name": "$BoxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3657,
					"name": "$alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 171,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					}
				},
				{
					"id": 3658,
					"name": "$alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 172,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					}
				},
				{
					"id": 3659,
					"name": "$alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 173,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					}
				},
				{
					"id": 3656,
					"name": "$as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "li"
							},
							{
								"type": "literal",
								"value": "ol"
							},
							{
								"type": "literal",
								"value": "ul"
							}
						]
					}
				},
				{
					"id": 3660,
					"name": "$bgColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					}
				},
				{
					"id": 3661,
					"name": "$display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					}
				},
				{
					"id": 3662,
					"name": "$flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 176,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3663,
					"name": "$flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 177,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3664,
					"name": "$flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 178,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					}
				},
				{
					"id": 3665,
					"name": "$flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 179,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3666,
					"name": "$flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3667,
					"name": "$flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					}
				},
				{
					"id": 3668,
					"name": "$height",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3669,
					"name": "$justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 183,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					}
				},
				{
					"id": 3670,
					"name": "$margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 184,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3671,
					"name": "$marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 185,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3672,
					"name": "$marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 186,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3673,
					"name": "$marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 187,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3674,
					"name": "$marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3675,
					"name": "$minHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 189,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3676,
					"name": "$minWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 190,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3677,
					"name": "$order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 191,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3678,
					"name": "$padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 192,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3679,
					"name": "$paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 193,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3680,
					"name": "$paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 194,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3681,
					"name": "$paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 195,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3682,
					"name": "$paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 196,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3683,
					"name": "$textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 197,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					}
				},
				{
					"id": 3684,
					"name": "$width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 198,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3657,
						3658,
						3659,
						3656,
						3660,
						3661,
						3662,
						3663,
						3664,
						3665,
						3666,
						3667,
						3668,
						3669,
						3670,
						3671,
						3672,
						3673,
						3674,
						3675,
						3676,
						3677,
						3678,
						3679,
						3680,
						3681,
						3682,
						3683,
						3684
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 169,
					"character": 17
				}
			]
		},
		{
			"id": 629,
			"name": "AvatarIconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 631,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 632,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 630,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The icon to display",
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `string` type icon has been deprecated and will be removed in the future.\nPlease use a React icon component from the `@procore/core-icons/dist` package.\n\n**Before**\n\n```\n<Avatar>\n  <Avatar.Icon icon=\"building\" />\n</Avatar>\n```\n\n**After**\n\n```\n<Avatar>\n  <Avatar.Icon icon={<Building />} />\n</Avatar>\n```\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 633,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						631,
						632,
						630,
						633
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
					"line": 41,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 639,
			"name": "AvatarLabelProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 640,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 641,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 642,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						640,
						641,
						642
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
					"line": 78,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 634,
			"name": "AvatarPortraitProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 636,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 637,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 635,
					"name": "imageUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The avatar rich media url"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 638,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						636,
						637,
						635,
						638
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
					"line": 71,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 622,
			"name": "AvatarProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 626,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 627,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 623,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the avatar's clickable state",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 624,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the avatar's disabled state",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 625,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the avatar's size",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "md\n"
							},
							{
								"tag": "deprecated",
								"text": "\n\nSize \"xl\" has been deprecated and will be removed in a future version.\nPlease use \"lg\" instead of \"xl\".\n\n**Before**\n\n`<Avatar size=\"xl\" />`\n\n**After**\n\n`<Avatar size=\"lg\" />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 621,
						"name": "AvatarSize"
					}
				},
				{
					"id": 628,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						626,
						627,
						623,
						624,
						625,
						628
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 645,
			"name": "AvatarStackItem",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 649,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar description"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 646,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Avatar ID"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 643,
						"name": "AvatarStackItemId"
					}
				},
				{
					"id": 650,
					"name": "imageUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar image URL"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 653,
					"name": "inactive",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar inactive state",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 652,
					"name": "initials",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar initials"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 651,
					"name": "linkUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar link URL"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 647,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Avatar name"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 648,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Avatar type"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 644,
						"name": "AvatarStackItemType"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						649,
						646,
						650,
						653,
						652,
						651,
						647,
						648
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 5,
					"character": 17
				}
			]
		},
		{
			"id": 655,
			"name": "AvatarStackProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 656,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Avatar stack items"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 645,
							"name": "AvatarStackItem"
						}
					}
				},
				{
					"id": 658,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar stack size",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "lg\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 654,
						"name": "AvatarStackSize"
					}
				},
				{
					"id": 657,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Avatar stack title"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						656,
						658,
						657
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 43,
					"character": 17
				}
			]
		},
		{
			"id": 676,
			"name": "BadgeLabelProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 677,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 678,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 679,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						677,
						678,
						679
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Badge/Badge.types.tsx",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 672,
			"name": "BadgeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 673,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 674,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 675,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						673,
						674,
						675
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Badge/Badge.types.tsx",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 687,
			"name": "BannerIconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 690,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 691,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 688,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "String type is deprecated. Please pass an SVG icon instance.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 689,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "reference",
								"name": "ReactNodeArray"
							},
							{
								"type": "reference",
								"name": "ReactPortal"
							}
						]
					}
				},
				{
					"id": 692,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						690,
						691,
						688,
						692
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
					"line": 21,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 682,
			"name": "BannerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 684,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 685,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 686,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 683,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Sets the banner's variant."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 680,
						"name": "BannerVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						684,
						685,
						686,
						683
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
					"line": 14,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1245,
			"name": "BaseFieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1246,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1266,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1267,
										"name": "ComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1247,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1248,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1266,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1267,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1249,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1266,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1267,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1250,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1266,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1267,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1248,
												1249,
												1250
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1251,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A subcomponent to render on a particular view.\n<br />\n<br />\nOne or all of:\n<br />\n<Code>Form.X.Create, Form.X.Read, Form.X.Update</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReactNode"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1252,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1253,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1254,
													"name": "field",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1220,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1266,
																"name": "Value"
															}
														],
														"name": "FieldAPI"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactNode"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1255,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					}
				},
				{
					"id": 1256,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					}
				},
				{
					"id": 1257,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1258,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1259,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 1260,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1261,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1262,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1263,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1264,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					}
				},
				{
					"id": 1265,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1246,
						1251,
						1255,
						1256,
						1257,
						1258,
						1259,
						1260,
						1261,
						1262,
						1263,
						1264,
						1265
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 128,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1266,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1267,
					"name": "ComponentProps",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 1235,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1266,
								"name": "Value"
							}
						],
						"name": "ValueComponentProps"
					}
				}
			]
		},
		{
			"id": 400,
			"name": "BodyCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 403,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 404,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 401,
					"name": "snugfit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shrink the cell around the contents"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 405,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 402,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The table body cell variant"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TableCellVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						403,
						404,
						401,
						405,
						402
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 16,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 64,
			"name": "BodyProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 78,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 79,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 66,
					"name": "displayDate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the month displayed on the calendar, can be different from selected.",
						"tags": [
							{
								"tag": "default",
								"text": "new Date()\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 71,
					"name": "monthRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Provide a function to disable dates. Must return a boolean."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "Ref"
					}
				},
				{
					"id": 75,
					"name": "selectedEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "End of the highlight of a day range"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 76,
					"name": "selectedStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Start of the highlight of a day range"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 43,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 80,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 77,
					"name": "yearRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "Ref"
					}
				},
				{
					"id": 67,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 68,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 69,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 70,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 72,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 73,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Click handler for selecting a day."
							},
							"parameters": [
								{
									"id": 74,
									"name": "day",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						78,
						79,
						66,
						71,
						75,
						76,
						80,
						77
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						67,
						72
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 11,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1,
					"name": "CalendarProps"
				}
			]
		},
		{
			"id": 372,
			"name": "BodyRowProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 374,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 375,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 373,
					"name": "overdue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets row text color to red to signify overdue items"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 376,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						374,
						375,
						373,
						376
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 30,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3621,
			"name": "BoxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3636,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3611,
						"name": "FlexOptions.alignContent"
					}
				},
				{
					"id": 3637,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3612,
						"name": "FlexOptions.alignItems"
					}
				},
				{
					"id": 3638,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3613,
						"name": "FlexOptions.alignSelf"
					}
				},
				{
					"id": 3622,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Render semantic HTML tags with browser reset and normalize CSS"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 128,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "li"
							},
							{
								"type": "literal",
								"value": "ol"
							},
							{
								"type": "literal",
								"value": "ul"
							}
						]
					}
				},
				{
					"id": 3633,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3634,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3623,
					"name": "display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					}
				},
				{
					"id": 3624,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `flex` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3625,
					"name": "flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `basis` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3626,
					"name": "flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `direction` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					}
				},
				{
					"id": 3627,
					"name": "flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `grow` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 149,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3628,
					"name": "flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `shrink` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3629,
					"name": "flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `wrap` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					}
				},
				{
					"id": 3639,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3614,
						"name": "FlexOptions.justifyContent"
					}
				},
				{
					"id": 3640,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3599,
						"name": "MarginOptions.margin"
					}
				},
				{
					"id": 3641,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3600,
						"name": "MarginOptions.marginBottom"
					}
				},
				{
					"id": 3642,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3601,
						"name": "MarginOptions.marginLeft"
					}
				},
				{
					"id": 3643,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3602,
						"name": "MarginOptions.marginRight"
					}
				},
				{
					"id": 3644,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3603,
						"name": "MarginOptions.marginTop"
					}
				},
				{
					"id": 3630,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `order` property on a flexbox child"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 164,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3645,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3605,
						"name": "PaddingOptions.padding"
					}
				},
				{
					"id": 3646,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3606,
						"name": "PaddingOptions.paddingBottom"
					}
				},
				{
					"id": 3647,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3607,
						"name": "PaddingOptions.paddingLeft"
					}
				},
				{
					"id": 3648,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3608,
						"name": "PaddingOptions.paddingRight"
					}
				},
				{
					"id": 3649,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3609,
						"name": "PaddingOptions.paddingTop"
					}
				},
				{
					"id": 3635,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3631,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3632,
					"name": "textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3636,
						3637,
						3638,
						3622,
						3633,
						3634,
						3623,
						3624,
						3625,
						3626,
						3627,
						3628,
						3629,
						3639,
						3640,
						3641,
						3642,
						3643,
						3644,
						3630,
						3645,
						3646,
						3647,
						3648,
						3649,
						3635,
						3631,
						3632
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 119,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"id": 3610,
					"name": "FlexOptions"
				},
				{
					"type": "reference",
					"id": 3598,
					"name": "MarginOptions"
				},
				{
					"type": "reference",
					"id": 3604,
					"name": "PaddingOptions"
				},
				{
					"type": "reference",
					"name": "StyleOptions"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3512,
					"name": "IconContainerProps"
				}
			]
		},
		{
			"id": 702,
			"name": "BreadcrumbCrumbProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 703,
					"name": "active",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Breadcrumbs/Breadcrumbs.types.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 704,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 705,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 706,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						703,
						704,
						705,
						706
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Breadcrumbs/Breadcrumbs.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 698,
			"name": "BreadcrumbProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 699,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 700,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 701,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						699,
						700,
						701
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Breadcrumbs/Breadcrumbs.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 711,
			"name": "ButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 712,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the button to be 100% of the width of its parent"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 713,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 714,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 715,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shows the button spinner"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 716,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					}
				},
				{
					"id": 717,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "All variants except for primary, secondary, tertiary are DEPRECATED.\nAll will still be accepted, but deprecated ones will look like secondary"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						712,
						713,
						714,
						715,
						716,
						717
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 21,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ButtonAttributes"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 872,
					"name": "DropdownButtonProps"
				},
				{
					"type": "reference",
					"id": 2865,
					"name": "PanelHeaderActionProps"
				}
			]
		},
		{
			"id": 21,
			"name": "CalendarContainerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 22,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 23,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 24,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						22,
						23,
						24
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 90,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1,
			"name": "CalendarProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 18,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 78,
						"name": "BodyProps.children"
					}
				},
				{
					"id": 19,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 79,
						"name": "BodyProps.className"
					}
				},
				{
					"id": 6,
					"name": "displayDate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the month displayed on the calendar, can be different from selected.",
						"tags": [
							{
								"tag": "default",
								"text": "new Date()\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 66,
						"name": "BodyProps.displayDate"
					}
				},
				{
					"id": 11,
					"name": "monthRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Provide a function to disable dates. Must return a boolean."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "Ref"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 71,
						"name": "BodyProps.monthRef"
					}
				},
				{
					"id": 15,
					"name": "selectedEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "End of the highlight of a day range"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 75,
						"name": "BodyProps.selectedEnd"
					}
				},
				{
					"id": 16,
					"name": "selectedStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Start of the highlight of a day range"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 43,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 76,
						"name": "BodyProps.selectedStart"
					}
				},
				{
					"id": 20,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 80,
						"name": "BodyProps.style"
					}
				},
				{
					"id": 17,
					"name": "yearRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "Ref"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 77,
						"name": "BodyProps.yearRef"
					}
				},
				{
					"id": 7,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 8,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 9,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 10,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 68,
								"name": "BodyProps.disabledDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 67,
						"name": "BodyProps.disabledDate"
					}
				},
				{
					"id": 2,
					"name": "onNavigate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "onNavigate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Click handler for navigating the calendar, with arrows or selects."
							},
							"parameters": [
								{
									"id": 4,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 12,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 13,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Click handler for selecting a day."
							},
							"parameters": [
								{
									"id": 14,
									"name": "day",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 73,
								"name": "BodyProps.onSelect"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 72,
						"name": "BodyProps.onSelect"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						18,
						19,
						6,
						11,
						15,
						16,
						20,
						17
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						7,
						2,
						12
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 64,
					"name": "BodyProps"
				}
			]
		},
		{
			"id": 377,
			"name": "CaratProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 378,
					"name": "expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not the carat is rotated"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 379,
					"name": "onClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 380,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 381,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback to fire when clicked"
									},
									"parameters": [
										{
											"id": 382,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						378,
						379
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 37,
					"character": 17
				}
			]
		},
		{
			"id": 727,
			"name": "CardProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 731,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 732,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 728,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The card level for determining the shadow",
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `level` prop has been deprecated and will be removed in a future version.\nPlease use the `shadowStrength` prop instead.\n\n**Before**\n\n<Card level={20} />\n\n**After**\n\n<Card shadowStrength={2} />\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Card/Card.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 724,
						"name": "CardLevel"
					}
				},
				{
					"id": 729,
					"name": "shadowStrength",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines shadow strength",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "1\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Card/Card.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 725,
						"name": "ShadowStrength"
					}
				},
				{
					"id": 733,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 730,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The card variant"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Card/Card.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "hoverable"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						731,
						732,
						728,
						729,
						733,
						730
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Card/Card.types.ts",
					"line": 12,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 734,
			"name": "CheckboxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 735,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Checked state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.checked"
					}
				},
				{
					"id": 736,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The contents of the checkbox label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 737,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 738,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disabled state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.disabled"
					}
				},
				{
					"id": 739,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 740,
					"name": "indeterminate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indeterminate state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 741,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						735,
						736,
						737,
						738,
						739,
						740,
						741
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"name": "InputAttributes"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1492,
					"name": "FieldCheckboxComponentProps"
				}
			]
		},
		{
			"id": 600,
			"name": "ColProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 606,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.children"
					}
				},
				{
					"id": 604,
					"name": "lg",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the width for large breakpoint"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 603,
					"name": "md",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the width for medium breakpoint"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 602,
					"name": "sm",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the width for small breakpoint"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 605,
					"name": "span",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the same width across all breakpoints"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 601,
					"name": "xs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the width for extra small breakpoint"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						606,
						604,
						603,
						602,
						605,
						601
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
					"line": 20,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Props"
				}
			]
		},
		{
			"id": 2709,
			"name": "ConfirmModalProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2720,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2700,
						"name": "ModalProps.children"
					}
				},
				{
					"id": 2721,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2701,
						"name": "ModalProps.className"
					}
				},
				{
					"id": 2710,
					"name": "headline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Headline message"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2717,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Modal open state",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2697,
						"name": "ModalProps.open"
					}
				},
				{
					"id": 2718,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Vertical placement of the modal",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "center\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2691,
						"name": "ModalPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2698,
						"name": "ModalProps.placement"
					}
				},
				{
					"id": 2722,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2702,
						"name": "ModalProps.style"
					}
				},
				{
					"id": 2719,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets a width on the container and uses next centering. Future will default to `md`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2692,
						"name": "ModalWidth"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2699,
						"name": "ModalProps.width"
					}
				},
				{
					"id": 2714,
					"name": "onClickOverlay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2715,
							"name": "onClickOverlay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for clicking the overlay"
							},
							"parameters": [
								{
									"id": 2716,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2695,
								"name": "ModalProps.onClickOverlay"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 2694,
						"name": "ModalProps.onClickOverlay"
					}
				},
				{
					"id": 2711,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2712,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The dismiss onClick callback"
							},
							"parameters": [
								{
									"id": 2713,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2720,
						2721,
						2710,
						2717,
						2718,
						2722,
						2719
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2714,
						2711
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 32,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 2693,
					"name": "ModalProps"
				}
			]
		},
		{
			"id": 891,
			"name": "ConsumerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 892,
					"name": "children",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 108,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 893,
							"name": "children",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 894,
									"name": "api",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						892
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
					"line": 107,
					"character": 17
				}
			]
		},
		{
			"id": 742,
			"name": "ContactItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 749,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 750,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 748,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the contact item clickable",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 747,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the contact item disabled",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 744,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 743,
					"name": "imageUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The avatar rich media url"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 745,
					"name": "initials",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Avatar text label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 746,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the contact item selected",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 751,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						749,
						750,
						748,
						747,
						744,
						743,
						745,
						746,
						751
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/ContactItem/ContactItem.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 987,
			"name": "ContainerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 994,
					"name": "active",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 995,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Enable/disable the dropzone container"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 989,
					"name": "getRootProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 990,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 991,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the props you should apply to the root drop container you render"
									},
									"typeParameter": [
										{
											"id": 992,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 992,
														"name": "T"
													}
												],
												"name": "DropzoneRootProps"
											}
										}
									],
									"parameters": [
										{
											"id": 993,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 992,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 992,
										"name": "T"
									}
								}
							]
						}
					}
				},
				{
					"id": 988,
					"name": "rootProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Additional props for dropzone container element"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 56,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1039,
						"name": "DropzoneRootProps"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						994,
						995,
						989,
						988
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 52,
					"character": 17
				}
			]
		},
		{
			"id": 996,
			"name": "ContentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 999,
					"name": "contentMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 998,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Enable/disable the dropzone content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 997,
					"name": "isIconVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Force icon visibility\n<Code>NOTICE:</Code> passing <Code>true</Code> or <Code>false</Code>\nvalue explicitly will make component ignore resizing."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						999,
						998,
						997
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 69,
					"character": 17
				}
			]
		},
		{
			"id": 497,
			"name": "CurrencyCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 498,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 499,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 500,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						498,
						499,
						500
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 59,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2784,
			"name": "CursorPosition",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2787,
					"name": "selection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2786,
					"name": "selectionEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 115,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2785,
					"name": "selectionStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 114,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2787,
						2786,
						2785
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 113,
					"character": 17
				}
			]
		},
		{
			"id": 3396,
			"name": "CustomDataType",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 64,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3397,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"indexSignature": {
				"id": 3398,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 3399,
						"name": "key",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 773,
			"name": "DateInputApi",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 776,
					"name": "day",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 777,
					"name": "hasValues",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 778,
					"name": "month",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 788,
					"name": "year",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 774,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 775,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 779,
					"name": "setDay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 780,
							"name": "setDay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 781,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 782,
					"name": "setMonth",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 783,
							"name": "setMonth",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 784,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 785,
					"name": "setYear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 786,
							"name": "setYear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 787,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						776,
						777,
						778,
						788
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						774,
						779,
						782,
						785
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 28,
					"character": 17
				}
			]
		},
		{
			"id": 767,
			"name": "DateInputConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 772,
					"name": "log",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 771,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "Date"
							}
						]
					}
				},
				{
					"id": 768,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 769,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 770,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						772,
						771
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						768
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 22,
					"character": 17
				}
			]
		},
		{
			"id": 794,
			"name": "DateInputProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 816,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 817,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 795,
					"name": "clearRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 54,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 797,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 796,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error variant",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 808,
					"name": "segmentRefs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 809,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 810,
									"name": "segmentOne",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
											"line": 76,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "RefObject"
									}
								},
								{
									"id": 812,
									"name": "segmentThree",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
											"line": 78,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "RefObject"
									}
								},
								{
									"id": 811,
									"name": "segmentTwo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
											"line": 77,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "RefObject"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										810,
										812,
										811
									]
								}
							]
						}
					}
				},
				{
					"id": 818,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 813,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 814,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Date value for the input"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 815,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DateInputVariant"
					}
				},
				{
					"id": 798,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 799,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 800,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nChange handler for when a valid date is entered\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 801,
					"name": "onChangeSegment",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 802,
							"name": "onChangeSegment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 803,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 752,
										"name": "SegmentType"
									}
								},
								{
									"id": 804,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 805,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 806,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 807,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nHandler for when the clear icon is clicked\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						816,
						817,
						795,
						797,
						796,
						808,
						818,
						813,
						814,
						815
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						798,
						801,
						805
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 53,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 753,
			"name": "DateSegmentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 754,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 755,
					"name": "maxLength",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 756,
					"name": "maxValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 757,
					"name": "minValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 758,
					"name": "nextRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 762,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 763,
					"name": "prevRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 764,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 765,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 752,
						"name": "SegmentType"
					}
				},
				{
					"id": 766,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 759,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 760,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 761,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						754,
						755,
						756,
						757,
						758,
						762,
						763,
						764,
						765,
						766
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						759
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 8,
					"character": 17
				}
			]
		},
		{
			"id": 423,
			"name": "DateSelectCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 438,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 832,
						"name": "DateSelectProps.beforeHide"
					}
				},
				{
					"id": 439,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 833,
						"name": "DateSelectProps.beforeShow"
					}
				},
				{
					"id": 424,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"id": 822,
						"name": "DateSelectProps.className"
					}
				},
				{
					"id": 432,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 826,
						"name": "DateSelectProps.disabled"
					}
				},
				{
					"id": 433,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error variant",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 827,
						"name": "DateSelectProps.error"
					}
				},
				{
					"id": 425,
					"name": "errorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Message to be displayed below the date select during an error",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 426,
					"name": "processing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Triggers the spinner that covers inline editable content",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 428,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 821,
						"name": "DateSelectProps.tabIndex"
					}
				},
				{
					"id": 427,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateSelect/DateSelect.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 820,
						"name": "DateSelectProps.value"
					}
				},
				{
					"id": 434,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DateInputVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 828,
						"name": "DateSelectProps.variant"
					}
				},
				{
					"id": 440,
					"name": "afterHide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 6,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 441,
							"name": "afterHide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 835,
								"name": "DateSelectProps.afterHide"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 834,
						"name": "DateSelectProps.afterHide"
					}
				},
				{
					"id": 442,
					"name": "afterShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 7,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 443,
							"name": "afterShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 837,
								"name": "DateSelectProps.afterShow"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 836,
						"name": "DateSelectProps.afterShow"
					}
				},
				{
					"id": 444,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 445,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 446,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 447,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 839,
								"name": "DateSelectProps.disabledDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 838,
						"name": "DateSelectProps.disabledDate"
					}
				},
				{
					"id": 429,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 430,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 431,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nChange handler for when a valid date is entered\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 824,
								"name": "DateSelectProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 823,
						"name": "DateSelectProps.onChange"
					}
				},
				{
					"id": 435,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 437,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nHandler for when the clear icon is clicked\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 830,
								"name": "DateSelectProps.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 829,
						"name": "DateSelectProps.onClear"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						438,
						439,
						424,
						432,
						433,
						425,
						426,
						428,
						427,
						434
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						440,
						442,
						444,
						429,
						435
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 143,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 819,
					"name": "DateSelectProps"
				}
			]
		},
		{
			"id": 819,
			"name": "DateSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 832,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayTriggerProps.beforeHide"
					}
				},
				{
					"id": 833,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayTriggerProps.beforeShow"
					}
				},
				{
					"id": 822,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.className"
					}
				},
				{
					"id": 826,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.disabled"
					}
				},
				{
					"id": 827,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error variant",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.error"
					}
				},
				{
					"id": 821,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.tabIndex"
					}
				},
				{
					"id": 820,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateSelect/DateSelect.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 828,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DateInputVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.variant"
					}
				},
				{
					"id": 834,
					"name": "afterHide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 6,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 835,
							"name": "afterHide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedVisibilityProps.afterHide"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedVisibilityProps.afterHide"
					}
				},
				{
					"id": 836,
					"name": "afterShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 7,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 837,
							"name": "afterShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedVisibilityProps.afterShow"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedVisibilityProps.afterShow"
					}
				},
				{
					"id": 838,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 839,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 840,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 841,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedCalendarProps.disabledDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedCalendarProps.disabledDate"
					}
				},
				{
					"id": 823,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 824,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 825,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nChange handler for when a valid date is entered\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedDateInputProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.onChange"
					}
				},
				{
					"id": 829,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 830,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 831,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nHandler for when the clear icon is clicked\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedDateInputProps.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedDateInputProps.onClear"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						832,
						833,
						822,
						826,
						827,
						821,
						820,
						828
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						834,
						836,
						838,
						823,
						829
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateSelect/DateSelect.types.ts",
					"line": 26,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "PickedDateInputProps"
				},
				{
					"type": "reference",
					"name": "PickedOverlayTriggerProps"
				},
				{
					"type": "reference",
					"name": "PickedVisibilityProps"
				},
				{
					"type": "reference",
					"name": "PickedCalendarProps"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 423,
					"name": "DateSelectCellProps"
				},
				{
					"type": "reference",
					"id": 1427,
					"name": "FieldDateComponentProps"
				}
			]
		},
		{
			"id": 89,
			"name": "DayProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 100,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 101,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 90,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 48,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 91,
					"name": "isCurrentMonth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 92,
					"name": "isRangeEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 93,
					"name": "isRangeStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 94,
					"name": "isToday",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 95,
					"name": "onClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 96,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 97,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 98,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 99,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 54,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 102,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						100,
						101,
						90,
						91,
						92,
						93,
						94,
						95,
						99,
						102
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 47,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3316,
			"name": "DefaultNode",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3320,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3313,
						"name": "NodeId"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3315,
						"name": "Node.id"
					}
				},
				{
					"id": 3317,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3318,
					"name": "parentId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3313,
						"name": "NodeId"
					}
				},
				{
					"id": 3319,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NodeType"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3320,
						3317,
						3318,
						3319
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 14,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3314,
					"name": "Node"
				}
			]
		},
		{
			"id": 3685,
			"name": "DetailPageProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3687,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3688,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3689,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3686,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of the content.",
						"tags": [
							{
								"tag": "default",
								"text": "'md'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "block"
							},
							{
								"type": "literal",
								"value": "lg"
							},
							{
								"type": "literal",
								"value": "md"
							},
							{
								"type": "literal",
								"value": "xl"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3687,
						3688,
						3689,
						3686
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 13,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3804,
			"name": "DivProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3805,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3806,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3807,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3805,
						3806,
						3807
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 872,
			"name": "DropdownButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 873,
					"name": "arrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shows the arrow when activated"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 88,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 876,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the button to be 100% of the width of its parent"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 712,
						"name": "ButtonProps.block"
					}
				},
				{
					"id": 877,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 713,
						"name": "ButtonProps.icon"
					}
				},
				{
					"id": 878,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 714,
						"name": "ButtonProps.iconRight"
					}
				},
				{
					"id": 874,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shows the button spinner"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 92,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"id": 715,
						"name": "ButtonProps.loading"
					}
				},
				{
					"id": 875,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Changes the direction of the arrow if shown"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 96,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 879,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 716,
						"name": "ButtonProps.size"
					}
				},
				{
					"id": 880,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "All variants except for primary, secondary, tertiary are DEPRECATED.\nAll will still be accepted, but deprecated ones will look like secondary"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 717,
						"name": "ButtonProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						873,
						876,
						877,
						878,
						874,
						875,
						879,
						880
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
					"line": 84,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 711,
					"name": "ButtonProps"
				}
			]
		},
		{
			"id": 947,
			"name": "DropdownFlyoutProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 948,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 951,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon of the button."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 949,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The text of the button."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 64,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 950,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 65,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 952,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "<div>\n Data of the dropdown options - <Code>Option[]</Code>\n <CodeBlock>\n   {`type Option = { label: string; children?: Option[] }`}\n </CodeBlock>\n</div>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 924,
							"name": "DropdownOption"
						}
					}
				},
				{
					"id": 959,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "'right-bottom'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 960,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The button size",
						"tags": [
							{
								"tag": "default",
								"text": "'md'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					}
				},
				{
					"id": 961,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "'secondary'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 112,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					}
				},
				{
					"id": 953,
					"name": "onClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 88,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 954,
							"name": "onClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n Callback for click on dropdown option\n <CodeBlock>{'(option: Option) => void'}</CodeBlock>\n</div>"
							},
							"parameters": [
								{
									"id": 955,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 924,
										"name": "DropdownOption"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 956,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 96,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 957,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n Render prop to specify custom dropdown option content\n <CodeBlock>{'(option: Option) => ReactNode'}</CodeBlock>\n</div>"
							},
							"parameters": [
								{
									"id": 958,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 924,
										"name": "DropdownOption"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						948,
						951,
						949,
						950,
						952,
						959,
						960,
						961
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						953,
						956
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 58,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivAttributes"
						},
						{
							"type": "literal",
							"value": "onClick"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 881,
			"name": "DropdownMenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 882,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 884,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 883,
					"name": "menuRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 2594,
								"name": "MenuRef"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 885,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 886,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 887,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 888,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 889,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 890,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2579,
										"name": "Selection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						882,
						884,
						883
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						885,
						888
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
					"line": 99,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "HTMLDivProps"
						},
						{
							"type": "literal",
							"value": "onSelect"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 924,
			"name": "DropdownOption",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 927,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 924,
							"name": "DropdownOption"
						}
					}
				},
				{
					"id": 926,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 925,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						927,
						926,
						925
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 27,
					"character": 17
				}
			]
		},
		{
			"id": 843,
			"name": "DropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 844,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 845,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 846,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 847,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 848,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 849,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 850,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 851,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 852,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 853,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 854,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 855,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 856,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Content to render in a footer."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 857,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the dropdowns's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 858,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "remarks",
								"text": "string icons have been deprecated, please pass a component from `@procore/core-icons`\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 859,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The button text."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 860,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 867,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay.",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					}
				},
				{
					"id": 868,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The button size",
						"tags": [
							{
								"tag": "default",
								"text": "'md'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					}
				},
				{
					"id": 869,
					"name": "trigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TriggerVariant"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TriggerVariant"
								}
							}
						]
					}
				},
				{
					"id": 870,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "button"
							},
							{
								"type": "literal",
								"value": "submit"
							},
							{
								"type": "literal",
								"value": "reset"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.type"
					}
				},
				{
					"id": 871,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "'secondary'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					}
				},
				{
					"id": 861,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 862,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a search bar to the dropdown."
							},
							"parameters": [
								{
									"id": 863,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 864,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 865,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n <div>Callback for selecting an item from the menu\n   <CodeBlock>\n   { '({ event: ReactEvent, item: Menu.Item.props.item, group: bool }) => void' }\n   </CodeBlock>\n </div>\n <div>\n   <Code>item</Code> will be the <Code>item</Code> prop supplied to the{' '}\n   <Code>Item</Code> component\n </div>\n</div>"
							},
							"parameters": [
								{
									"id": 866,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2579,
										"name": "Selection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						844,
						847,
						850,
						851,
						852,
						853,
						854,
						855,
						856,
						857,
						858,
						859,
						860,
						867,
						868,
						869,
						870,
						871
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						861,
						864
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
					"line": 15,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "HTMLButtonProps"
						},
						{
							"type": "literal",
							"value": "onSelect"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2644,
			"name": "DroppableProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2646,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 91,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 2645,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2646,
						2645
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 89,
					"character": 17
				}
			]
		},
		{
			"id": 1000,
			"name": "DropzoneContentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1003,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Enable/disable the dropzone content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 93,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1004,
					"name": "errorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 94,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1001,
					"name": "open",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 88,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1002,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Open the native file selection dialog"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1003,
						1004
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1001
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 84,
					"character": 17
				}
			]
		},
		{
			"id": 972,
			"name": "DropzoneErrorBannerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 977,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 973,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1024,
						"name": "DropError"
					}
				},
				{
					"id": 974,
					"name": "fileRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Rejected files and why they were rejected\n<CodeBlock>\n {`{\n  file: File,\n  errors: FileError[]\n }[]`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "FileRejection"
						}
					}
				},
				{
					"id": 978,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 979,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 981,
									"name": "hideError",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 41,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 980,
									"name": "showErrorDetails",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 40,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										981,
										980
									]
								}
							]
						}
					}
				},
				{
					"id": 975,
					"name": "onDismiss",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 976,
							"name": "onDismiss",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						977,
						973,
						974,
						978
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						975
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 24,
					"character": 17
				}
			]
		},
		{
			"id": 1005,
			"name": "DropzoneHookProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1007,
					"name": "maxFileNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum number files to the dropzone is allowed. All files above the limit\nwill be rejected."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 108,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1009,
					"name": "maxFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1008,
					"name": "minFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Minimum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 113,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1013,
					"name": "multiple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.multiple"
					}
				},
				{
					"id": 1010,
					"name": "onDragEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onDragEnter"
					}
				},
				{
					"id": 1011,
					"name": "onDragLeave",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onDragLeave"
					}
				},
				{
					"id": 1012,
					"name": "onDragOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onDragOver"
					}
				},
				{
					"id": 1006,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of already selected items"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1007,
						1009,
						1008,
						1013,
						1010,
						1011,
						1012,
						1006
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 97,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "DropzoneOptions"
								},
								{
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "minSize"
										},
										{
											"type": "literal",
											"value": "maxSize"
										}
									]
								}
							],
							"name": "Omit"
						}
					],
					"name": "Partial"
				}
			]
		},
		{
			"id": 1045,
			"name": "DropzoneProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1053,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 234,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1058,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Enable/disable the dropzone",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 167,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "DropzoneHookState.disabled"
					}
				},
				{
					"id": 1056,
					"name": "dragError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Error message if dragged files is rejected\n<CodeBlock>\n {`{ type: DropErrorType, title: string, message: string }`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 153,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "DropzoneHookState.dragError"
					}
				},
				{
					"id": 1057,
					"name": "dropError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Error message if dropped files is rejected\n<CodeBlock>\n {`{ type: DropErrorType, title: string, message: string }`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1024,
						"name": "DropError"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "DropzoneHookState.dropError"
					}
				},
				{
					"id": 1052,
					"name": "inputProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional props for input element"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 233,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1040,
						"name": "DropzoneInputProps"
					}
				},
				{
					"id": 1049,
					"name": "isIconVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>NOTICE:</Code>\n<br/>\n<Code>true</Code> - will make Icon always visible, despite the component height\n<br/>\n<Code>false</Code> - will make Icon always hide, despite the component height\n<br/>\n<Code>undefined</Code> - will look on the component height to decide show or hide Icon"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 218,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1055,
					"name": "multiple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "DropzoneHookState.multiple"
					}
				},
				{
					"id": 1054,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 235,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1041,
						"name": "QaTags"
					}
				},
				{
					"id": 1051,
					"name": "rootProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional props for dropzone element"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 228,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1039,
						"name": "DropzoneRootProps"
					}
				},
				{
					"id": 1050,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dropzone tooltip content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 223,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 1046,
					"name": "contentRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1047,
							"name": "contentRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Render prop to specify a custom dropzone body message"
							},
							"parameters": [
								{
									"id": 1048,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1000,
										"name": "DropzoneContentProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 1059,
					"name": "dispatchDropError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 173,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1060,
							"name": "dispatchDropError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets <Code>dropError</Code>.\n<CodeBlock>{'(error: DropErrorType) => void'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1061,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1023,
										"name": "DropErrorType"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DropzoneHookState.dispatchDropError"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "DropzoneHookState.dispatchDropError"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1053,
						1058,
						1056,
						1057,
						1052,
						1049,
						1055,
						1054,
						1051,
						1050
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1046,
						1059
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 204,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1030,
					"name": "DropzoneHookState"
				}
			]
		},
		{
			"id": 1062,
			"name": "DropzoneRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1064,
					"name": "inputRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 240,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLInputElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 1063,
					"name": "rootRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 239,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 1065,
					"name": "open",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 245,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1066,
							"name": "open",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Open the native file selection dialog"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1064,
						1063
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1065
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 238,
					"character": 17
				}
			]
		},
		{
			"id": 1072,
			"name": "EmptyStateActionsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1073,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 1074,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 1075,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1073,
						1074,
						1075
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
					"line": 10,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1076,
			"name": "EmptyStateDescriptionsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1077,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 1078,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 1079,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1077,
						1078,
						1079
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
					"line": 12,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1080,
			"name": "EmptyStateImageProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1081,
					"name": "src",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1081
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
					"line": 14,
					"character": 17
				}
			]
		},
		{
			"id": 1067,
			"name": "EmptyStateProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1069,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 1070,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 1068,
					"name": "compact",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Render the EmptyState in compact mode"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1071,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1069,
						1070,
						1068,
						1071
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1082,
			"name": "EmptyStateTitleProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1083,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 1084,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 1085,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1083,
						1084,
						1085
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/EmptyState/EmptyState.types.ts",
					"line": 18,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 693,
			"name": "ExpandableProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 695,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 696,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 694,
					"name": "expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Expands banner content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 697,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						695,
						696,
						694,
						697
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
					"line": 28,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1220,
			"name": "FieldAPI",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1222,
					"name": "helpers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 82,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1227,
								"name": "Value"
							}
						],
						"name": "FieldHelperProps"
					}
				},
				{
					"id": 1221,
					"name": "input",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1227,
								"name": "Value"
							}
						],
						"name": "FieldInputProps"
					}
				},
				{
					"id": 1223,
					"name": "messages",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1224,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1225,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Form/Form.types.ts",
											"line": 84,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1225
									]
								}
							]
						}
					}
				},
				{
					"id": 1226,
					"name": "meta",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1227,
								"name": "Value"
							}
						],
						"name": "FieldMetaProps"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1222,
						1221,
						1223,
						1226
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 80,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1227,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			]
		},
		{
			"id": 1492,
			"name": "FieldCheckboxComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1495,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Checked state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 735,
						"name": "CheckboxProps.checked"
					}
				},
				{
					"id": 1496,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The contents of the checkbox label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 736,
						"name": "CheckboxProps.children"
					}
				},
				{
					"id": 1497,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 737,
						"name": "CheckboxProps.className"
					}
				},
				{
					"id": 1498,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disabled state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 738,
						"name": "CheckboxProps.disabled"
					}
				},
				{
					"id": 1499,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 739,
						"name": "CheckboxProps.error"
					}
				},
				{
					"id": 1494,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1502,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1493,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 327,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1500,
					"name": "indeterminate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indeterminate state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 740,
						"name": "CheckboxProps.indeterminate"
					}
				},
				{
					"id": 1501,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 741,
						"name": "CheckboxProps.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1495,
						1496,
						1497,
						1498,
						1499,
						1494,
						1493,
						1500,
						1501
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 324,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1502,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1491,
						"name": "FieldCheckboxValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1502,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 734,
					"name": "CheckboxProps"
				}
			]
		},
		{
			"id": 1503,
			"name": "FieldCheckboxProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1506,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1526,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1526,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1507,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1508,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1526,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1526,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1509,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1526,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1526,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1510,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1526,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1526,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1508,
												1509,
												1510
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1524,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Checked state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.checked"
					}
				},
				{
					"id": 1505,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1526,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1526,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1526,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1526,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1522,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 1519,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1518,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1520,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1511,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1512,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1504,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 333,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1525,
					"name": "indeterminate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Indeterminate state of the checkbox"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Checkbox/Checkbox.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.indeterminate"
					}
				},
				{
					"id": 1515,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1513,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1514,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1523,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.style"
					}
				},
				{
					"id": 1521,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1517,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1516,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1506,
						1524,
						1505,
						1522,
						1519,
						1518,
						1520,
						1511,
						1512,
						1504,
						1525,
						1515,
						1513,
						1514,
						1523,
						1521,
						1517,
						1516
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 330,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1526,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1491,
						"name": "FieldCheckboxValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1526,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 734,
							"name": "CheckboxProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "name"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1644,
			"name": "FieldCheckboxesComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1659,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.className"
					}
				},
				{
					"id": 1651,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1661,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1658,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1195,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1661,
									"name": "Value"
								}
							],
							"name": "ValueInArray"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1660,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.style"
					}
				},
				{
					"id": 1652,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1653,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1654,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1655,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1656,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1657,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1645,
					"name": "isDisabledOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 385,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1646,
							"name": "isDisabledOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1647,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1661,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1648,
					"name": "isIndeterminateOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 386,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1649,
							"name": "isIndeterminateOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1650,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1661,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1659,
						1651,
						1658,
						1660
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1652,
						1655,
						1645,
						1648
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 381,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1661,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1643,
						"name": "FieldCheckboxesValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1661,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1195,
									"typeArguments": [
										{
											"type": "reference",
											"id": 1661,
											"name": "Value"
										}
									],
									"name": "ValueInArray"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 617,
							"name": "Props"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "className"
								},
								{
									"type": "literal",
									"value": "style"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 1662,
			"name": "FieldCheckboxesProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1664,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1695,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1695,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1665,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1666,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1695,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1695,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1667,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1695,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1695,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1668,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1695,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1695,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1666,
												1667,
												1668
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1663,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1695,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1695,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1695,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1695,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1687,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.className"
					}
				},
				{
					"id": 1677,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1676,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1678,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1669,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1670,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1673,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1671,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1686,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1195,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1695,
									"name": "Value"
								}
							],
							"name": "ValueInArray"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1672,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1688,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.style"
					}
				},
				{
					"id": 1679,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1675,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1674,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 1680,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1681,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1682,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1683,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1684,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1685,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1689,
					"name": "isDisabledOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 385,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1690,
							"name": "isDisabledOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1691,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1661,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isDisabledOption"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isDisabledOption"
					}
				},
				{
					"id": 1692,
					"name": "isIndeterminateOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 386,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1693,
							"name": "isIndeterminateOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1694,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1661,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isIndeterminateOption"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isIndeterminateOption"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1664,
						1663,
						1687,
						1677,
						1676,
						1678,
						1669,
						1670,
						1673,
						1671,
						1686,
						1672,
						1688,
						1679,
						1675,
						1674
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1680,
						1683,
						1689,
						1692
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 389,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1695,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1643,
						"name": "FieldCheckboxesValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1695,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1195,
									"typeArguments": [
										{
											"type": "reference",
											"id": 1695,
											"name": "Value"
										}
									],
									"name": "ValueInArray"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 617,
							"name": "Props"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "className"
								},
								{
									"type": "literal",
									"value": "style"
								}
							]
						}
					],
					"name": "Pick"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1644,
							"name": "FieldCheckboxesComponentProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "isDisabledOption"
								},
								{
									"type": "literal",
									"value": "isIndeterminateOption"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 1210,
			"name": "FieldConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1211,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1212,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 1216,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1217,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1218,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					}
				},
				{
					"id": 1219,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					}
				},
				{
					"id": 1213,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1214,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1215,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1211,
						1212,
						1216,
						1217,
						1218,
						1219
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1213
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 70,
					"character": 17
				}
			]
		},
		{
			"id": 1391,
			"name": "FieldCurrencyComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1393,
					"name": "decimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							},
							{
								"type": "literal",
								"value": 13
							},
							{
								"type": "literal",
								"value": 14
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2758,
						"name": "NumberInputProps.decimalScale"
					}
				},
				{
					"id": 1394,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial value of an uncontrolled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2759,
						"name": "NumberInputProps.defaultValue"
					}
				},
				{
					"id": 1405,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2770,
						"name": "NumberInputProps.error"
					}
				},
				{
					"id": 1392,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1406,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1395,
					"name": "fillDecimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus.",
						"tags": [
							{
								"tag": "default",
								"text": "'none'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2752,
						"name": "FillDecimalScaleVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2760,
						"name": "NumberInputProps.fillDecimalScale"
					}
				},
				{
					"id": 1396,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string with a BCP 47 language tag or an array of such strings which specifies number formatting.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "en-US\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2746,
						"name": "Locale"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2761,
						"name": "NumberInputProps.locale"
					}
				},
				{
					"id": 1400,
					"name": "prefix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a prefix."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2765,
						"name": "NumberInputProps.prefix"
					}
				},
				{
					"id": 1404,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2769,
						"name": "NumberInputProps.qa"
					}
				},
				{
					"id": 1401,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A stepping interval which is used in incrementer. Zero value turns off incrementer.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2766,
						"name": "NumberInputProps.step"
					}
				},
				{
					"id": 1402,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a suffix"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2767,
						"name": "NumberInputProps.suffix"
					}
				},
				{
					"id": 1403,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Value of a controlled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 89,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2768,
						"name": "NumberInputProps.value"
					}
				},
				{
					"id": 1397,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1398,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`."
							},
							"parameters": [
								{
									"id": 1399,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2753,
										"name": "ValueChange"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2763,
								"name": "NumberInputProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 2762,
						"name": "NumberInputProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1393,
						1394,
						1405,
						1392,
						1395,
						1396,
						1400,
						1404,
						1401,
						1402,
						1403
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1397
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 301,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1406,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1390,
						"name": "FieldCurrencyValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1406,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 2757,
					"name": "NumberInputProps"
				}
			]
		},
		{
			"id": 1407,
			"name": "FieldCurrencyProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1409,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1425,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1425,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1410,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1411,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1425,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1425,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1412,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1425,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1425,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1413,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1425,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1425,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1411,
												1412,
												1413
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1408,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1425,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1425,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1425,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1425,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1422,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1421,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1423,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1414,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1415,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1418,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1416,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1417,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1424,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1420,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1419,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1409,
						1408,
						1422,
						1421,
						1423,
						1414,
						1415,
						1418,
						1416,
						1417,
						1424,
						1420,
						1419
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 305,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1425,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1390,
						"name": "FieldCurrencyValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1425,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "InputAttributes"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "name"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1427,
			"name": "FieldDateComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1441,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 832,
						"name": "DateSelectProps.beforeHide"
					}
				},
				{
					"id": 1442,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 833,
						"name": "DateSelectProps.beforeShow"
					}
				},
				{
					"id": 1431,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 822,
						"name": "DateSelectProps.className"
					}
				},
				{
					"id": 1435,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 826,
						"name": "DateSelectProps.disabled"
					}
				},
				{
					"id": 1436,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error variant",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 827,
						"name": "DateSelectProps.error"
					}
				},
				{
					"id": 1428,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1451,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1430,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 821,
						"name": "DateSelectProps.tabIndex"
					}
				},
				{
					"id": 1429,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateSelect/DateSelect.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 820,
						"name": "DateSelectProps.value"
					}
				},
				{
					"id": 1437,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DateInputVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 828,
						"name": "DateSelectProps.variant"
					}
				},
				{
					"id": 1443,
					"name": "afterHide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 6,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1444,
							"name": "afterHide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 835,
								"name": "DateSelectProps.afterHide"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 834,
						"name": "DateSelectProps.afterHide"
					}
				},
				{
					"id": 1445,
					"name": "afterShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 7,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1446,
							"name": "afterShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 837,
								"name": "DateSelectProps.afterShow"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 836,
						"name": "DateSelectProps.afterShow"
					}
				},
				{
					"id": 1447,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1448,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 1449,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 1450,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 839,
								"name": "DateSelectProps.disabledDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 838,
						"name": "DateSelectProps.disabledDate"
					}
				},
				{
					"id": 1432,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1433,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1434,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nChange handler for when a valid date is entered\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 824,
								"name": "DateSelectProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 823,
						"name": "DateSelectProps.onChange"
					}
				},
				{
					"id": 1438,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1439,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1440,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nHandler for when the clear icon is clicked\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 830,
								"name": "DateSelectProps.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 829,
						"name": "DateSelectProps.onClear"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1441,
						1442,
						1431,
						1435,
						1436,
						1428,
						1430,
						1429,
						1437
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1443,
						1445,
						1447,
						1432,
						1438
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 312,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1451,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1426,
						"name": "FieldDateValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1451,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 819,
					"name": "DateSelectProps"
				}
			]
		},
		{
			"id": 1452,
			"name": "FieldDateProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1454,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1490,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1490,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1455,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1456,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1490,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1490,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1457,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1490,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1490,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1458,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1490,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1490,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1456,
												1457,
												1458
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1481,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 1482,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 1453,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1490,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1490,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1490,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1490,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1471,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 1467,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1466,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1468,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1459,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1460,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1463,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1461,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1462,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1470,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 1469,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1465,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1475,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateSelect/DateSelect.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 1476,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DateInputVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				},
				{
					"id": 1464,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 1477,
					"name": "afterHide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 6,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1478,
							"name": "afterHide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.afterHide"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 1479,
					"name": "afterShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 7,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1480,
							"name": "afterShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.afterShow"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 1486,
					"name": "disabledDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1487,
							"name": "disabledDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "\nProvide a function to disable dates.\n"
							},
							"parameters": [
								{
									"id": 1488,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of a day in the year"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 1489,
									"name": "today",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "start of today in the context of the time zone"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.disabledDate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledDate"
					}
				},
				{
					"id": 1472,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1473,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1474,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nChange handler for when a valid date is entered\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 1483,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1484,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1485,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\nHandler for when the clear icon is clicked\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1454,
						1481,
						1482,
						1453,
						1471,
						1467,
						1466,
						1468,
						1459,
						1460,
						1463,
						1461,
						1462,
						1470,
						1469,
						1465,
						1475,
						1476,
						1464
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1477,
						1479,
						1486,
						1472,
						1483
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 316,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1490,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1426,
						"name": "FieldDateValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1490,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 819,
							"name": "DateSelectProps"
						},
						{
							"type": "literal",
							"value": "error"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2165,
			"name": "FieldGroupSelectComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2187,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2188,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2189,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2191,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2192,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2193,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2194,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2195,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2176,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2175,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 2186,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 2208,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 2166,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 2230,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 2219,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available collections, field options contain option id's\n`{ id: number label: string options: Option[] groupId?: string | number }`\n`arrayOf: [object]`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groups"
					}
				},
				{
					"id": 2207,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2179,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 2178,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 2203,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2204,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2205,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2206,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2202,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 2173,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 2230,
									"name": "Value"
								}
							},
							"objectType": {
								"type": "reference",
								"id": 2230,
								"name": "Value"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2177,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 2190,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 2184,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 2174,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2185,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2196,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2197,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups for keying and optimizations\n`(option: T) => Option[]`"
							},
							"parameters": [
								{
									"id": 2198,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 2167,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2168,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2169,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2170,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2171,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2172,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2220,
					"name": "getOptGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2221,
							"name": "getOptGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups and options to define relation in optgroups\n`(option: OptionItem) => number | string`"
							},
							"parameters": [
								{
									"id": 2222,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getOptGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getOptGroup"
					}
				},
				{
					"id": 2223,
					"name": "groupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2224,
							"name": "groupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each group option\n`(groupOption: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2225,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2226,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupRenderer"
					}
				},
				{
					"id": 2213,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2214,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2215,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isOptionDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isOptionDisabled"
					}
				},
				{
					"id": 2180,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2181,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback with options selected when selecting or removing an option\n`(value: T[]) => void`"
							},
							"parameters": [
								{
									"id": 2182,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2183,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2199,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2200,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2201,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2450,
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2227,
					"name": "optGroupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2228,
							"name": "optGroupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in `optgroups`\n`(group: GroupItem) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2229,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optGroupRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optGroupRenderer"
					}
				},
				{
					"id": 2209,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2210,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each option\n`(option: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2211,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2212,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optionRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionRenderer"
					}
				},
				{
					"id": 2216,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2217,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2218,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.tokenRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tokenRenderer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2187,
						2191,
						2194,
						2195,
						2176,
						2175,
						2186,
						2208,
						2166,
						2219,
						2207,
						2179,
						2178,
						2203,
						2202,
						2173,
						2177,
						2190,
						2184,
						2174,
						2185
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2196,
						2167,
						2170,
						2220,
						2223,
						2213,
						2180,
						2199,
						2227,
						2209,
						2216
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 553,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2230,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2164,
						"name": "FieldGroupSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2230,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 2230,
											"name": "Value"
										}
									},
									"objectType": {
										"type": "reference",
										"id": 2230,
										"name": "Value"
									}
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2454,
							"name": "GroupSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2231,
			"name": "FieldGroupSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2268,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2269,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2270,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2272,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2273,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2274,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2233,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2311,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2311,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2234,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2235,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2311,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2311,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2236,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2311,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2311,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2237,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2311,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2311,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2235,
												2236,
												2237
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 2275,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2276,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2258,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2232,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2311,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2311,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 2311,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 2311,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 2257,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 2246,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 2245,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 2247,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 2238,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 2289,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 2239,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 2300,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available collections, field options contain option id's\n`{ id: number label: string options: Option[] groupId?: string | number }`\n`arrayOf: [object]`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groups"
					}
				},
				{
					"id": 2242,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 2288,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2240,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 2261,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 2260,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 2284,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2285,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2286,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2287,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2283,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 2255,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 2311,
									"name": "Value"
								}
							},
							"objectType": {
								"type": "reference",
								"id": 2311,
								"name": "Value"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2259,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 2271,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 2266,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 2241,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 2256,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2248,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 2244,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 2267,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2243,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 2277,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2278,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups for keying and optimizations\n`(option: T) => Option[]`"
							},
							"parameters": [
								{
									"id": 2279,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 2249,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2250,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2251,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2252,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2253,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2254,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2301,
					"name": "getOptGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2302,
							"name": "getOptGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups and options to define relation in optgroups\n`(option: OptionItem) => number | string`"
							},
							"parameters": [
								{
									"id": 2303,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getOptGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getOptGroup"
					}
				},
				{
					"id": 2304,
					"name": "groupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2305,
							"name": "groupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each group option\n`(groupOption: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2306,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2307,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupRenderer"
					}
				},
				{
					"id": 2294,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2295,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2296,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isOptionDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isOptionDisabled"
					}
				},
				{
					"id": 2262,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2263,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback with options selected when selecting or removing an option\n`(value: T[]) => void`"
							},
							"parameters": [
								{
									"id": 2264,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2265,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2280,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2281,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2282,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2450,
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2308,
					"name": "optGroupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2309,
							"name": "optGroupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in `optgroups`\n`(group: GroupItem) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2310,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optGroupRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optGroupRenderer"
					}
				},
				{
					"id": 2290,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2291,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each option\n`(option: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2292,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2293,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optionRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionRenderer"
					}
				},
				{
					"id": 2297,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2298,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2299,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.tokenRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tokenRenderer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2268,
						2272,
						2233,
						2275,
						2276,
						2258,
						2232,
						2257,
						2246,
						2245,
						2247,
						2238,
						2289,
						2239,
						2300,
						2242,
						2288,
						2240,
						2261,
						2260,
						2284,
						2283,
						2255,
						2259,
						2271,
						2266,
						2241,
						2256,
						2248,
						2244,
						2267,
						2243
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2277,
						2249,
						2252,
						2301,
						2304,
						2294,
						2262,
						2280,
						2308,
						2290,
						2297
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 558,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2311,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2164,
						"name": "FieldGroupSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2311,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 2311,
											"name": "Value"
										}
									},
									"objectType": {
										"type": "reference",
										"id": 2311,
										"name": "Value"
									}
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2454,
							"name": "GroupSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2031,
			"name": "FieldMultiSelectComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2053,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2054,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2055,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2057,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2058,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2059,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2060,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2061,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2042,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2041,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 2052,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 2076,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 2032,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 2089,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 2062,
					"name": "getGroup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 109,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2063,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2064,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>groups</Code>\n<CodeBlock>{'(option: OptionItem) => React.ReactNode'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2065,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 2075,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2045,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 2044,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 2071,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2072,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2073,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2074,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2066,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2067,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2068,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for when a user types into the multiselect input\n<CodeBlock>{'(event: KeyboardEvent) => void'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2069,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2070,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 2039,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1195,
							"typeArguments": [
								{
									"type": "reference",
									"id": 2089,
									"name": "Value"
								}
							],
							"name": "ValueInArray"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2043,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 2056,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 2050,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 2040,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2051,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of the currently selected values"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2033,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2034,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2035,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2036,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2037,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2038,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2077,
					"name": "groupHeaderRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2078,
							"name": "groupHeaderRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in <Code>groups</Code>\n<CodeBlock>{'(group: GroupItem) => React.ReactNode'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2079,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupHeaderRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupHeaderRenderer"
					}
				},
				{
					"id": 2083,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2084,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2085,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isOptionDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isOptionDisabled"
					}
				},
				{
					"id": 2046,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 157,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2047,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2048,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2049,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2080,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2081,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2082,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optionRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionRenderer"
					}
				},
				{
					"id": 2086,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2087,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2088,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.tokenRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tokenRenderer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2053,
						2057,
						2060,
						2061,
						2042,
						2041,
						2052,
						2076,
						2032,
						2062,
						2075,
						2045,
						2044,
						2071,
						2066,
						2070,
						2039,
						2043,
						2056,
						2050,
						2040,
						2051
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2033,
						2036,
						2077,
						2083,
						2046,
						2080,
						2086
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 539,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2089,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2030,
						"name": "FieldMultiSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2089,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1195,
									"typeArguments": [
										{
											"type": "reference",
											"id": 2089,
											"name": "Value"
										}
									],
									"name": "ValueInArray"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 295,
							"name": "MultiSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2090,
			"name": "FieldMultiSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2127,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2128,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2129,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2131,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2132,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2133,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2092,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2163,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2163,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2093,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2094,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2163,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2163,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2095,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2163,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2163,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2096,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2163,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2163,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2094,
												2095,
												2096
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 2134,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2135,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2117,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2091,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2163,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2163,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 2163,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 2163,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 2116,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 2105,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 2104,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 2106,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 2097,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 2150,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 2098,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 2136,
					"name": "getGroup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 109,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2137,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2138,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>groups</Code>\n<CodeBlock>{'(option: OptionItem) => React.ReactNode'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2139,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 2101,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 2149,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2099,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 2120,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 2119,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onFocus"
					}
				},
				{
					"id": 2145,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2146,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2147,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2148,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2140,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2141,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2142,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for when a user types into the multiselect input\n<CodeBlock>{'(event: KeyboardEvent) => void'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2143,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2144,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 2114,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1195,
							"typeArguments": [
								{
									"type": "reference",
									"id": 2163,
									"name": "Value"
								}
							],
							"name": "ValueInArray"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2118,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 2130,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 2125,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 2100,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 2115,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2107,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 2103,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 2126,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of the currently selected values"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2102,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 2108,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2109,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2110,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2111,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2112,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2113,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2151,
					"name": "groupHeaderRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2152,
							"name": "groupHeaderRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in <Code>groups</Code>\n<CodeBlock>{'(group: GroupItem) => React.ReactNode'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2153,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupHeaderRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupHeaderRenderer"
					}
				},
				{
					"id": 2157,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2158,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2159,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isOptionDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isOptionDisabled"
					}
				},
				{
					"id": 2121,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 157,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2122,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2123,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2124,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2154,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2155,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2156,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.optionRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionRenderer"
					}
				},
				{
					"id": 2160,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2161,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2162,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.tokenRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tokenRenderer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2127,
						2131,
						2092,
						2134,
						2135,
						2117,
						2091,
						2116,
						2105,
						2104,
						2106,
						2097,
						2150,
						2098,
						2136,
						2101,
						2149,
						2099,
						2120,
						2119,
						2145,
						2140,
						2144,
						2114,
						2118,
						2130,
						2125,
						2100,
						2115,
						2107,
						2103,
						2126,
						2102
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2108,
						2111,
						2151,
						2157,
						2121,
						2154,
						2160
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 544,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2163,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2030,
						"name": "FieldMultiSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2163,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1195,
									"typeArguments": [
										{
											"type": "reference",
											"id": 2163,
											"name": "Value"
										}
									],
									"name": "ValueInArray"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 295,
							"name": "MultiSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1355,
			"name": "FieldNumberComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1357,
					"name": "decimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							},
							{
								"type": "literal",
								"value": 13
							},
							{
								"type": "literal",
								"value": 14
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2758,
						"name": "NumberInputProps.decimalScale"
					}
				},
				{
					"id": 1358,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial value of an uncontrolled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2759,
						"name": "NumberInputProps.defaultValue"
					}
				},
				{
					"id": 1369,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2770,
						"name": "NumberInputProps.error"
					}
				},
				{
					"id": 1356,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1370,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1359,
					"name": "fillDecimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus.",
						"tags": [
							{
								"tag": "default",
								"text": "'none'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2752,
						"name": "FillDecimalScaleVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2760,
						"name": "NumberInputProps.fillDecimalScale"
					}
				},
				{
					"id": 1360,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string with a BCP 47 language tag or an array of such strings which specifies number formatting.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "en-US\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2746,
						"name": "Locale"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2761,
						"name": "NumberInputProps.locale"
					}
				},
				{
					"id": 1364,
					"name": "prefix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a prefix."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2765,
						"name": "NumberInputProps.prefix"
					}
				},
				{
					"id": 1368,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2769,
						"name": "NumberInputProps.qa"
					}
				},
				{
					"id": 1365,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A stepping interval which is used in incrementer. Zero value turns off incrementer.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2766,
						"name": "NumberInputProps.step"
					}
				},
				{
					"id": 1366,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a suffix"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2767,
						"name": "NumberInputProps.suffix"
					}
				},
				{
					"id": 1367,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Value of a controlled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 89,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2768,
						"name": "NumberInputProps.value"
					}
				},
				{
					"id": 1361,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1362,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`."
							},
							"parameters": [
								{
									"id": 1363,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2753,
										"name": "ValueChange"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2763,
								"name": "NumberInputProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 2762,
						"name": "NumberInputProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1357,
						1358,
						1369,
						1356,
						1359,
						1360,
						1364,
						1368,
						1365,
						1366,
						1367
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1361
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 289,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1370,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1354,
						"name": "FieldNumberValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1370,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 2757,
					"name": "NumberInputProps"
				}
			]
		},
		{
			"id": 1371,
			"name": "FieldNumberProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1373,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1389,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1389,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1374,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1375,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1389,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1389,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1376,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1389,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1389,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1377,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1389,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1389,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1375,
												1376,
												1377
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1372,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1389,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1389,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1389,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1389,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1386,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1385,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1387,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1378,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1379,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1382,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1380,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1381,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1388,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1384,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1383,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1373,
						1372,
						1386,
						1385,
						1387,
						1378,
						1379,
						1382,
						1380,
						1381,
						1388,
						1384,
						1383
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 293,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1389,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1354,
						"name": "FieldNumberValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1389,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "InputAttributes"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "name"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1891,
			"name": "FieldPillSelectComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1907,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1908,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1909,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 1911,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1912,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1913,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 1914,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 1915,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 1898,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 1906,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 1936,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 1896,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1952,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1933,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.footer"
					}
				},
				{
					"id": 1937,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hideDelay"
					}
				},
				{
					"id": 1934,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 1935,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 1892,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 528,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1893,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1894,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
											},
											"parameters": [
												{
													"id": 1895,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLButtonElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1929,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1930,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1931,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 1932,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 1900,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1901,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1902,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1903,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSelect"
					}
				},
				{
					"id": 1928,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2897,
							"name": "PillOptGroup"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 1904,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available options"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2883,
							"name": "PillOption"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.options"
					}
				},
				{
					"id": 1938,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsRef"
					}
				},
				{
					"id": 1899,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 1910,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 1905,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 1939,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showDelay"
					}
				},
				{
					"id": 1897,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 1946,
					"name": "getColor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1947,
							"name": "getColor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the display color of an option's `Pill`\n`(option: unknown) => PillColor`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).color`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1948,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 2880,
								"name": "PillColor"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getColor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getColor"
					}
				},
				{
					"id": 1916,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1917,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning group ID for a given option to define a relation to `optgroups`\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).groupId`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1918,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "Id"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 1919,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1920,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning ID of a given option\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1921,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getId"
					}
				},
				{
					"id": 1922,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1923,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of an option\n`(option: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1924,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getLabel"
					}
				},
				{
					"id": 1949,
					"name": "getSuggested",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1950,
							"name": "getSuggested",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning `boolean` value to suggest this option if nothing is selected.\n`(option: unknown) => boolean`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).suggested`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1951,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getSuggested"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getSuggested"
					}
				},
				{
					"id": 1940,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1941,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the ID of a group\n`(group: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1942,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupGetId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupGetId"
					}
				},
				{
					"id": 1943,
					"name": "groupGetLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1944,
							"name": "groupGetLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of a group\n`(group: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1945,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupGetLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupGetLabel"
					}
				},
				{
					"id": 1925,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1926,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a search bar to the select."
							},
							"parameters": [
								{
									"id": 1927,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1907,
						1911,
						1914,
						1915,
						1898,
						1906,
						1936,
						1896,
						1933,
						1937,
						1934,
						1935,
						1892,
						1929,
						1900,
						1928,
						1904,
						1938,
						1899,
						1910,
						1905,
						1939,
						1897
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1946,
						1916,
						1919,
						1922,
						1949,
						1940,
						1943,
						1925
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 525,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1952,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1890,
						"name": "FieldPillSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1952,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2900,
							"name": "PillSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "children"
								},
								{
									"type": "literal",
									"value": "onClear"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "value"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1953,
			"name": "FieldPillSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1980,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1981,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1982,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 1984,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1985,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1986,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 1955,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2029,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2029,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1956,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1957,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2029,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2029,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1958,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2029,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2029,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1959,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2029,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2029,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1957,
												1958,
												1959
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1987,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 1988,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 1972,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 1954,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2029,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2029,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 2029,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 2029,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1968,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1967,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1969,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1960,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 2013,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 1961,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 2006,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.footer"
					}
				},
				{
					"id": 2014,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hideDelay"
					}
				},
				{
					"id": 2011,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 1964,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 2012,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 1962,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 2007,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 528,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2008,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2009,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
											},
											"parameters": [
												{
													"id": 2010,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLButtonElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 2002,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2003,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2004,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 2005,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 1974,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1975,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1976,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1977,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSelect"
					}
				},
				{
					"id": 2001,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2897,
							"name": "PillOptGroup"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optgroups"
					}
				},
				{
					"id": 1978,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available options"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2883,
							"name": "PillOption"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.options"
					}
				},
				{
					"id": 2015,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsRef"
					}
				},
				{
					"id": 1973,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 1983,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 1979,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 1963,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 2016,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showDelay"
					}
				},
				{
					"id": 1971,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 1970,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1966,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1965,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 2023,
					"name": "getColor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2024,
							"name": "getColor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the display color of an option's `Pill`\n`(option: unknown) => PillColor`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).color`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2025,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 2880,
								"name": "PillColor"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getColor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getColor"
					}
				},
				{
					"id": 1989,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1990,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning group ID for a given option to define a relation to `optgroups`\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).groupId`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1991,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "Id"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroup"
					}
				},
				{
					"id": 1992,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1993,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning ID of a given option\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1994,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getId"
					}
				},
				{
					"id": 1995,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1996,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of an option\n`(option: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1997,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getLabel"
					}
				},
				{
					"id": 2026,
					"name": "getSuggested",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2027,
							"name": "getSuggested",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning `boolean` value to suggest this option if nothing is selected.\n`(option: unknown) => boolean`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).suggested`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2028,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getSuggested"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getSuggested"
					}
				},
				{
					"id": 2017,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2018,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the ID of a group\n`(group: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2019,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupGetId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupGetId"
					}
				},
				{
					"id": 2020,
					"name": "groupGetLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2021,
							"name": "groupGetLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of a group\n`(group: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2022,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.groupGetLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.groupGetLabel"
					}
				},
				{
					"id": 1998,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1999,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a search bar to the select."
							},
							"parameters": [
								{
									"id": 2000,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1980,
						1984,
						1955,
						1987,
						1988,
						1972,
						1954,
						1968,
						1967,
						1969,
						1960,
						2013,
						1961,
						2006,
						2014,
						2011,
						1964,
						2012,
						1962,
						2007,
						2002,
						1974,
						2001,
						1978,
						2015,
						1973,
						1983,
						1979,
						1963,
						2016,
						1971,
						1970,
						1966,
						1965
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2023,
						1989,
						1992,
						1995,
						2026,
						2017,
						2020,
						1998
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 531,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2029,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1890,
						"name": "FieldPillSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2029,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1891,
							"typeArguments": [
								{
									"type": "reference",
									"id": 2029,
									"name": "Value"
								}
							],
							"name": "FieldPillSelectComponentProps"
						},
						{
							"type": "literal",
							"value": "field"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1290,
			"name": "FieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1292,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1308,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1308,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1293,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1294,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1308,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1308,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1295,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1308,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1308,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1296,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1308,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1308,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1294,
												1295,
												1296
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.as"
					}
				},
				{
					"id": 1291,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1308,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1308,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1308,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1308,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					}
				},
				{
					"id": 1305,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.colStart"
					}
				},
				{
					"id": 1304,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.colWidth"
					}
				},
				{
					"id": 1306,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.data-qa"
					}
				},
				{
					"id": 1297,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 1298,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 1301,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.label"
					}
				},
				{
					"id": 1299,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.name"
					}
				},
				{
					"id": 1300,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.required"
					}
				},
				{
					"id": 1307,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tooltip"
					}
				},
				{
					"id": 1303,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.validate"
					}
				},
				{
					"id": 1302,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1292,
						1291,
						1305,
						1304,
						1306,
						1297,
						1298,
						1301,
						1299,
						1300,
						1307,
						1303,
						1302
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 223,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1308,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1245,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1308,
									"name": "Value"
								},
								{
									"type": "reference",
									"id": 1235,
									"typeArguments": [
										{
											"type": "reference",
											"id": 1308,
											"name": "Value"
										}
									],
									"name": "ValueComponentProps"
								}
							],
							"name": "BaseFieldProps"
						},
						{
							"type": "literal",
							"value": "children"
						}
					],
					"name": "Omit"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1334,
					"name": "FieldTextProps"
				},
				{
					"type": "reference",
					"id": 1371,
					"name": "FieldNumberProps"
				},
				{
					"type": "reference",
					"id": 1407,
					"name": "FieldCurrencyProps"
				},
				{
					"type": "reference",
					"id": 1452,
					"name": "FieldDateProps"
				},
				{
					"type": "reference",
					"id": 1503,
					"name": "FieldCheckboxProps"
				},
				{
					"type": "reference",
					"id": 1534,
					"name": "FieldTextAreaProps"
				},
				{
					"type": "reference",
					"id": 1612,
					"name": "FieldRadioButtonsProps"
				},
				{
					"type": "reference",
					"id": 1662,
					"name": "FieldCheckboxesProps"
				},
				{
					"type": "reference",
					"id": 1800,
					"name": "FieldSelectProps"
				},
				{
					"type": "reference",
					"id": 1953,
					"name": "FieldPillSelectProps"
				},
				{
					"type": "reference",
					"id": 2090,
					"name": "FieldMultiSelectProps"
				},
				{
					"type": "reference",
					"id": 2231,
					"name": "FieldGroupSelectProps"
				},
				{
					"type": "reference",
					"id": 2374,
					"name": "FieldTieredSelectProps"
				}
			]
		},
		{
			"id": 1597,
			"name": "FieldRadioButtonsComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1609,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.className"
					}
				},
				{
					"id": 1601,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1611,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1608,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1611,
							"name": "Value"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1610,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.style"
					}
				},
				{
					"id": 1602,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1603,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1604,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1605,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1606,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1607,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1598,
					"name": "isDisabledOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 368,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1599,
							"name": "isDisabledOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1600,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1611,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1609,
						1601,
						1608,
						1610
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1602,
						1605,
						1598
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 363,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1611,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1596,
						"name": "FieldRadioButtonsValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1611,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1611,
									"name": "Value"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 617,
							"name": "Props"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "className"
								},
								{
									"type": "literal",
									"value": "style"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 1612,
			"name": "FieldRadioButtonsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1614,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1642,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1642,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1615,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1616,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1642,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1642,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1617,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1642,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1642,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1618,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1642,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1642,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1616,
												1617,
												1618
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1613,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1642,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1642,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1642,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1642,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1637,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.className"
					}
				},
				{
					"id": 1627,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1626,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1628,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1619,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1620,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1623,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1621,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1636,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1642,
							"name": "Value"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1622,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1638,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.style"
					}
				},
				{
					"id": 1629,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1625,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1624,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 1630,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1631,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1632,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1633,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1634,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1635,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1639,
					"name": "isDisabledOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 368,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1640,
							"name": "isDisabledOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1641,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1611,
										"name": "Value"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isDisabledOption"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isDisabledOption"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1614,
						1613,
						1637,
						1627,
						1626,
						1628,
						1619,
						1620,
						1623,
						1621,
						1636,
						1622,
						1638,
						1629,
						1625,
						1624
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1630,
						1633,
						1639
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 371,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1642,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1596,
						"name": "FieldRadioButtonsValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1642,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1642,
									"name": "Value"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 617,
							"name": "Props"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "className"
								},
								{
									"type": "literal",
									"value": "style"
								}
							]
						}
					],
					"name": "Pick"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1597,
							"name": "FieldRadioButtonsComponentProps"
						},
						{
							"type": "literal",
							"value": "isDisabledOption"
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 1556,
			"name": "FieldRichTextComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1558,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3142,
						"name": "TextEditorProps.disabled"
					}
				},
				{
					"id": 1559,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3143,
						"name": "TextEditorProps.error"
					}
				},
				{
					"id": 1557,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1568,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1560,
					"name": "init",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "unsupported",
								"text": "Use at your own risk. DST makes no guarantees about this API, and is subject to removal at any point without warning or deprecation.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "RawEditorSettings"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1561,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3144,
						"name": "TextEditorProps.init"
					}
				},
				{
					"id": 1562,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n`initialValue` has been deprecated and will be removed in a future version.\nPlease use the `value` prop instead\n\nThe first value passed into `value` prop will be the `TextEditor` initial\nvalue. Changing the value will update the text of the `TextEditor`.\nThe editor should be controlled via the combination of `value`\nand `onChange` props.\n\n**Before**\n\n`<TextEditor initialValue=\"Hello World\" />`\n\n**After**\n\n`<TextEditor value=\"Hello World\" />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3146,
						"name": "TextEditorProps.initialValue"
					}
				},
				{
					"id": 1563,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Locale which will be used used for localization. Can be passed directly or\nset by wrapping components in I18n provider. Icelandic (is-IS) is not\nactually supported by TinyMCE, so it is defaulted to english."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Locale"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3147,
						"name": "TextEditorProps.locale"
					}
				},
				{
					"id": 1567,
					"name": "plugins",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n Array of plugins to use with the editor in addition to the defaults.\n Can be any of:\n</div>\n<CodeBlock>\n [{plugins.map((plugin) => `'${plugin}'`).join(', ')}]\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3151,
						"name": "TextEditorProps.plugins"
					}
				},
				{
					"id": 1564,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1565,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>onChange event handler for text editor area</div>\n<CodeBlock>(content: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1566,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3149,
								"name": "TextEditorProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3148,
						"name": "TextEditorProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1558,
						1559,
						1557,
						1560,
						1562,
						1563,
						1567
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1564
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 351,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1568,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1555,
						"name": "FieldRichTextValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1568,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 3141,
					"name": "TextEditorProps"
				}
			]
		},
		{
			"id": 1569,
			"name": "FieldRichTextProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1570,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1595,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1595,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1571,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1572,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1595,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1595,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1573,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1595,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1595,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1574,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1595,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1595,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1572,
												1573,
												1574
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.as"
					}
				},
				{
					"id": 1575,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1595,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1595,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1595,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1595,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 1583,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.colStart"
					}
				},
				{
					"id": 1582,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.colWidth"
					}
				},
				{
					"id": 1584,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.data-qa"
					}
				},
				{
					"id": 1576,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3142,
						"name": "TextEditorProps.disabled"
					}
				},
				{
					"id": 1586,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3143,
						"name": "TextEditorProps.error"
					}
				},
				{
					"id": 1587,
					"name": "init",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "unsupported",
								"text": "Use at your own risk. DST makes no guarantees about this API, and is subject to removal at any point without warning or deprecation.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "RawEditorSettings"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1588,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3144,
						"name": "TextEditorProps.init"
					}
				},
				{
					"id": 1589,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n`initialValue` has been deprecated and will be removed in a future version.\nPlease use the `value` prop instead\n\nThe first value passed into `value` prop will be the `TextEditor` initial\nvalue. Changing the value will update the text of the `TextEditor`.\nThe editor should be controlled via the combination of `value`\nand `onChange` props.\n\n**Before**\n\n`<TextEditor initialValue=\"Hello World\" />`\n\n**After**\n\n`<TextEditor value=\"Hello World\" />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3146,
						"name": "TextEditorProps.initialValue"
					}
				},
				{
					"id": 1579,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.label"
					}
				},
				{
					"id": 1590,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Locale which will be used used for localization. Can be passed directly or\nset by wrapping components in I18n provider. Icelandic (is-IS) is not\nactually supported by TinyMCE, so it is defaulted to english."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Locale"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3147,
						"name": "TextEditorProps.locale"
					}
				},
				{
					"id": 1577,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.name"
					}
				},
				{
					"id": 1594,
					"name": "plugins",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n Array of plugins to use with the editor in addition to the defaults.\n Can be any of:\n</div>\n<CodeBlock>\n [{plugins.map((plugin) => `'${plugin}'`).join(', ')}]\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3151,
						"name": "TextEditorProps.plugins"
					}
				},
				{
					"id": 1578,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.required"
					}
				},
				{
					"id": 1585,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tooltip"
					}
				},
				{
					"id": 1581,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.validate"
					}
				},
				{
					"id": 1580,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.view"
					}
				},
				{
					"id": 1591,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1592,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>onChange event handler for text editor area</div>\n<CodeBlock>(content: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1593,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3149,
								"name": "TextEditorProps.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3148,
						"name": "TextEditorProps.onChange"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1570,
						1575,
						1583,
						1582,
						1584,
						1576,
						1586,
						1587,
						1589,
						1579,
						1590,
						1577,
						1594,
						1578,
						1585,
						1581,
						1580
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1591
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 355,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1595,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1555,
						"name": "FieldRichTextValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1290,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1595,
									"name": "Value"
								}
							],
							"name": "FieldProps"
						},
						{
							"type": "literal",
							"value": "error"
						}
					],
					"name": "Omit"
				},
				{
					"type": "reference",
					"id": 3141,
					"name": "TextEditorProps"
				}
			]
		},
		{
			"id": 1724,
			"name": "FieldSelectComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1776,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1777,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1778,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 1780,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1781,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1782,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 1783,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 1784,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 1768,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 1775,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 1793,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 1759,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1797,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1789,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.footer"
					}
				},
				{
					"id": 1794,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hideDelay"
					}
				},
				{
					"id": 1791,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 1790,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.label"
					}
				},
				{
					"id": 1792,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 1747,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback for when cleared. Default enabled, has clear icon."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 483,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1748,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1749,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1750,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLButtonElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1785,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1786,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1787,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 1788,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 1751,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback for when searching. Default enabled, has seach bar in menu."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 488,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1752,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1753,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Adds a search bar to the select."
											},
											"parameters": [
												{
													"id": 1754,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLInputElement"
															}
														],
														"name": "ChangeEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1770,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1771,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1772,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1773,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSelect"
					}
				},
				{
					"id": 1740,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 471,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1799,
							"name": "GroupItem"
						}
					}
				},
				{
					"id": 1766,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1798,
							"name": "OptionItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1795,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsRef"
					}
				},
				{
					"id": 1769,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 1779,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 1774,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 1796,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showDelay"
					}
				},
				{
					"id": 1767,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 1725,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 439,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1726,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>optgroups</Code>\n<Code>{'(option: OptionItem) => string | number'}</Code>"
							},
							"parameters": [
								{
									"id": 1727,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 1760,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1761,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1762,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1763,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1764,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1765,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1728,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 440,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1729,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1730,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 1731,
					"name": "groupGetLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 453,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1732,
							"name": "groupGetLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of a group\n <Code>{'(group: GroupItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group: GroupItem) => group.label || group.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1733,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1734,
					"name": "groupHeaderRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 459,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1735,
							"name": "groupHeaderRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in <Code>optgroups</Code>\n<Code>{'(group: GroupItem) => React.ReactNode'}</Code>"
							},
							"parameters": [
								{
									"id": 1736,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 1737,
					"name": "isSuggestedOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 466,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1738,
							"name": "isSuggestedOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If nothing is selected, suggest this option. From{' '}\n<Code>{'Select.Option suggested'}</Code>.\n<Code>{'(option: OptionItem) => boolean'}</Code>"
							},
							"parameters": [
								{
									"id": 1739,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1744,
					"name": "onBlur",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 478,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1745,
							"name": "onBlur",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1746,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "FocusEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "Omit.onBlur"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Omit.onBlur"
					}
				},
				{
					"id": 1741,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 477,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1742,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each <Code>option</Code>\n<Code>{'(option: OptionItem) => React.ReactNode'}</Code>"
							},
							"parameters": [
								{
									"id": 1743,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 1755,
					"name": "searchComparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 494,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1756,
							"name": "searchComparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Customize how search works</div>\n<Code>{'(query: string, value: string) => boolean'}</Code>"
							},
							"parameters": [
								{
									"id": 1757,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1758,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1776,
						1780,
						1783,
						1784,
						1768,
						1775,
						1793,
						1759,
						1789,
						1794,
						1791,
						1790,
						1792,
						1747,
						1785,
						1751,
						1770,
						1740,
						1766,
						1795,
						1769,
						1779,
						1774,
						1796,
						1767
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1725,
						1760,
						1763,
						1728,
						1731,
						1734,
						1737,
						1744,
						1741,
						1755
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 427,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1797,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1696,
						"name": "FieldSelectValueType"
					}
				},
				{
					"id": 1798,
					"name": "OptionItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1697,
						"name": "FieldSelectOptionItem"
					}
				},
				{
					"id": 1799,
					"name": "GroupItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1698,
						"name": "FieldSelectGroupItem"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1797,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1798,
									"name": "OptionItem"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "SelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onClear"
								},
								{
									"type": "literal",
									"value": "onSearch"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1800,
			"name": "FieldSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1867,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1868,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1869,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 1871,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1872,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1873,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 1802,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1887,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1887,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1803,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1804,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1887,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1887,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1805,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1887,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1887,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1806,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1887,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1887,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1804,
												1805,
												1806
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1874,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 1875,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 1860,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 1801,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1887,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1887,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1887,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1887,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1815,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1814,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1816,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1807,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1883,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 1808,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1880,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.footer"
					}
				},
				{
					"id": 1884,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hideDelay"
					}
				},
				{
					"id": 1881,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 1811,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1882,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 1809,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1836,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback for when cleared. Default enabled, has clear icon."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 483,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1837,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1838,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1839,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLButtonElement"
															},
															{
																"type": "reference",
																"name": "MouseEvent"
															}
														],
														"name": "MouseEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.onClear"
					}
				},
				{
					"id": 1876,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1877,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1878,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 1879,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 1831,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback for when searching. Default enabled, has seach bar in menu."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 488,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1832,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1833,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Adds a search bar to the select."
											},
											"parameters": [
												{
													"id": 1834,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLInputElement"
															}
														],
														"name": "ChangeEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.onSearch"
					}
				},
				{
					"id": 1862,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1863,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1864,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1865,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSelect"
					}
				},
				{
					"id": 1835,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 471,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1889,
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.optgroups"
					}
				},
				{
					"id": 1824,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1888,
							"name": "OptionItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 1885,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsRef"
					}
				},
				{
					"id": 1861,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 1870,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 1866,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 1810,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1886,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showDelay"
					}
				},
				{
					"id": 1859,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 1817,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1813,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1812,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 1828,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 439,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1829,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>optgroups</Code>\n<Code>{'(option: OptionItem) => string | number'}</Code>"
							},
							"parameters": [
								{
									"id": 1830,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getGroup"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getGroup"
					}
				},
				{
					"id": 1818,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1819,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1820,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 1821,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1822,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1823,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 1840,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 440,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1841,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1842,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.groupGetId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.groupGetId"
					}
				},
				{
					"id": 1843,
					"name": "groupGetLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 453,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1844,
							"name": "groupGetLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of a group\n <Code>{'(group: GroupItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group: GroupItem) => group.label || group.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1845,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.groupGetLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.groupGetLabel"
					}
				},
				{
					"id": 1846,
					"name": "groupHeaderRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 459,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1847,
							"name": "groupHeaderRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in <Code>optgroups</Code>\n<Code>{'(group: GroupItem) => React.ReactNode'}</Code>"
							},
							"parameters": [
								{
									"id": 1848,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1799,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.groupHeaderRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.groupHeaderRenderer"
					}
				},
				{
					"id": 1849,
					"name": "isSuggestedOption",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 466,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1850,
							"name": "isSuggestedOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If nothing is selected, suggest this option. From{' '}\n<Code>{'Select.Option suggested'}</Code>.\n<Code>{'(option: OptionItem) => boolean'}</Code>"
							},
							"parameters": [
								{
									"id": 1851,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isSuggestedOption"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isSuggestedOption"
					}
				},
				{
					"id": 1825,
					"name": "onBlur",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 478,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1826,
							"name": "onBlur",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1827,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "FocusEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.onBlur"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.onBlur"
					}
				},
				{
					"id": 1852,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 477,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1853,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each <Code>option</Code>\n<Code>{'(option: OptionItem) => React.ReactNode'}</Code>"
							},
							"parameters": [
								{
									"id": 1854,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1798,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.optionRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.optionRenderer"
					}
				},
				{
					"id": 1855,
					"name": "searchComparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 494,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1856,
							"name": "searchComparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Customize how search works</div>\n<Code>{'(query: string, value: string) => boolean'}</Code>"
							},
							"parameters": [
								{
									"id": 1857,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1858,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.searchComparator"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.searchComparator"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1867,
						1871,
						1802,
						1874,
						1875,
						1860,
						1801,
						1815,
						1814,
						1816,
						1807,
						1883,
						1808,
						1880,
						1884,
						1881,
						1811,
						1882,
						1809,
						1836,
						1876,
						1831,
						1862,
						1835,
						1824,
						1885,
						1861,
						1870,
						1866,
						1810,
						1886,
						1859,
						1817,
						1813,
						1812
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1828,
						1818,
						1821,
						1840,
						1843,
						1846,
						1849,
						1825,
						1852,
						1855
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 496,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1887,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1696,
						"name": "FieldSelectValueType"
					}
				},
				{
					"id": 1888,
					"name": "OptionItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1697,
						"name": "FieldSelectOptionItem"
					}
				},
				{
					"id": 1889,
					"name": "GroupItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1698,
						"name": "FieldSelectGroupItem"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1887,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1888,
									"name": "OptionItem"
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1724,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1887,
									"name": "Value"
								},
								{
									"type": "reference",
									"id": 1888,
									"name": "OptionItem"
								},
								{
									"type": "reference",
									"id": 1889,
									"name": "GroupItem"
								}
							],
							"name": "FieldSelectComponentProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "getGroup"
								},
								{
									"type": "literal",
									"value": "groupGetId"
								},
								{
									"type": "literal",
									"value": "groupGetLabel"
								},
								{
									"type": "literal",
									"value": "groupHeaderRenderer"
								},
								{
									"type": "literal",
									"value": "isSuggestedOption"
								},
								{
									"type": "literal",
									"value": "onBlur"
								},
								{
									"type": "literal",
									"value": "onClear"
								},
								{
									"type": "literal",
									"value": "optgroups"
								},
								{
									"type": "literal",
									"value": "onSearch"
								},
								{
									"type": "literal",
									"value": "optionRenderer"
								},
								{
									"type": "literal",
									"value": "searchComparator"
								}
							]
						}
					],
					"name": "Pick"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "SelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onClear"
								},
								{
									"type": "literal",
									"value": "onSearch"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								},
								{
									"type": "literal",
									"value": "label"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1528,
			"name": "FieldTextAreaComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1530,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `TextArea`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3138,
						"name": "TextAreaProps.error"
					}
				},
				{
					"id": 1529,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1533,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1531,
					"name": "resize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the resize rules for the `TextArea`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "both"
							},
							{
								"type": "literal",
								"value": "horizontal"
							},
							{
								"type": "literal",
								"value": "vertical"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3139,
						"name": "TextAreaProps.resize"
					}
				},
				{
					"id": 1532,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nThe `variant` prop has been deprecated and will be removed in a future version.\nPlease use the `error` boolean prop instead.\n\n**Before**\n\n`<TextArea variant=\"error\" />`\n\n**After**\n\n`<TextArea error />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3140,
						"name": "TextAreaProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1530,
						1529,
						1531,
						1532
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 340,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1533,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1527,
						"name": "FieldTextAreaValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1533,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 3137,
					"name": "TextAreaProps"
				}
			]
		},
		{
			"id": 1534,
			"name": "FieldTextAreaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1536,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1554,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1554,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1537,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1538,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1554,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1554,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1539,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1554,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1554,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1540,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1554,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1554,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1538,
												1539,
												1540
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1535,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1554,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1554,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1554,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1554,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1549,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1548,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1550,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1541,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1542,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1545,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1543,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1544,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1553,
					"name": "resize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the resize rules for the `TextArea`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "both"
							},
							{
								"type": "literal",
								"value": "horizontal"
							},
							{
								"type": "literal",
								"value": "vertical"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.resize"
					}
				},
				{
					"id": 1551,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1547,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1552,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nThe `variant` prop has been deprecated and will be removed in a future version.\nPlease use the `error` boolean prop instead.\n\n**Before**\n\n`<TextArea variant=\"error\" />`\n\n**After**\n\n`<TextArea error />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				},
				{
					"id": 1546,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1536,
						1535,
						1549,
						1548,
						1550,
						1541,
						1542,
						1545,
						1543,
						1544,
						1553,
						1551,
						1547,
						1552,
						1546
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 343,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1554,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1527,
						"name": "FieldTextAreaValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1554,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3137,
							"name": "TextAreaProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "name"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1329,
			"name": "FieldTextComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1331,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2554,
						"name": "InputProps.error"
					}
				},
				{
					"id": 1330,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1333,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 1332,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2555,
						"name": "InputProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1331,
						1330,
						1332
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 278,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1333,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1328,
						"name": "FieldTextValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1333,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"id": 2553,
					"name": "InputProps"
				}
			]
		},
		{
			"id": 1334,
			"name": "FieldTextProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1336,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1353,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1353,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1337,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1338,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1353,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1353,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1339,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1353,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1353,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1340,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1353,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1353,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1338,
												1339,
												1340
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 1335,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1353,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1353,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1353,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 1353,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 1349,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 1348,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 1350,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 1341,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 1342,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 1345,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 1343,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 1344,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 1351,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 1347,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 1352,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				},
				{
					"id": 1346,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1336,
						1335,
						1349,
						1348,
						1350,
						1341,
						1342,
						1345,
						1343,
						1344,
						1351,
						1347,
						1352,
						1346
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 281,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1353,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 1328,
						"name": "FieldTextValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1353,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2553,
							"name": "InputProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "name"
								},
								{
									"type": "literal",
									"value": "children"
								},
								{
									"type": "literal",
									"value": "error"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2313,
			"name": "FieldTieredSelectComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2329,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2330,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2331,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2332,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2333,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2334,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2335,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2336,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2323,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 152,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2328,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 153,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 2314,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 49
						}
					],
					"type": {
						"type": "reference",
						"id": 1220,
						"typeArguments": [
							{
								"type": "reference",
								"id": 2373,
								"name": "Value"
							}
						],
						"name": "FieldAPI"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ValueComponentProps.field"
					}
				},
				{
					"id": 2349,
					"name": "getValueString",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "GetValueString"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getValueString"
					}
				},
				{
					"id": 2356,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 2371,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2363,
					"name": "loadingMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 95,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loadingMore"
					}
				},
				{
					"id": 2345,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 113,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2346,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2347,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
									},
									"parameters": [
										{
											"id": 2348,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLButtonElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 2341,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2342,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2343,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the selection menu is scrolled to the bottom. Can be\ncombined with <Code>loadingMore</Code>\nfor an async infinite scrolling menu.\n<CodeBlock>{'(event) =>'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2344,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2337,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2338,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2339,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a search bar to the select."
									},
									"parameters": [
										{
											"id": 2340,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLInputElement"
													}
												],
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2321,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 2373,
									"name": "Value"
								}
							},
							"objectType": {
								"type": "reference",
								"id": 2373,
								"name": "Value"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2372,
					"name": "selectableTiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If true, any tier is selectable. If false, only leaf nodes are selectable",
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectableTiers"
					}
				},
				{
					"id": 2322,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2327,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flat array of tier objects that represents the selected value"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 171,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2350,
					"name": "getGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2351,
							"name": "getGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2352,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroupId"
					}
				},
				{
					"id": 2315,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2316,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2317,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2318,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2319,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2320,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2353,
					"name": "getNextGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2354,
							"name": "getNextGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2355,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getNextGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getNextGroupId"
					}
				},
				{
					"id": 2360,
					"name": "isLeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2361,
							"name": "isLeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2362,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isLeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isLeaf"
					}
				},
				{
					"id": 2357,
					"name": "isTierDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2358,
							"name": "isTierDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2359,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isTierDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isTierDisabled"
					}
				},
				{
					"id": 2324,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2325,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2326,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TierSelection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2364,
					"name": "onNavigate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2365,
							"name": "onNavigate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2366,
									"name": "nextGroupId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Id"
									}
								},
								{
									"id": 2367,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onNavigate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onNavigate"
					}
				},
				{
					"id": 2368,
					"name": "onQuickCreate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 131,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2369,
							"name": "onQuickCreate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2370,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onQuickCreate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onQuickCreate"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2329,
						2332,
						2335,
						2336,
						2323,
						2328,
						2314,
						2349,
						2356,
						2371,
						2363,
						2345,
						2341,
						2337,
						2321,
						2372,
						2322,
						2327
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2350,
						2315,
						2318,
						2353,
						2360,
						2357,
						2324,
						2364,
						2368
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 567,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2373,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2312,
						"name": "FieldTieredSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1235,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2373,
							"name": "Value"
						}
					],
					"name": "ValueComponentProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 2373,
											"name": "Value"
										}
									},
									"objectType": {
										"type": "reference",
										"id": 2373,
										"name": "Value"
									}
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 534,
							"name": "TieredSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2374,
			"name": "FieldTieredSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2405,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2406,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2407,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2408,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2409,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2410,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2376,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2449,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1235,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2449,
												"name": "Value"
											}
										],
										"name": "ValueComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2377,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2378,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2449,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2449,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2379,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2449,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2449,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 2380,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2449,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1235,
														"typeArguments": [
															{
																"type": "reference",
																"id": 2449,
																"name": "Value"
															}
														],
														"name": "ValueComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2378,
												2379,
												2380
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1292,
						"name": "FieldProps.as"
					}
				},
				{
					"id": 2411,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2412,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2400,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 152,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2375,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1245,
										"typeArguments": [
											{
												"type": "reference",
												"id": 2449,
												"name": "Value"
											},
											{
												"type": "reference",
												"id": 1235,
												"typeArguments": [
													{
														"type": "reference",
														"id": 2449,
														"name": "Value"
													}
												],
												"name": "ValueComponentProps"
											}
										],
										"name": "BaseFieldProps"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"name": "ReactElement"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 2449,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1235,
													"typeArguments": [
														{
															"type": "reference",
															"id": 2449,
															"name": "Value"
														}
													],
													"name": "ValueComponentProps"
												}
											],
											"name": "BaseFieldProps"
										},
										{
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "JSXElementConstructor"
												}
											]
										}
									],
									"name": "ReactElement"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1291,
						"name": "FieldProps.children"
					}
				},
				{
					"id": 2389,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Starting location of column. For traditional variant, this does not exist\nand is not necessary."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 168,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1305,
						"name": "FieldProps.colStart"
					}
				},
				{
					"id": 2388,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of column. For traditional variant, will be either 6 or 12.",
						"tags": [
							{
								"tag": "default",
								"text": "6\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 174,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1304,
						"name": "FieldProps.colWidth"
					}
				},
				{
					"id": 2390,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1306,
						"name": "FieldProps.data-qa"
					}
				},
				{
					"id": 2381,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1297,
						"name": "FieldProps.disabled"
					}
				},
				{
					"id": 2382,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1298,
						"name": "FieldProps.error"
					}
				},
				{
					"id": 2425,
					"name": "getValueString",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "GetValueString"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getValueString"
					}
				},
				{
					"id": 2432,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 2385,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1301,
						"name": "FieldProps.label"
					}
				},
				{
					"id": 2447,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2439,
					"name": "loadingMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 95,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loadingMore"
					}
				},
				{
					"id": 2383,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1299,
						"name": "FieldProps.name"
					}
				},
				{
					"id": 2421,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 113,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2422,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2423,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
									},
									"parameters": [
										{
											"id": 2424,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLButtonElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 2417,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2418,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2419,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the selection menu is scrolled to the bottom. Can be\ncombined with <Code>loadingMore</Code>\nfor an async infinite scrolling menu.\n<CodeBlock>{'(event) =>'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 2420,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2413,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2414,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2415,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a search bar to the select."
									},
									"parameters": [
										{
											"id": 2416,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLInputElement"
													}
												],
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 2398,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 2449,
									"name": "Value"
								}
							},
							"objectType": {
								"type": "reference",
								"id": 2449,
								"name": "Value"
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.options"
					}
				},
				{
					"id": 2384,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1300,
						"name": "FieldProps.required"
					}
				},
				{
					"id": 2448,
					"name": "selectableTiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If true, any tier is selectable. If false, only leaf nodes are selectable",
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectableTiers"
					}
				},
				{
					"id": 2399,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2391,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1307,
						"name": "FieldProps.tooltip"
					}
				},
				{
					"id": 2387,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1303,
						"name": "FieldProps.validate"
					}
				},
				{
					"id": 2404,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flat array of tier objects that represents the selected value"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 171,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 2386,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 1302,
						"name": "FieldProps.view"
					}
				},
				{
					"id": 2426,
					"name": "getGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2427,
							"name": "getGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2428,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroupId"
					}
				},
				{
					"id": 2392,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2393,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2394,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 2395,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2396,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 2397,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 2429,
					"name": "getNextGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2430,
							"name": "getNextGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2431,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getNextGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getNextGroupId"
					}
				},
				{
					"id": 2436,
					"name": "isLeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2437,
							"name": "isLeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2438,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isLeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isLeaf"
					}
				},
				{
					"id": 2433,
					"name": "isTierDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2434,
							"name": "isTierDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2435,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isTierDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isTierDisabled"
					}
				},
				{
					"id": 2401,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2402,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2403,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TierSelection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onChange"
					}
				},
				{
					"id": 2440,
					"name": "onNavigate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2441,
							"name": "onNavigate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2442,
									"name": "nextGroupId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Id"
									}
								},
								{
									"id": 2443,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onNavigate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onNavigate"
					}
				},
				{
					"id": 2444,
					"name": "onQuickCreate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 131,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2445,
							"name": "onQuickCreate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2446,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onQuickCreate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onQuickCreate"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2405,
						2408,
						2376,
						2411,
						2412,
						2400,
						2375,
						2389,
						2388,
						2390,
						2381,
						2382,
						2425,
						2432,
						2385,
						2447,
						2439,
						2383,
						2421,
						2417,
						2413,
						2398,
						2384,
						2448,
						2399,
						2391,
						2387,
						2404,
						2386
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2426,
						2392,
						2395,
						2429,
						2436,
						2433,
						2401,
						2440,
						2444
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 575,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2449,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2312,
						"name": "FieldTieredSelectValueType"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1290,
					"typeArguments": [
						{
							"type": "reference",
							"id": 2449,
							"name": "Value"
						}
					],
					"name": "FieldProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1309,
							"typeArguments": [
								{
									"type": "indexedAccess",
									"indexType": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 2449,
											"name": "Value"
										}
									},
									"objectType": {
										"type": "reference",
										"id": 2449,
										"name": "Value"
									}
								}
							],
							"name": "OptionList"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 534,
							"name": "TieredSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getId"
								},
								{
									"type": "literal",
									"value": "error"
								},
								{
									"type": "literal",
									"value": "children"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1086,
			"name": "FileListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1087,
					"name": "downloadAllUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "\"Download All\" link URL"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileList/FileList.types.tsx",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1088,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileList/FileList.types.tsx",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "FileListItem"
						}
					}
				},
				{
					"id": 1089,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileList/FileList.types.tsx",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1087,
						1088,
						1089
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileList/FileList.types.tsx",
					"line": 10,
					"character": 17
				}
			]
		},
		{
			"id": 114,
			"name": "FileSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 169,
					"name": "accept",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set accepted file types. Accepts everything if left undefined"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 211,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 141,
					"name": "hideDropzone",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide dropzone and render only default \"Attach File(s)\" button.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 137,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 142,
					"name": "hideLocalSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide local files source in file explorer modal"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 142,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 166,
					"name": "maxFileNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum number of files that can be selected"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 196,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 167,
					"name": "maxFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 201,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 168,
					"name": "minFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Minimum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 206,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 165,
					"name": "uploadFile",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function for manually controlling the network request for file\nupload. An alternative to using `getEndpoint` which handles\nthe network request itself."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 191,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UploadFile"
					}
				},
				{
					"id": 125,
					"name": "beforeLocalFileUpload",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 106,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 126,
							"name": "beforeLocalFileUpload",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Optional async function that is invoked when selecting or dropping in a\nlocal file. If you want to restrict certain uploads, you can use this\ncallback. Returning true continues the upload, while false will prevent\nupload."
							},
							"parameters": [
								{
									"id": 127,
									"name": "files",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ThumbnailListItem"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 138,
					"name": "dropzoneContentRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 139,
							"name": "dropzoneContentRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An optional content renderer for the dropzone. Accepts\n`{ open, disabled, errorMessage }` as a single argument,\nallowing to control the dropzone and display different content depending\non dropzone state"
							},
							"parameters": [
								{
									"id": 140,
									"name": "dropzoneProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "DropzoneContentRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "getEndpoint",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 151,
							"name": "getEndpoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning an upload URL for a given file. An\nalternative to `uploadFile` which allows manual control of\nthe network request for file upload."
							},
							"parameters": [
								{
									"id": 152,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 162,
					"name": "getHeaders",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 184,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 163,
							"name": "getHeaders",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning an upload request headers. Returns empty\nobject by default."
							},
							"parameters": [
								{
									"id": 164,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						}
					]
				},
				{
					"id": 153,
					"name": "getMethod",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 154,
							"name": "getMethod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning an upload HTTP method for a given file.\nReturns `POST` by default."
							},
							"parameters": [
								{
									"id": 155,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Method"
							}
						}
					]
				},
				{
					"id": 159,
					"name": "getPayload",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 178,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 160,
							"name": "getPayload",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning an upload payload `FormData`\nobject for a given file. When defined, `getPayloadKey` is\nignored."
							},
							"parameters": [
								{
									"id": 161,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FormData"
							}
						}
					]
				},
				{
					"id": 156,
					"name": "getPayloadKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 171,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 157,
							"name": "getPayloadKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning an upload payload `FormData` key\nfor a given file. Returns `file` by default."
							},
							"parameters": [
								{
									"id": 158,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 143,
					"name": "getTokenLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 148,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 144,
							"name": "getTokenLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Customize the token label for a given source value. By default,\n`sourceValueEntry.name` is returned."
							},
							"parameters": [
								{
									"id": 145,
									"name": "sourceId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 146,
									"name": "sourceValueEntry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "localSourceDropzoneContentRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "localSourceDropzoneContentRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 149,
									"name": "dropzoneProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1000,
										"name": "DropzoneContentProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 115,
					"name": "onAdd",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 116,
							"name": "onAdd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called every time when the files are uploaded directly or\nattached via file explorer. The input data should be appended to the\ncurrent value. Files with upload errors are omitted."
							},
							"parameters": [
								{
									"id": 117,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FileSelectValue"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "onError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 132,
							"name": "onError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called whenever an upload error occures"
							},
							"parameters": [
								{
									"id": 133,
									"name": "fileId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ValueId"
									}
								},
								{
									"id": 134,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 135,
					"name": "onFileTokenClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 121,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 136,
							"name": "onFileTokenClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called when attached file receives a click"
							},
							"parameters": [
								{
									"id": 137,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FileSelectValueEntry"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 121,
					"name": "onProgress",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 122,
							"name": "onProgress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called whenever the upload progress is changed"
							},
							"parameters": [
								{
									"id": 123,
									"name": "fileId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ValueId"
									}
								},
								{
									"id": 124,
									"name": "progress",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 118,
					"name": "onRemove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 93,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 119,
							"name": "onRemove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called whenever the file is removed by user from the primary token\nlist. Removed item should be deleted from the current value by `id` key"
							},
							"parameters": [
								{
									"id": 120,
									"name": "valueEntry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FileSelectValueEntry"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 128,
					"name": "onUploadStateChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 111,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 129,
							"name": "onUploadStateChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "To be called whenever upload state is changed"
							},
							"parameters": [
								{
									"id": 130,
									"name": "isPendingUpload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						169,
						141,
						142,
						166,
						167,
						168,
						165
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						125,
						138,
						150,
						162,
						153,
						159,
						156,
						143,
						147,
						115,
						131,
						135,
						121,
						118,
						128
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
					"line": 80,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivAttributes"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onError"
								},
								{
									"type": "literal",
									"value": "onProgress"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 171,
			"name": "FileSelectQaTags",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 173,
					"name": "attachButton",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 172,
					"name": "localSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1041,
						"name": "QaTags"
					}
				},
				{
					"id": 174,
					"name": "removeEntry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						173,
						172,
						174
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/FileSelect.types.ts",
					"line": 74,
					"character": 17
				}
			]
		},
		{
			"id": 1149,
			"name": "FileTreeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1182,
					"name": "expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of keys of initially expanded nodes"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 106,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3313,
							"name": "NodeId"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.expanded"
					}
				},
				{
					"id": 1155,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "String icon variant is deprecated, use the React components directly from the `@procore/core-icons/dist` package\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 1156,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show/Hide loading indicator of the content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1157,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3314,
							"name": "Node"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.options"
					}
				},
				{
					"id": 1153,
					"name": "sourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1154,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1164,
					"name": "getChildren",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1165,
							"name": "getChildren",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Should return an array of children nodes.\n<CodeBlock>{'(node: Node): Node[]'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1166,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 3314,
									"name": "Node"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getChildren"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getChildren"
					}
				},
				{
					"id": 1158,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1159,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return{' '}\n<Code>label</Code> for row\n<CodeBlock>{'(node: Node): string'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1160,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getLabel"
					}
				},
				{
					"id": 1167,
					"name": "getParentId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1168,
							"name": "getParentId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return parent{' '}\n<Code>Node</Code>\n<CodeBlock>{'(node: Node): NodeId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1169,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3313,
								"name": "NodeId"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getParentId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getParentId"
					}
				},
				{
					"id": 1161,
					"name": "getRoot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1162,
							"name": "getRoot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function should return parent <Code>Root Node</Code>\n<CodeBlock>{'(): Node'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1163,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 3314,
											"name": "Node"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3314,
								"name": "Node"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getRoot"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getRoot"
					}
				},
				{
					"id": 1170,
					"name": "getType",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1171,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return{' '}\n<Code>'branch'</Code> or <Code>'leaf'</Code>\n<CodeBlock>{'(node: Node): NodeType'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1172,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeType"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.getType"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.getType"
					}
				},
				{
					"id": 1176,
					"name": "isExpandable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1177,
							"name": "isExpandable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function of whether to enable tree node expansion/collapsing.\n<CodeBlock>{'(node: Node): boolean'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1178,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isExpandable"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isExpandable"
					}
				},
				{
					"id": 1173,
					"name": "isSelectable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1174,
							"name": "isSelectable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function of whether to enable tree node selection.\n<CodeBlock>{'(node: Node): boolean'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1175,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.isSelectable"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.isSelectable"
					}
				},
				{
					"id": 1150,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1151,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback function fired with currently selected array of nodes.\n<CodeBlock>(nodes: DefaultNode[]) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1152,
									"name": "nodes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 3314,
											"name": "Node"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1179,
					"name": "onExpand",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 1180,
							"name": "onExpand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers when current node expand\n<CodeBlock>{'(node: Node): Promise<void>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 1181,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Pick.onExpand"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.onExpand"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1182,
						1155,
						1156,
						1157,
						1153,
						1154
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1164,
						1158,
						1167,
						1161,
						1170,
						1176,
						1173,
						1150,
						1179
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
					"line": 8,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3465,
							"typeArguments": [
								{
									"type": "reference",
									"id": 3314,
									"name": "TreeNode"
								}
							],
							"name": "TreeProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "options"
								},
								{
									"type": "literal",
									"value": "getRoot"
								},
								{
									"type": "literal",
									"value": "getChildren"
								},
								{
									"type": "literal",
									"value": "getLabel"
								},
								{
									"type": "literal",
									"value": "getParentId"
								},
								{
									"type": "literal",
									"value": "getType"
								},
								{
									"type": "literal",
									"value": "isSelectable"
								},
								{
									"type": "literal",
									"value": "isExpandable"
								},
								{
									"type": "literal",
									"value": "onExpand"
								},
								{
									"type": "literal",
									"value": "expanded"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 3768,
			"name": "FlexListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3784,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3749,
						"name": "FlexProps.alignContent"
					}
				},
				{
					"id": 3785,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3750,
						"name": "FlexProps.alignItems"
					}
				},
				{
					"id": 3786,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3751,
						"name": "FlexProps.alignSelf"
					}
				},
				{
					"id": 3775,
					"name": "basis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3740,
						"name": "FlexProps.basis"
					}
				},
				{
					"id": 3769,
					"name": "boxProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Props to apply to each Box that wraps each child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/FlexList/FlexList.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3621,
						"name": "BoxProps"
					}
				},
				{
					"id": 3781,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3746,
						"name": "FlexProps.children"
					}
				},
				{
					"id": 3782,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3747,
						"name": "FlexProps.className"
					}
				},
				{
					"id": 3772,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "'row'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3737,
						"name": "FlexProps.direction"
					}
				},
				{
					"id": 3774,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3739,
						"name": "FlexProps.flex"
					}
				},
				{
					"id": 3776,
					"name": "grow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3741,
						"name": "FlexProps.grow"
					}
				},
				{
					"id": 3773,
					"name": "inline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3738,
						"name": "FlexProps.inline"
					}
				},
				{
					"id": 3787,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3752,
						"name": "FlexProps.justifyContent"
					}
				},
				{
					"id": 3788,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3753,
						"name": "FlexProps.margin"
					}
				},
				{
					"id": 3789,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3754,
						"name": "FlexProps.marginBottom"
					}
				},
				{
					"id": 3790,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3755,
						"name": "FlexProps.marginLeft"
					}
				},
				{
					"id": 3791,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3756,
						"name": "FlexProps.marginRight"
					}
				},
				{
					"id": 3792,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3757,
						"name": "FlexProps.marginTop"
					}
				},
				{
					"id": 3780,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3745,
						"name": "FlexProps.order"
					}
				},
				{
					"id": 3793,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3758,
						"name": "FlexProps.padding"
					}
				},
				{
					"id": 3794,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3759,
						"name": "FlexProps.paddingBottom"
					}
				},
				{
					"id": 3795,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3760,
						"name": "FlexProps.paddingLeft"
					}
				},
				{
					"id": 3796,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3761,
						"name": "FlexProps.paddingRight"
					}
				},
				{
					"id": 3797,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3762,
						"name": "FlexProps.paddingTop"
					}
				},
				{
					"id": 3777,
					"name": "shrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3742,
						"name": "FlexProps.shrink"
					}
				},
				{
					"id": 3770,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Margin on a single item. Between two items, `size` is double the distance of `space`."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/FlexList/FlexList.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3771,
					"name": "space",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Total margin between items. Between two items, `space` is half the distance of `size`."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/FlexList/FlexList.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3783,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3748,
						"name": "FlexProps.style"
					}
				},
				{
					"id": 3778,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3743,
						"name": "FlexProps.tabIndex"
					}
				},
				{
					"id": 3779,
					"name": "wrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3744,
						"name": "FlexProps.wrap"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3784,
						3785,
						3786,
						3775,
						3769,
						3781,
						3782,
						3772,
						3774,
						3776,
						3773,
						3787,
						3788,
						3789,
						3790,
						3791,
						3792,
						3780,
						3793,
						3794,
						3795,
						3796,
						3797,
						3777,
						3770,
						3771,
						3783,
						3778,
						3779
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/FlexList/FlexList.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3736,
					"name": "FlexProps"
				}
			]
		},
		{
			"id": 3610,
			"name": "FlexOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3611,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					}
				},
				{
					"id": 3612,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					}
				},
				{
					"id": 3613,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					}
				},
				{
					"id": 3614,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3611,
						3612,
						3613,
						3614
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 82,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3621,
					"name": "BoxProps"
				},
				{
					"type": "reference",
					"id": 3736,
					"name": "FlexProps"
				}
			]
		},
		{
			"id": 3736,
			"name": "FlexProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3749,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3611,
						"name": "FlexOptions.alignContent"
					}
				},
				{
					"id": 3750,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3612,
						"name": "FlexOptions.alignItems"
					}
				},
				{
					"id": 3751,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3613,
						"name": "FlexOptions.alignSelf"
					}
				},
				{
					"id": 3740,
					"name": "basis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3746,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3747,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3737,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "'row'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					}
				},
				{
					"id": 3739,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3741,
					"name": "grow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3738,
					"name": "inline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3752,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3614,
						"name": "FlexOptions.justifyContent"
					}
				},
				{
					"id": 3753,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3599,
						"name": "MarginOptions.margin"
					}
				},
				{
					"id": 3754,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3600,
						"name": "MarginOptions.marginBottom"
					}
				},
				{
					"id": 3755,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3601,
						"name": "MarginOptions.marginLeft"
					}
				},
				{
					"id": 3756,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3602,
						"name": "MarginOptions.marginRight"
					}
				},
				{
					"id": 3757,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3603,
						"name": "MarginOptions.marginTop"
					}
				},
				{
					"id": 3745,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3758,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3605,
						"name": "PaddingOptions.padding"
					}
				},
				{
					"id": 3759,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3606,
						"name": "PaddingOptions.paddingBottom"
					}
				},
				{
					"id": 3760,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3607,
						"name": "PaddingOptions.paddingLeft"
					}
				},
				{
					"id": 3761,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3608,
						"name": "PaddingOptions.paddingRight"
					}
				},
				{
					"id": 3762,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3609,
						"name": "PaddingOptions.paddingTop"
					}
				},
				{
					"id": 3742,
					"name": "shrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3748,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3743,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3744,
					"name": "wrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3749,
						3750,
						3751,
						3740,
						3746,
						3747,
						3737,
						3739,
						3741,
						3738,
						3752,
						3753,
						3754,
						3755,
						3756,
						3757,
						3745,
						3758,
						3759,
						3760,
						3761,
						3762,
						3742,
						3748,
						3743,
						3744
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Flex/Flex.types.ts",
					"line": 11,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"id": 3610,
					"name": "FlexOptions"
				},
				{
					"type": "reference",
					"id": 3598,
					"name": "MarginOptions"
				},
				{
					"type": "reference",
					"id": 3604,
					"name": "PaddingOptions"
				},
				{
					"type": "reference",
					"name": "StyleOptions"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3768,
					"name": "FlexListProps"
				}
			]
		},
		{
			"id": 934,
			"name": "FlyoutCaptionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 936,
					"name": "highlighted",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 935,
					"name": "option",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 924,
						"name": "DropdownOption"
					}
				},
				{
					"id": 937,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 938,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 939,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 924,
										"name": "DropdownOption"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						936,
						935
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						937
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 43,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 962,
			"name": "FlyoutItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 966,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 967,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 964,
					"name": "container",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLElement"
					}
				},
				{
					"id": 963,
					"name": "option",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 928,
						"name": "FlyoutOption"
					}
				},
				{
					"id": 965,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Placement"
							}
						]
					}
				},
				{
					"id": 968,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						966,
						967,
						964,
						963,
						965,
						968
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 115,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 940,
			"name": "FlyoutListProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 946,
					"name": "container",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLElement"
					}
				},
				{
					"id": 941,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 928,
							"name": "FlyoutOption"
						}
					}
				},
				{
					"id": 943,
					"name": "overlayRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 945,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 54,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 944,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Placement"
							}
						]
					}
				},
				{
					"id": 942,
					"name": "targetRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						946,
						941,
						943,
						945,
						944,
						942
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 49,
					"character": 17
				}
			]
		},
		{
			"id": 928,
			"name": "FlyoutOption",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 932,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 928,
							"name": "FlyoutOption"
						}
					}
				},
				{
					"id": 929,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 931,
					"name": "origin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 924,
						"name": "DropdownOption"
					}
				},
				{
					"id": 930,
					"name": "parentId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						932,
						929,
						931,
						930
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 34,
					"character": 17
				}
			]
		},
		{
			"id": 659,
			"name": "FoldedAvatarStackProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 665,
					"name": "isViewAllNeeded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 66,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 660,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 645,
							"name": "AvatarStackItem"
						}
					}
				},
				{
					"id": 664,
					"name": "restCountLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 65,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 663,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 64,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 654,
						"name": "AvatarStackSize"
					}
				},
				{
					"id": 661,
					"name": "onClickViewAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 662,
							"name": "onClickViewAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						665,
						660,
						664,
						663
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						661
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 61,
					"character": 17
				}
			]
		},
		{
			"id": 1187,
			"name": "FontProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1192,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 1193,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 1188,
					"name": "fontStyle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the font-style.",
						"tags": [
							{
								"tag": "default",
								"text": "'none'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Font/Font.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1184,
						"name": "FontStyle"
					}
				},
				{
					"id": 1189,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the font-size.",
						"tags": [
							{
								"tag": "default",
								"text": "'sm'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Font/Font.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1183,
						"name": "FontSize"
					}
				},
				{
					"id": 1194,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 1190,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the font-color.",
						"tags": [
							{
								"tag": "default",
								"text": "'primary'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Font/Font.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1185,
						"name": "FontVariant"
					}
				},
				{
					"id": 1191,
					"name": "weight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the font-weight.",
						"tags": [
							{
								"tag": "default",
								"text": "'regular'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Font/Font.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1186,
						"name": "FontWeight"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1192,
						1193,
						1188,
						1189,
						1194,
						1190,
						1191
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Font/Font.types.ts",
					"line": 18,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2647,
			"name": "FooterProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2661,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignContent"
					}
				},
				{
					"id": 2662,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignItems"
					}
				},
				{
					"id": 2663,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignSelf"
					}
				},
				{
					"id": 2658,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 2659,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 2648,
					"name": "display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.display"
					}
				},
				{
					"id": 2649,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `flex` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flex"
					}
				},
				{
					"id": 2650,
					"name": "flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `basis` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexBasis"
					}
				},
				{
					"id": 2651,
					"name": "flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `direction` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexDirection"
					}
				},
				{
					"id": 2652,
					"name": "flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `grow` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 149,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexGrow"
					}
				},
				{
					"id": 2653,
					"name": "flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `shrink` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexShrink"
					}
				},
				{
					"id": 2654,
					"name": "flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `wrap` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexWrap"
					}
				},
				{
					"id": 2664,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.justifyContent"
					}
				},
				{
					"id": 2665,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.margin"
					}
				},
				{
					"id": 2666,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginBottom"
					}
				},
				{
					"id": 2667,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginLeft"
					}
				},
				{
					"id": 2668,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginRight"
					}
				},
				{
					"id": 2669,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginTop"
					}
				},
				{
					"id": 2655,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `order` property on a flexbox child"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 164,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.order"
					}
				},
				{
					"id": 2670,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.padding"
					}
				},
				{
					"id": 2671,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingBottom"
					}
				},
				{
					"id": 2672,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingLeft"
					}
				},
				{
					"id": 2673,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingRight"
					}
				},
				{
					"id": 2674,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingTop"
					}
				},
				{
					"id": 2660,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.style"
					}
				},
				{
					"id": 2656,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2657,
					"name": "textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.textAlign"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2661,
						2662,
						2663,
						2658,
						2659,
						2648,
						2649,
						2650,
						2651,
						2652,
						2653,
						2654,
						2664,
						2665,
						2666,
						2667,
						2668,
						2669,
						2655,
						2670,
						2671,
						2672,
						2673,
						2674,
						2660,
						2656,
						2657
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 94,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3621,
							"name": "BoxProps"
						},
						{
							"type": "literal",
							"value": "as"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1199,
			"name": "FormContextAPI",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1200,
					"name": "different",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1201,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1202,
					"name": "enableReinitialize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1207,
					"name": "validationSchema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A <a href=\"https://github.com/jquense/yup\">Yup</a> object schema to\nvalidate all values.\n<CodeBlock>\n {`Yup.object().shape({\n   input_name: Yup.mixed().required()\n })`}\n</CodeBlock>\nThis is a great way to get error messages into the component. In\naddition, if using Yup for required, those fields will automatically\nget the required asterisk and highlight error."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1208,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Toggle between modern and traditional form styles. Leave blank for the\nmodern label-above layout."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "Layout"
					}
				},
				{
					"id": 1209,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Determines show or edit state of form.",
						"tags": [
							{
								"tag": "default",
								"text": "'create'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					}
				},
				{
					"id": 1203,
					"name": "setFieldDifferent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1204,
							"name": "setFieldDifferent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1205,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1206,
									"name": "different",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1200,
						1201,
						1202,
						1207,
						1208,
						1209
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1203
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 29,
					"character": 17
				}
			]
		},
		{
			"id": 1319,
			"name": "FormErrorBannerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1320,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 260,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1321,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 261,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1320,
						1321
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 259,
					"character": 17
				}
			]
		},
		{
			"id": 1228,
			"name": "FormProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1229,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"name": "Partial.children"
					}
				},
				{
					"id": 1231,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disable all fields at once.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1230,
					"name": "enableConfirmNavigation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable a browser confirmation about losing of unsaved data when the\nform values are visually different from the initial values. Uses{' '}\n<Code>window.onbeforeunload</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 97,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1232,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Toggle between modern and traditional form styles. Leave blank for the modern label-above layout."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 109,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "Layout"
					}
				},
				{
					"id": 1233,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of form.",
						"tags": [
							{
								"tag": "default",
								"text": "'create'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 115,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1229,
						1231,
						1230,
						1232,
						1233
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 89,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1234,
					"name": "Values",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 1234,
									"name": "Values"
								}
							],
							"name": "FormikConfig"
						}
					],
					"name": "Partial"
				}
			]
		},
		{
			"id": 1111,
			"name": "GridProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1119,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "React nodes to be displayed next to the search bar"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 1122,
					"name": "emptyState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>{`{ text: string, image: string }`}</Code> props for{' '}\n<Code>EmptyState</Code> component shown when there are no items in\ngrid"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 65,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1123,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1125,
									"name": "image",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
											"line": 67,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1124,
									"name": "text",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
											"line": 66,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1125,
										1124
									]
								}
							]
						}
					}
				},
				{
					"id": 1134,
					"name": "getGroupId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function called returning group ID of a given grid item that is used\nto sort items by group. Returns <Code>item.groupId</Code>\nby default."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 119,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1107,
						"name": "GetGroupId"
					}
				},
				{
					"id": 1130,
					"name": "getId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function called returning ID of a given grid item that is used to\nidentify the item. Returns <Code>item.id</Code> by default."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1091,
						"name": "GetId"
					}
				},
				{
					"id": 1133,
					"name": "getThumbnailLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function called returning label of a given grid item that is used to\ndisplay the item's thumbnail label. Returns <Code>item.label</Code>\nby default."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 112,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1103,
						"name": "GetThumbnailLabel"
					}
				},
				{
					"id": 1132,
					"name": "getThumbnailName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function called returning name of a given grid item that is used to\ndisplay the item's thumbnail name. Returns <Code>item.name</Code> by\ndefault."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1095,
						"name": "GetThumnbnailName"
					}
				},
				{
					"id": 1131,
					"name": "getThumbnailSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A function called returning thumbnail URL of a given grid item that is\nused to display the item's thumbnail image. Returns{' '}\n<Code>item.src</Code>\nby default."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1099,
						"name": "GetThumbnailSource"
					}
				},
				{
					"id": 1121,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>{`{ id: string | number, title: string }[]`}</Code> object\nrepresenting file groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "ThumbnailGridGroup"
						}
					}
				},
				{
					"id": 1113,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "String icon variant is deprecated, use the React components directly from the `@procore/core-icons/dist` package\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 1127,
					"name": "isLoading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show/Hide loading indicator of the content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1126,
					"name": "isLoadingMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show/Hide loading indicator at the list bottom"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1120,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "An array of arbitrarily-shaped objects representing grid items.{' '}\n<Code>getId</Code> <Code>getName</Code> and <Code>getThumbnail</Code>{' '}\nshould be used to bind the target shape to a view."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "object"
						}
					}
				},
				{
					"id": 1135,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 120,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				},
				{
					"id": 1115,
					"name": "searchQuery",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Allows controlling the search input value. Can be used with\n<Code>onSearch</Code> to customize the default string-based search"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1112,
					"name": "sourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1114,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1128,
					"name": "onScrollBottom",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1129,
							"name": "onScrollBottom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1116,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1117,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Allows customizing the default string-based search by passing a\ndifferent set of <Code>items</Code> every time\n<Code>onSearch</Code> is called with query string as a single\nparameter"
							},
							"parameters": [
								{
									"id": 1118,
									"name": "q",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1119,
						1122,
						1134,
						1130,
						1133,
						1132,
						1131,
						1121,
						1113,
						1127,
						1126,
						1120,
						1135,
						1115,
						1112,
						1114
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1128,
						1116
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 20,
					"character": 17
				}
			]
		},
		{
			"id": 383,
			"name": "GroupProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 386,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 387,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 384,
					"name": "colSpan",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Number of columns in table"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 65,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 385,
					"name": "depth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines indentation of the group and content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 388,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						386,
						387,
						384,
						385,
						388
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 61,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2534,
			"name": "GroupSelectConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2537,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 93,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2536,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 92,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2535,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 91,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2544,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 96,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2545,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2546,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 2538,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 94,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2539,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2540,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 2541,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 95,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2542,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2543,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 2547,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 97,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2548,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2549,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2550,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2551,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2552,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2450,
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2537,
						2536,
						2535
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2544,
						2538,
						2541,
						2547,
						2550
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 90,
					"character": 17
				}
			]
		},
		{
			"id": 2454,
			"name": "GroupSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2497,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2498,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2499,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.afterHide"
					}
				},
				{
					"id": 2501,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2502,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2503,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.afterShow"
					}
				},
				{
					"id": 2504,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.beforeHide"
					}
				},
				{
					"id": 2505,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.beforeShow"
					}
				},
				{
					"id": 2490,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.block"
					}
				},
				{
					"id": 2489,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.className"
					}
				},
				{
					"id": 2495,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.disabled"
					}
				},
				{
					"id": 2512,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.emptyMessage"
					}
				},
				{
					"id": 2496,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 148,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.error"
					}
				},
				{
					"id": 2457,
					"name": "groups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available collections, field options contain option id's\n`{ id: number label: string options: Option[] groupId?: string | number }`\n`arrayOf: [object]`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2511,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.loading"
					}
				},
				{
					"id": 2493,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.onBlur"
					}
				},
				{
					"id": 2492,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.onFocus"
					}
				},
				{
					"id": 2507,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2508,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2509,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2510,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.onScrollBottom"
					}
				},
				{
					"id": 2506,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.optgroups"
					}
				},
				{
					"id": 2456,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available options\n`{ id: number label: string groupId?: string | number }`\n`arrayOf: [object]`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2491,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.placeholder"
					}
				},
				{
					"id": 2500,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.placement"
					}
				},
				{
					"id": 2494,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.qa"
					}
				},
				{
					"id": 2488,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.tabIndex"
					}
				},
				{
					"id": 2455,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 2468,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2469,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups for keying and optimizations\n`(option: T) => Option[]`"
							},
							"parameters": [
								{
									"id": 2470,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					]
				},
				{
					"id": 2462,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2463,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2464,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 2465,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2466,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in options to generate the token label, also used for default searching.\n`(option: T) => string`"
							},
							"parameters": [
								{
									"id": 2467,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 2471,
					"name": "getOptGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2472,
							"name": "getOptGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in groups and options to define relation in optgroups\n`(option: OptionItem) => number | string`"
							},
							"parameters": [
								{
									"id": 2473,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 2481,
					"name": "groupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2482,
							"name": "groupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each group option\n`(groupOption: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2483,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2484,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 2513,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2514,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2515,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedMultiSelectProps.isOptionDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.isOptionDisabled"
					}
				},
				{
					"id": 2458,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2459,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback with options selected when selecting or removing an option\n`(value: T[]) => void`"
							},
							"parameters": [
								{
									"id": 2460,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2461,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2474,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2475,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2476,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2450,
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "PickedMultiSelectProps.onSearch"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "PickedMultiSelectProps.onSearch"
					}
				},
				{
					"id": 2485,
					"name": "optGroupRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2486,
							"name": "optGroupRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in `optgroups`\n`(group: GroupItem) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2487,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 2477,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2478,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each option\n`(option: T, props: OptionRendererProps) => React.ReactNode`"
							},
							"parameters": [
								{
									"id": 2479,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2480,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2519,
										"name": "OptionRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 2516,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2517,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 2518,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedMultiSelectProps.tokenRenderer"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedMultiSelectProps.tokenRenderer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2497,
						2501,
						2504,
						2505,
						2490,
						2489,
						2495,
						2512,
						2496,
						2457,
						2511,
						2493,
						2492,
						2507,
						2506,
						2456,
						2491,
						2500,
						2494,
						2488,
						2455
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2468,
						2462,
						2465,
						2471,
						2481,
						2513,
						2458,
						2474,
						2485,
						2477,
						2516
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 23,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 2453,
					"name": "PickedMultiSelectProps"
				}
			]
		},
		{
			"id": 389,
			"name": "GroupTitleProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 390,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 391,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 392,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						390,
						391,
						392
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 73,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1702,
			"name": "GroupedOptionsConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1713,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 423,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1723,
							"name": "GroupItem"
						}
					}
				},
				{
					"id": 1721,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 256,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1722,
							"name": "OptionItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "OptionList.options"
					}
				},
				{
					"id": 1714,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 424,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1722,
						"name": "OptionItem"
					}
				},
				{
					"id": 1703,
					"name": "comparator",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 409,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1704,
							"name": "comparator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1705,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1706,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1707,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 410,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1708,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1709,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1722,
										"name": "OptionItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				},
				{
					"id": 1715,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 242,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1716,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1717,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "OptionList.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "OptionList.getId"
					}
				},
				{
					"id": 1718,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 255,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1719,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1720,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1318,
										"name": "OptionShape"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "OptionList.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "OptionList.getLabel"
					}
				},
				{
					"id": 1710,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 422,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1711,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n The id of group{' '}\n <Code>{'(group: GroupItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(group) => group.id'}</Code>\n</div>"
							},
							"parameters": [
								{
									"id": 1712,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1723,
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1713,
						1721,
						1714
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1703,
						1707,
						1715,
						1718,
						1710
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 407,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1722,
					"name": "OptionItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1723,
					"name": "GroupItem",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 1309,
					"typeArguments": [
						{
							"type": "reference",
							"id": 1722,
							"name": "OptionItem"
						}
					],
					"name": "OptionList"
				}
			]
		},
		{
			"id": 393,
			"name": "HeaderCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 397,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 398,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 395,
					"name": "snugfit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shrink the cell around the contents",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 394,
					"name": "sortable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is this the column sortable"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 399,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 396,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Allows for setting ascending or descending sorting icon",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 91,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TableCellVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						397,
						398,
						395,
						394,
						399,
						396
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 75,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2639,
			"name": "HeaderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2641,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2642,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2643,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2640,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2641,
						2642,
						2643,
						2640
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 85,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3240,
			"name": "HeroMediaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3243,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3244,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3242,
					"name": "onOverlayClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "MouseEventHandler"
					}
				},
				{
					"id": 3241,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3245,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3243,
						3244,
						3242,
						3241,
						3245
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3236,
			"name": "HeroTextProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3237,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3238,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3239,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3237,
						3238,
						3239
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 406,
			"name": "IconCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 407,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 408,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 409,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						407,
						408,
						409
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 98,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3512,
			"name": "IconContainerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3528,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3636,
						"name": "BoxProps.alignContent"
					}
				},
				{
					"id": 3529,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3637,
						"name": "BoxProps.alignItems"
					}
				},
				{
					"id": 3530,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3638,
						"name": "BoxProps.alignSelf"
					}
				},
				{
					"id": 3514,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Render semantic HTML tags with browser reset and normalize CSS"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 128,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "li"
							},
							{
								"type": "literal",
								"value": "ol"
							},
							{
								"type": "literal",
								"value": "ul"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3622,
						"name": "BoxProps.as"
					}
				},
				{
					"id": 3525,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3633,
						"name": "BoxProps.children"
					}
				},
				{
					"id": 3526,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3634,
						"name": "BoxProps.className"
					}
				},
				{
					"id": 3515,
					"name": "display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3623,
						"name": "BoxProps.display"
					}
				},
				{
					"id": 3516,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `flex` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3624,
						"name": "BoxProps.flex"
					}
				},
				{
					"id": 3517,
					"name": "flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `basis` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3625,
						"name": "BoxProps.flexBasis"
					}
				},
				{
					"id": 3518,
					"name": "flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `direction` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3626,
						"name": "BoxProps.flexDirection"
					}
				},
				{
					"id": 3519,
					"name": "flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `grow` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 149,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3627,
						"name": "BoxProps.flexGrow"
					}
				},
				{
					"id": 3520,
					"name": "flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `shrink` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3628,
						"name": "BoxProps.flexShrink"
					}
				},
				{
					"id": 3521,
					"name": "flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `wrap` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3629,
						"name": "BoxProps.flexWrap"
					}
				},
				{
					"id": 3513,
					"name": "isSelected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 216,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3531,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3639,
						"name": "BoxProps.justifyContent"
					}
				},
				{
					"id": 3532,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3640,
						"name": "BoxProps.margin"
					}
				},
				{
					"id": 3533,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3641,
						"name": "BoxProps.marginBottom"
					}
				},
				{
					"id": 3534,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3642,
						"name": "BoxProps.marginLeft"
					}
				},
				{
					"id": 3535,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3643,
						"name": "BoxProps.marginRight"
					}
				},
				{
					"id": 3536,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3644,
						"name": "BoxProps.marginTop"
					}
				},
				{
					"id": 3522,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `order` property on a flexbox child"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 164,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3630,
						"name": "BoxProps.order"
					}
				},
				{
					"id": 3537,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3645,
						"name": "BoxProps.padding"
					}
				},
				{
					"id": 3538,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3646,
						"name": "BoxProps.paddingBottom"
					}
				},
				{
					"id": 3539,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3647,
						"name": "BoxProps.paddingLeft"
					}
				},
				{
					"id": 3540,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3648,
						"name": "BoxProps.paddingRight"
					}
				},
				{
					"id": 3541,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3649,
						"name": "BoxProps.paddingTop"
					}
				},
				{
					"id": 3527,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3635,
						"name": "BoxProps.style"
					}
				},
				{
					"id": 3523,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3631,
						"name": "BoxProps.tabIndex"
					}
				},
				{
					"id": 3524,
					"name": "textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3632,
						"name": "BoxProps.textAlign"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3528,
						3529,
						3530,
						3514,
						3525,
						3526,
						3515,
						3516,
						3517,
						3518,
						3519,
						3520,
						3521,
						3513,
						3531,
						3532,
						3533,
						3534,
						3535,
						3536,
						3522,
						3537,
						3538,
						3539,
						3540,
						3541,
						3527,
						3523,
						3524
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 215,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3621,
					"name": "BoxProps"
				}
			]
		},
		{
			"id": 2561,
			"name": "IconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2566,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2567,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2562,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2563,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The core-icon to show"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2564,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the icon",
						"tags": [
							{
								"tag": "default",
								"text": "'sm'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2556,
						"name": "IconSize"
					}
				},
				{
					"id": 2568,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2565,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon variant",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "IconVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2566,
						2567,
						2562,
						2563,
						2564,
						2568,
						2565
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
					"line": 13,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 410,
			"name": "InputCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 414,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 411,
					"name": "errorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Message to be displayed below the input during an error"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 412,
					"name": "processing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Triggers the spinner for processing inline editable content",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 413,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the input cell and corresponding error message",
						"tags": [
							{
								"tag": "default",
								"text": "'block'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "InputCellSize"
					}
				},
				{
					"id": 415,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						414,
						411,
						412,
						413,
						415
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 100,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2553,
							"name": "InputProps"
						},
						{
							"type": "literal",
							"value": "size"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2553,
			"name": "InputProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2554,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2555,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2554,
						2555
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Input/Input.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "InputAttributes"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1329,
					"name": "FieldTextComponentProps"
				}
			]
		},
		{
			"id": 3251,
			"name": "InteractableTileProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3254,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3248,
						"name": "TileCommonProps.children"
					}
				},
				{
					"id": 3255,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3249,
						"name": "TileCommonProps.className"
					}
				},
				{
					"id": 3253,
					"name": "orientation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "portrait"
							},
							{
								"type": "literal",
								"value": "landscape"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3247,
						"name": "TileCommonProps.orientation"
					}
				},
				{
					"id": 3256,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3250,
						"name": "TileCommonProps.style"
					}
				},
				{
					"id": 3252,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "interactive"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3254,
						3255,
						3253,
						3256,
						3252
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 14,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3246,
					"name": "TileCommonProps"
				},
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 3159,
			"name": "InternalTieredDropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3165,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the button to be 100% of the width of its parent"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.block"
					}
				},
				{
					"id": 3160,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactText"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 3161,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3168,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.icon"
					}
				},
				{
					"id": 3169,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.iconRight"
					}
				},
				{
					"id": 3167,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shows the button spinner"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.loading"
					}
				},
				{
					"id": 3162,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3170,
							"name": "T"
						}
					}
				},
				{
					"id": 3166,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.size"
					}
				},
				{
					"id": 3163,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3170,
							"name": "T"
						}
					}
				},
				{
					"id": 3164,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 708,
						"name": "ButtonVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3165,
						3160,
						3161,
						3168,
						3169,
						3167,
						3162,
						3166,
						3163,
						3164
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
					"line": 18,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3170,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "Div"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onSelect"
								},
								{
									"type": "literal",
									"value": "onChange"
								}
							]
						}
					],
					"name": "Omit"
				},
				{
					"type": "reference",
					"name": "TriggerProps"
				}
			]
		},
		{
			"id": 2623,
			"name": "ItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2627,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2624,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 2625,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2626,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2627,
						2624,
						2625,
						2626
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 58,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 2628,
					"name": "ItemWithDraggingProps"
				}
			]
		},
		{
			"id": 2628,
			"name": "ItemWithDraggingProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2635,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2627,
						"name": "ItemProps.disabled"
					}
				},
				{
					"id": 2630,
					"name": "draggableId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2631,
					"name": "draggableIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2629,
					"name": "droppableIn",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 66,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 2632,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2624,
						"name": "ItemProps.item"
					}
				},
				{
					"id": 2633,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2625,
						"name": "ItemProps.selected"
					}
				},
				{
					"id": 2634,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2626,
						"name": "ItemProps.suggested"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2635,
						2630,
						2631,
						2629,
						2632,
						2633,
						2634
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 65,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 2623,
					"name": "ItemProps"
				}
			]
		},
		{
			"id": 594,
			"name": "LayoutGridProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 597,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.children"
					}
				},
				{
					"id": 595,
					"name": "fluid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Allow the grid be infinitely wide"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 596,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						597,
						595,
						596
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
					"line": 10,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Props"
				}
			]
		},
		{
			"id": 607,
			"name": "LegacyDetailPageProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 609,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/LegacyDetailPage/LegacyDetailPage.tsx",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.children"
					}
				},
				{
					"id": 610,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/LegacyDetailPage/LegacyDetailPage.tsx",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.className"
					}
				},
				{
					"id": 608,
					"name": "initialIsVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Sets the sidebar to be initially open"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/LegacyDetailPage/LegacyDetailPage.tsx",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 611,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/LegacyDetailPage/LegacyDetailPage.tsx",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						609,
						610,
						608,
						611
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/LegacyDetailPage/LegacyDetailPage.tsx",
					"line": 17,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Props"
				}
			]
		},
		{
			"id": 3290,
			"name": "LegacyIconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "TODO - This is one of the last places using the old Icon component and\nshould be refactored with the designers"
			},
			"children": [
				{
					"id": 3292,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 3293,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 3297,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.clickable"
					}
				},
				{
					"id": 3291,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The token icon"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Token/Token.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 3296,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the icon",
						"tags": [
							{
								"tag": "default",
								"text": "'sm'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2556,
						"name": "IconSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.size"
					}
				},
				{
					"id": 3294,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.style"
					}
				},
				{
					"id": 3295,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon variant",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "IconVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3292,
						3293,
						3297,
						3291,
						3296,
						3294,
						3295
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Token/Token.types.ts",
					"line": 34,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2561,
							"name": "IconProps"
						},
						{
							"type": "literal",
							"value": "icon"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 3321,
			"name": "LevelWise",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3322,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3322
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 20,
					"character": 17
				}
			]
		},
		{
			"id": 718,
			"name": "LinkButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 719,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the button to be 100% of the width of its parent"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.block"
					}
				},
				{
					"id": 722,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.icon"
					}
				},
				{
					"id": 723,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.iconRight"
					}
				},
				{
					"id": 721,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.size"
					}
				},
				{
					"id": 720,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "All variants except for primary, secondary, tertiary are DEPRECATED.\nAll will still be accepted, but deprecated ones will look like secondary"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						719,
						722,
						723,
						721,
						720
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 50,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AnchorAttributes"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 711,
							"name": "ButtonProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "block"
								},
								{
									"type": "literal",
									"value": "disabled"
								},
								{
									"type": "literal",
									"value": "icon"
								},
								{
									"type": "literal",
									"value": "iconRight"
								},
								{
									"type": "literal",
									"value": "size"
								},
								{
									"type": "literal",
									"value": "variant"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 488,
			"name": "LinkCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 490,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 491,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 489,
					"name": "href",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Destination url",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 492,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						490,
						491,
						489,
						492
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 119,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2569,
			"name": "LinkProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2571,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2572,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2573,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2570,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The color variant of the link"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Link/Link.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "LinkVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2571,
						2572,
						2573,
						2570
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Link/Link.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"name": "AnchorAttributes"
				}
			]
		},
		{
			"id": 3257,
			"name": "LinkTileProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3260,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3248,
						"name": "TileCommonProps.children"
					}
				},
				{
					"id": 3261,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3249,
						"name": "TileCommonProps.className"
					}
				},
				{
					"id": 3259,
					"name": "orientation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "portrait"
							},
							{
								"type": "literal",
								"value": "landscape"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3247,
						"name": "TileCommonProps.orientation"
					}
				},
				{
					"id": 3262,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3250,
						"name": "TileCommonProps.style"
					}
				},
				{
					"id": 3258,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "link"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3260,
						3261,
						3259,
						3262,
						3258
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 18,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3246,
					"name": "TileCommonProps"
				},
				{
					"type": "reference",
					"name": "AnchorAttributes"
				}
			]
		},
		{
			"id": 3808,
			"name": "ListPageControlProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3809,
					"name": "alignRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls whether the contents will align to the right"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3810,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls whether the contents will attmpt to span the full width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3813,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3814,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3811,
					"name": "search",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets width to a specific size for Search to fit"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3815,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3812,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "please use the equivalent boolean prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3803,
						"name": "ControlVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3809,
						3810,
						3813,
						3814,
						3811,
						3815,
						3812
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
					"line": 7,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 175,
			"name": "LocalSourceProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 181,
					"name": "accept",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set accepted file types. Accepts everything if left undefined"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 201,
					"name": "maxFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 202,
					"name": "minFileSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Minimum file size (in bytes)"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 177,
					"name": "onCancel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 178,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 179,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback function fired when a previously selected file is removed.\n<br />\n<br />\n<Code>(item: ThumbnailListItem) => void</Code>"
									},
									"parameters": [
										{
											"id": 180,
											"name": "item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ThumbnailListItem"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 206,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1041,
						"name": "QaTags"
					}
				},
				{
					"id": 176,
					"name": "sourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 200,
					"name": "uploadFile",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>\n (file: File,{' '}\n {`{\n   onProgress: (progress: number) => void\n   onSuccess: (response: unknown) => void\n   onError: (error: unknown) => void\n }`}\n ) => string\n</Code>\n<br />\n<br />A function for manually controlling the network request for file\nupload. An alternative to using <Code>getEndpoint</Code> which handles\nthe network request itself."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 140,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "UploadFile"
					}
				},
				{
					"id": 191,
					"name": "beforeLocalFileUpload",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 192,
							"name": "beforeLocalFileUpload",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Optional async function that is invoked when selecting or dropping in a\nlocal file. If you want to restrict certain uploads, you can use this\ncallback. Returning true continues the upload, while false will prevent\nupload.\n<Code>{'(files: ThumbnailListItem[]) => Promise<boolean>'}</Code>"
							},
							"parameters": [
								{
									"id": 193,
									"name": "files",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ThumbnailListItem"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 203,
					"name": "dropzoneContentRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "dropzoneContentRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An optional content renderer for the dropzone. Accepts{' '}\n<Code>{'{ open, disabled, errorMessage }'}</Code> as a single argument,\nallowing to control the dropzone and display different content depending\non dropzone state"
							},
							"parameters": [
								{
									"id": 205,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1000,
										"name": "DropzoneContentProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 182,
					"name": "getEndpoint",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "getEndpoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<Code>(file: File) => string</Code>\n<br />\n<br />A function returning an upload URL for a given file. An\nalternative to <Code>uploadFile</Code> which allows manual control of\nthe network request for file upload."
							},
							"parameters": [
								{
									"id": 184,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 197,
					"name": "getHeaders",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "getHeaders",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<Code>(file: File) => object</Code>\n<br />\n<br />A function returning an upload request headers. Returns empty\nobject by default."
							},
							"parameters": [
								{
									"id": 199,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						}
					]
				},
				{
					"id": 185,
					"name": "getMethod",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 89,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 186,
							"name": "getMethod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<Code>(file: File) => HTTPRequestMethod</Code>\n<br />\n<br />A function returning an upload HTTP method for a given file.\nReturns <Code>POST</Code> by default."
							},
							"parameters": [
								{
									"id": 187,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Method"
							}
						}
					]
				},
				{
					"id": 188,
					"name": "getPayload",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 189,
							"name": "getPayload",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<Code>(file: File) => FormData</Code>\n<br />\n<br />A function returning an upload payload <Code>FormData</Code>{' '}\nobject for a given file. When defined, <Code>getPayloadKey</Code> is\nignored."
							},
							"parameters": [
								{
									"id": 190,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FormData"
							}
						}
					]
				},
				{
					"id": 194,
					"name": "getPayloadKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
							"line": 115,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 195,
							"name": "getPayloadKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<Code>(file: File) => string</Code>\n<br />\n<br />A function returning an upload payload <Code>FormData</Code> key\nfor a given file. Returns <Code>file</Code> by default."
							},
							"parameters": [
								{
									"id": 196,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "File"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						181,
						201,
						202,
						177,
						206,
						176,
						200
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						191,
						203,
						182,
						197,
						185,
						188,
						194
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/LocalSource/LocalSource.types.ts",
					"line": 58,
					"character": 17
				}
			]
		},
		{
			"id": 3598,
			"name": "MarginOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3599,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3600,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3601,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3602,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				},
				{
					"id": 3603,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3599,
						3600,
						3601,
						3602,
						3603
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 66,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3621,
					"name": "BoxProps"
				},
				{
					"type": "reference",
					"id": 3736,
					"name": "FlexProps"
				}
			]
		},
		{
			"id": 2680,
			"name": "MenuContext",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2681,
					"name": "currentlyDroppableIn",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 97,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 2682,
					"name": "onHoverItem",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2683,
							"name": "onHoverItem",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2684,
									"name": "el",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "HTMLDivElement"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2685,
					"name": "onScrollBottom",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2686,
							"name": "onScrollBottom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2687,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											},
											{
												"type": "reference",
												"name": "UIEvent"
											}
										],
										"name": "UIEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2688,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2689,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2690,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2579,
										"name": "Selection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2681
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2682,
						2685,
						2688
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 96,
					"character": 17
				}
			]
		},
		{
			"id": 262,
			"name": "MenuFooterProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 276,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignContent"
					}
				},
				{
					"id": 277,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignItems"
					}
				},
				{
					"id": 278,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignSelf"
					}
				},
				{
					"id": 273,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 274,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 263,
					"name": "display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.display"
					}
				},
				{
					"id": 264,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `flex` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flex"
					}
				},
				{
					"id": 265,
					"name": "flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `basis` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexBasis"
					}
				},
				{
					"id": 266,
					"name": "flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `direction` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexDirection"
					}
				},
				{
					"id": 267,
					"name": "flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `grow` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 149,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexGrow"
					}
				},
				{
					"id": 268,
					"name": "flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `shrink` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexShrink"
					}
				},
				{
					"id": 269,
					"name": "flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `wrap` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexWrap"
					}
				},
				{
					"id": 279,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.justifyContent"
					}
				},
				{
					"id": 280,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.margin"
					}
				},
				{
					"id": 281,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginBottom"
					}
				},
				{
					"id": 282,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginLeft"
					}
				},
				{
					"id": 283,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginRight"
					}
				},
				{
					"id": 284,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginTop"
					}
				},
				{
					"id": 270,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `order` property on a flexbox child"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 164,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.order"
					}
				},
				{
					"id": 285,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.padding"
					}
				},
				{
					"id": 286,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingBottom"
					}
				},
				{
					"id": 287,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingLeft"
					}
				},
				{
					"id": 288,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingRight"
					}
				},
				{
					"id": 289,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingTop"
					}
				},
				{
					"id": 275,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.style"
					}
				},
				{
					"id": 271,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 272,
					"name": "textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.textAlign"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						276,
						277,
						278,
						273,
						274,
						263,
						264,
						265,
						266,
						267,
						268,
						269,
						279,
						280,
						281,
						282,
						283,
						284,
						270,
						285,
						286,
						287,
						288,
						289,
						275,
						271,
						272
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 78,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3621,
							"name": "BoxProps"
						},
						{
							"type": "literal",
							"value": "as"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 241,
			"name": "MenuGroupProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 242,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 243,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Can the group item be clicked"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 244,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Value which can be passed around various callback functions. Can be anything!"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						242,
						243,
						244
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 41,
					"character": 17
				}
			]
		},
		{
			"id": 257,
			"name": "MenuHeaderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 259,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 260,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 261,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 258,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						259,
						260,
						261,
						258
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 74,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 245,
			"name": "MenuItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 246,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"name": "NavigationProps.children"
					}
				},
				{
					"id": 247,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "NavigationProps.className"
					}
				},
				{
					"id": 254,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.index"
					}
				},
				{
					"id": 248,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Value which can be passed around various callback functions. Can be anything!"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 255,
					"name": "ref",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Ref"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.ref"
					}
				},
				{
					"id": 252,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the item selected",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 256,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.style"
					}
				},
				{
					"id": 253,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 249,
					"name": "onClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "onClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 251,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						246,
						247,
						254,
						248,
						255,
						252,
						256,
						253
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						249
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 25,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "NavigationProps"
				}
			]
		},
		{
			"id": 236,
			"name": "MenuOptionsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 237,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 56,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 238,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 239,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 240,
					"name": "scrollable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						237,
						238,
						239,
						240
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 55,
					"character": 17
				}
			]
		},
		{
			"id": 207,
			"name": "MenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 217,
					"name": "UNSAFE_closesOnSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 151,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 218,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 219,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 208,
					"name": "isSelectable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<CodeBlock>\n (element: any, index?: number, list?: any[]) => boolean\n</CodeBlock>",
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `isSelectable` prop has been deprecated and will be removed in a future version.\nMenu item selection is now handled internally and there is no need to configure this\nanymore.\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ElementTypeChecker"
					}
				},
				{
					"id": 209,
					"name": "keyHandlerRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Ref object which will get the key handler listeners"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 221,
					"name": "scrollable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.scrollable"
					}
				},
				{
					"id": 220,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 216,
					"name": "usingHook",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 148,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "MenuHook"
					}
				},
				{
					"id": 210,
					"name": "onScrollBottom",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 130,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 211,
							"name": "onScrollBottom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 212,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 213,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 214,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Callback for selecting an item from the menu</div>\n<CodeBlock>\n{\n  '({ event: ReactEvent, item: Menu.Item.props.item, group: bool }) => void'\n}\n</CodeBlock>\n<div>\n <Code>item</Code> will be the <Code>item</Code> prop supplied to the{' '}\n <Code>Item</Code> component\n <br />\n <Code>group</Code> will be <Code>true</Code> if the clicked item was\n a group label\n</div>"
							},
							"parameters": [
								{
									"id": 215,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Selection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						217,
						218,
						219,
						208,
						209,
						221,
						220,
						216
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						210,
						213
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 110,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 236,
							"name": "OptionsProps"
						},
						{
							"type": "literal",
							"value": "padding"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2594,
			"name": "MenuRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2595,
					"name": "el",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						]
					}
				},
				{
					"id": 2596,
					"name": "highlight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 43,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2597,
							"name": "highlight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2598,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 2599,
									"name": "shouldScroll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2600,
					"name": "highlightFirst",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2601,
							"name": "highlightFirst",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2602,
									"name": "shouldScroll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2603,
					"name": "highlightLast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2604,
							"name": "highlightLast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2605,
									"name": "shouldScroll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2606,
					"name": "highlightSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2607,
							"name": "highlightSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2608,
									"name": "shouldScroll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2609,
					"name": "highlightSuggested",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2610,
							"name": "highlightSuggested",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2611,
									"name": "shouldScroll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2612,
					"name": "highlighted",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 48,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2613,
							"name": "highlighted",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 2614,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2615,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2616,
									"name": "circular",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2617,
					"name": "prev",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2618,
							"name": "prev",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2619,
									"name": "circular",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2620,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2621,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2622,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLElement"
													}
												],
												"name": "KeyboardEvent"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2595
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2596,
						2600,
						2603,
						2606,
						2609,
						2612,
						2614,
						2617,
						2620
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 41,
					"character": 17
				}
			]
		},
		{
			"id": 222,
			"name": "MenuSearchProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 224,
					"name": "autoFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3026,
						"name": "SearchProps.autoFocus"
					}
				},
				{
					"id": 227,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3029,
						"name": "SearchProps.error"
					}
				},
				{
					"id": 223,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the menu search's configurable strings. Defaults to\nusing the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 229,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3031,
						"name": "SearchProps.initialValue"
					}
				},
				{
					"id": 235,
					"name": "typeahead",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `typeahead` prop has been deprecated and will be removed in a future version.\n\nA new component, `Typeahead`, has been introduced with specific UX for typeahead-like\nbehavior. Please use this component instead.\n\n**Before**\n\n<Search typeahead onChange={() => { ... }} />\n\n**After**\n\n<Typeahead onChange={() => { ... }} />\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							},
							{
								"tag": "see",
								"text": "https://core.procore.com/latest/web/components/typeahead/react/\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3037,
						"name": "SearchProps.typeahead"
					}
				},
				{
					"id": 225,
					"name": "usingHook",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3006,
						"name": "SearchHook"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3027,
						"name": "SearchProps.usingHook"
					}
				},
				{
					"id": 226,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial value string",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3028,
						"name": "SearchProps.value"
					}
				},
				{
					"id": 228,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3030,
						"name": "SearchProps.variant"
					}
				},
				{
					"id": 230,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 231,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3033,
								"name": "SearchProps.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3032,
						"name": "SearchProps.onClear"
					}
				},
				{
					"id": 232,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 233,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Input handler for search variant</div>\n<CodeBlock>(value: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 234,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3035,
								"name": "SearchProps.onSubmit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3034,
						"name": "SearchProps.onSubmit"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						224,
						227,
						223,
						229,
						235,
						225,
						226,
						228
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						230,
						232
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
					"line": 66,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3025,
					"name": "SearchProps"
				},
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2733,
			"name": "ModalBodyProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2734,
					"name": "noSideSpacing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Removes left, right paddings from the modal body when true",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 54,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2734
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 49,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 2723,
			"name": "ModalCloseableHeaderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2730,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2731,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2727,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2728,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2729,
									"name": "closeButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
											"line": 46,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2729
									]
								}
							]
						}
					}
				},
				{
					"id": 2732,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2724,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2725,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2726,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2730,
						2731,
						2727,
						2732
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2724
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 44,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2703,
			"name": "ModalContainerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2706,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2707,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2704,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2691,
						"name": "ModalPlacement"
					}
				},
				{
					"id": 2708,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2705,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2692,
						"name": "ModalWidth"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2706,
						2707,
						2704,
						2708,
						2705
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 27,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2693,
			"name": "ModalProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2700,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2701,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2697,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Modal open state",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2698,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Vertical placement of the modal",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "center\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2691,
						"name": "ModalPlacement"
					}
				},
				{
					"id": 2702,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2699,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets a width on the container and uses next centering. Future will default to `md`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2692,
						"name": "ModalWidth"
					}
				},
				{
					"id": 2694,
					"name": "onClickOverlay",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2695,
							"name": "onClickOverlay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for clicking the overlay"
							},
							"parameters": [
								{
									"id": 2696,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2700,
						2701,
						2697,
						2698,
						2702,
						2699
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2694
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 6,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 2709,
					"name": "ConfirmModalProps"
				}
			]
		},
		{
			"id": 295,
			"name": "MultiSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 296,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 297,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 298,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 299,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 300,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 301,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 302,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 303,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 326,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 327,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 328,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 145,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 332,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 333,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 148,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 304,
					"name": "getGroup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 109,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 305,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 306,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for each entry in <Code>options</Code> to define relation to\ngroup in <Code>groups</Code>\n<CodeBlock>{'(option: OptionItem) => React.ReactNode'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 307,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 308,
					"name": "getId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 309,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 310,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for each entry in <Code>options</Code> for keying and\noptimizations\n<CodeBlock>{'(option: OptionItem) => number | string'}</CodeBlock>*"
									},
									"parameters": [
										{
											"id": 311,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 312,
					"name": "getLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 313,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 314,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for each entry in <Code>options</Code> to generate the token\nlabel.\n<CodeBlock>{'(option: OptionItem) => string'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 315,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					}
				},
				{
					"id": 337,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 338,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					}
				},
				{
					"id": 343,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 158,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "FocusEventHandler"
					}
				},
				{
					"id": 322,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 323,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 324,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 325,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 316,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 317,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 318,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Callback for when a user types into the multiselect input\n<CodeBlock>{'(event: KeyboardEvent) => void'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 319,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 320,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "GroupItem"
						}
					}
				},
				{
					"id": 321,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available options"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 347,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 348,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 161,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					}
				},
				{
					"id": 349,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				},
				{
					"id": 350,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 163,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 354,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of the currently selected values"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 334,
					"name": "groupHeaderRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 335,
							"name": "groupHeaderRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering header for each entry in <Code>groups</Code>\n<CodeBlock>{'(group: GroupItem) => React.ReactNode'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 336,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GroupItem"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 329,
					"name": "isOptionDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 330,
							"name": "isOptionDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 331,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 339,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 157,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 340,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 341,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 342,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Event"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 344,
					"name": "optionRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 345,
							"name": "optionRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 346,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 351,
					"name": "tokenRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
							"line": 170,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "tokenRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering each selected value\n<CodeBlock>\n {'(props: TokenRendererProps) => React.ReactNode'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 353,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TokenRendererProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						296,
						299,
						302,
						303,
						326,
						327,
						328,
						332,
						333,
						304,
						308,
						312,
						337,
						338,
						343,
						322,
						316,
						320,
						321,
						347,
						348,
						349,
						350,
						354
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						334,
						329,
						339,
						344,
						351
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MultiSelect/MultiSelect.types.ts",
					"line": 98,
					"character": 17
				}
			]
		},
		{
			"id": 982,
			"name": "MultipleErrorsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 983,
					"name": "fileRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "FileRejection"
						}
					}
				},
				{
					"id": 984,
					"name": "maxFiles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 985,
					"name": "maxSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 48,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 986,
					"name": "minSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						983,
						984,
						985,
						986
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 45,
					"character": 17
				}
			]
		},
		{
			"id": 25,
			"name": "NavigationProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 39,
					"name": "alignContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3592,
						"name": "FlexAlignContent"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignContent"
					}
				},
				{
					"id": 40,
					"name": "alignItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 84,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignItems"
					}
				},
				{
					"id": 41,
					"name": "alignSelf",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3589,
						"name": "FlexAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.alignSelf"
					}
				},
				{
					"id": 36,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 37,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.className"
					}
				},
				{
					"id": 26,
					"name": "display",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3588,
						"name": "Display"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.display"
					}
				},
				{
					"id": 27,
					"name": "flex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `flex` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flex"
					}
				},
				{
					"id": 28,
					"name": "flexBasis",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `basis` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexBasis"
					}
				},
				{
					"id": 29,
					"name": "flexDirection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `direction` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3590,
						"name": "FlexDirection"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexDirection"
					}
				},
				{
					"id": 30,
					"name": "flexGrow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `grow` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 149,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexGrow"
					}
				},
				{
					"id": 31,
					"name": "flexShrink",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `shrink` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexShrink"
					}
				},
				{
					"id": 32,
					"name": "flexWrap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `wrap` property on a flexbox child."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 159,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3593,
						"name": "FlexWrap"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.flexWrap"
					}
				},
				{
					"id": 42,
					"name": "justifyContent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.justifyContent"
					}
				},
				{
					"id": 43,
					"name": "margin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.margin"
					}
				},
				{
					"id": 44,
					"name": "marginBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginBottom"
					}
				},
				{
					"id": 45,
					"name": "marginLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginLeft"
					}
				},
				{
					"id": 46,
					"name": "marginRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginRight"
					}
				},
				{
					"id": 47,
					"name": "marginTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.marginTop"
					}
				},
				{
					"id": 33,
					"name": "order",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Alias to the `order` property on a flexbox child"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 164,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.order"
					}
				},
				{
					"id": 48,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.padding"
					}
				},
				{
					"id": 49,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingBottom"
					}
				},
				{
					"id": 50,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingLeft"
					}
				},
				{
					"id": 51,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingRight"
					}
				},
				{
					"id": 52,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.paddingTop"
					}
				},
				{
					"id": 38,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.style"
					}
				},
				{
					"id": 34,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 35,
					"name": "textAlign",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3594,
						"name": "TextAlign"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.textAlign"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						39,
						40,
						41,
						36,
						37,
						26,
						27,
						28,
						29,
						30,
						31,
						32,
						42,
						43,
						44,
						45,
						46,
						47,
						33,
						48,
						49,
						50,
						51,
						52,
						38,
						34,
						35
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 91,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3621,
							"name": "BoxProps"
						},
						{
							"type": "literal",
							"value": "as"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 612,
			"name": "NextDetailPageProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 614,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 615,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 616,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 613,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "Width of the content\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextDetailPage/NextDetailPage.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "DetailPageWidth"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						614,
						615,
						616,
						613
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextDetailPage/NextDetailPage.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3830,
			"name": "NextGridColProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3832,
					"name": "colStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If given a number value between 1 and 12, sets start positions across all breakpoints.\nIf given an object, sets start positions for given breakpoints (keys in configuration object, e.g. {\"tabletMd\": 10, \"mobileLg\": 5})."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 3828,
										"name": "OffsetByBreakpoint"
									}
								],
								"name": "Partial"
							}
						]
					}
				},
				{
					"id": 3831,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "auto\nIf given a number value between 1 and 12, sets column width across all breakpoints.\nIf given an object, sets column widths for given breakpoints (keys in configuration object, e.g. {\"tabletMd\": 10, \"mobileLg\": 5}).\nIf set to \"auto\", the column will take all the available space\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": "auto"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 3826,
										"name": "SpanByBreakpoint"
									}
								],
								"name": "Partial"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3832,
						3831
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 43,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 3820,
			"name": "NextGridContextShape",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3823,
					"name": "colStackCap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					}
				},
				{
					"id": 3821,
					"name": "gutterX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NextGridSpacing"
					}
				},
				{
					"id": 3822,
					"name": "gutterY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NextGridSpacing"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3823,
						3821,
						3822
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 25,
					"character": 17
				}
			]
		},
		{
			"id": 3816,
			"name": "NextGridProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3819,
					"name": "colStackCap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets a breakpoing at which columns will start stacking on top of each other.\nE.g. if set to \"tabletMd\" - columns will stack on \"tabletMd\", \"tabletSm\" and \"mobileLg\" breakpoints."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					}
				},
				{
					"id": 3817,
					"name": "gutterX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If given a spacing string value (e.g. \"sm\" or \"none\"), sets horizontal column spacing across all breakpoints.\nIf given an object, sets horizontal column spacing for given breakpoints (keys in configuration object, e.g. {\"tabletMd\": \"xs\", \"mobileLg\": \"none\"})."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NextGridSpacing"
					}
				},
				{
					"id": 3818,
					"name": "gutterY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If given a spacing string value (e.g. \"sm\" or \"none\"), sets vertical column spacing across all breakpoints.\nVertical spacing is only displayed when the columns are stacked (typically, on smaller breakpoints or as defined by \"colStackCap\").\nIf given an object, sets vertical column spacing for given breakpoints (keys in configuration object, e.g. {\"tabletMd\": \"xs\", \"mobileLg\": \"none\"})."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NextGridSpacing"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3819,
						3817,
						3818
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 6,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 3824,
			"name": "NextGridRowProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 31,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 58,
			"name": "NextPrevProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 61,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 62,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 63,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 59,
					"name": "onClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 82,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 60,
							"name": "onClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						61,
						62,
						63
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						59
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 81,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3314,
			"name": "Node",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3315,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3313,
						"name": "NodeId"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3315
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 11,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3316,
					"name": "DefaultNode"
				}
			]
		},
		{
			"id": 2741,
			"name": "NotationProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2743,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2744,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2745,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2742,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The notation color variant"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Notation/Notation.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NotationVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2743,
						2744,
						2745,
						2742
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Notation/Notation.types.ts",
					"line": 12,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2757,
			"name": "NumberInputProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2758,
					"name": "decimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							},
							{
								"type": "literal",
								"value": 13
							},
							{
								"type": "literal",
								"value": 14
							}
						]
					}
				},
				{
					"id": 2759,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial value of an uncontrolled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					}
				},
				{
					"id": 2770,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 2760,
					"name": "fillDecimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus.",
						"tags": [
							{
								"tag": "default",
								"text": "'none'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2752,
						"name": "FillDecimalScaleVariant"
					}
				},
				{
					"id": 2761,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string with a BCP 47 language tag or an array of such strings which specifies number formatting.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "en-US\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2746,
						"name": "Locale"
					}
				},
				{
					"id": 2765,
					"name": "prefix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a prefix."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.prefix"
					}
				},
				{
					"id": 2769,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 90,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				},
				{
					"id": 2766,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A stepping interval which is used in incrementer. Zero value turns off incrementer.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.step"
					}
				},
				{
					"id": 2767,
					"name": "suffix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string which is added to input as a suffix"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2768,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Value of a controlled component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 89,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2756,
						"name": "InputValue"
					}
				},
				{
					"id": 2762,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2763,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "`(value: ValueChange) => void`, where `ValueChange` is an object `{ value: string, parsedNumber: number | null }`."
							},
							"parameters": [
								{
									"id": 2764,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2753,
										"name": "ValueChange"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2758,
						2759,
						2770,
						2760,
						2761,
						2765,
						2769,
						2766,
						2767,
						2768
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2762
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 27,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2553,
							"name": "InputProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "value"
								},
								{
									"type": "literal",
									"value": "defaultValue"
								},
								{
									"type": "literal",
									"value": "onChange"
								},
								{
									"type": "literal",
									"value": "variant"
								}
							]
						}
					],
					"name": "Omit"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1355,
					"name": "FieldNumberComponentProps"
				},
				{
					"type": "reference",
					"id": 1391,
					"name": "FieldCurrencyComponentProps"
				}
			]
		},
		{
			"id": 3089,
			"name": "OptionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3092,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3090,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3093,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Represents the currently selected value. This option will be styled\ndifferently as well as receive UX to scroll into view and start list\nnavigation from this element."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3094,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If nothing is selected, suggest this option. Suggested options mimic the\nUX of a selected option, scroll into view and start list navigation from\nthis element."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3091,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3092,
						3090,
						3093,
						3094,
						3091
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Select/Select.types.ts",
					"line": 23,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivProps"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 2889,
					"name": "PillOptionProps"
				}
			]
		},
		{
			"id": 2519,
			"name": "OptionRendererProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2525,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.children"
					}
				},
				{
					"id": 2526,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.className"
					}
				},
				{
					"id": 2522,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2523,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.index"
					}
				},
				{
					"id": 2524,
					"name": "ref",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Menu/Menu.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Ref"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.ref"
					}
				},
				{
					"id": 2521,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2527,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "NavigationProps.style"
					}
				},
				{
					"id": 2520,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 2528,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2529,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2530,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Required.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Required.getId"
					}
				},
				{
					"id": 2531,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2532,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for each entry in options to generate the token label, also used for default searching.\n`(option: T) => string`"
							},
							"parameters": [
								{
									"id": 2533,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Required.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Required.getLabel"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2525,
						2526,
						2522,
						2523,
						2524,
						2521,
						2527,
						2520
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2528,
						2531
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 82,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "NavigationProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 2454,
									"name": "GroupSelectProps"
								},
								{
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "getId"
										},
										{
											"type": "literal",
											"value": "getLabel"
										}
									]
								}
							],
							"name": "Pick"
						}
					],
					"name": "Required"
				}
			]
		},
		{
			"id": 2636,
			"name": "OptionsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2637,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 2638,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2637,
						2638
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 76,
					"character": 17
				}
			]
		},
		{
			"id": 2810,
			"name": "OverlayTriggerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2811,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is hidden. Returning\n <Code>false</Code> will prevent hiding.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 2812,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n The callback to run before the overlay is shown. Returning\n <Code>false</Code> will prevent showing.\n</div>\n<CodeBlock>(e: event) => boolean | Promise | undefined</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					}
				},
				{
					"id": 2824,
					"name": "canFlip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Anchor.tsx",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayProps.canFlip"
					}
				},
				{
					"id": 2827,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReactNode"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2828,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2829,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2830,
													"name": "props",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TriggerApi"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactNode"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedTriggerProps.children"
					}
				},
				{
					"id": 2813,
					"name": "clickOutsideIgnoreRefs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional refs to check for clickOutside behavior"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "HTMLElement"
								}
							],
							"name": "RefObject"
						}
					}
				},
				{
					"id": 2814,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The delay when hiding the overlay"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2815,
					"name": "hideKeys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2816,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2817,
									"name": "overlay",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Keys to hide the overlay when the overlay is focused"
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
											"line": 63,
											"character": 4
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 2818,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
											"line": 64,
											"character": 4
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2817,
										2818
									]
								}
							]
						}
					}
				},
				{
					"id": 2836,
					"name": "initialIsVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedVisibilityProps.initialIsVisible"
					}
				},
				{
					"id": 2819,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 66,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 2823,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Anchor.tsx",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayProps.padding"
					}
				},
				{
					"id": 2825,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Anchor.tsx",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayProps.placement"
					}
				},
				{
					"id": 2820,
					"name": "restoreFocusOnHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Restore focus to the target after the overlay is hidden",
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2821,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The delay when showing the overlay"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2822,
					"name": "showKeys",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Keys to show the overlay when the target is focused"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
							"line": 82,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 2826,
					"name": "shrinkOverlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Overlay.tsx",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedOverlayProps.shrinkOverlay"
					}
				},
				{
					"id": 2831,
					"name": "trigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Trigger.tsx",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "TriggerVariant"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TriggerVariant"
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedTriggerProps.trigger"
					}
				},
				{
					"id": 2832,
					"name": "afterHide",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 6,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2833,
							"name": "afterHide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedVisibilityProps.afterHide"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedVisibilityProps.afterHide"
					}
				},
				{
					"id": 2834,
					"name": "afterShow",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/state/Visibility.tsx",
							"line": 7,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2835,
							"name": "afterShow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PickedVisibilityProps.afterShow"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "PickedVisibilityProps.afterShow"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2811,
						2812,
						2824,
						2827,
						2813,
						2814,
						2815,
						2836,
						2819,
						2823,
						2825,
						2820,
						2821,
						2822,
						2826,
						2831
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2832,
						2834
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
					"line": 27,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "PickedOverlayProps"
				},
				{
					"type": "reference",
					"name": "PickedTriggerProps"
				},
				{
					"type": "reference",
					"name": "PickedTriggerRenderProps"
				},
				{
					"type": "reference",
					"name": "PickedVisibilityProps"
				}
			]
		},
		{
			"id": 3604,
			"name": "PaddingOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3605,
					"name": "padding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3606,
					"name": "paddingBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 76,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3607,
					"name": "paddingLeft",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3608,
					"name": "paddingRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				},
				{
					"id": 3609,
					"name": "paddingTop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3605,
						3606,
						3607,
						3608,
						3609
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 74,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3621,
					"name": "BoxProps"
				},
				{
					"type": "reference",
					"id": 3736,
					"name": "FlexProps"
				}
			]
		},
		{
			"id": 3839,
			"name": "PageAsideProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3841,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3842,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3840,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "If the aside block should be open\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3843,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3841,
						3842,
						3840,
						3843
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
					"line": 15,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				},
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 3834,
			"name": "PageComponentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3835,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"name": "DivAttributes.children"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3835
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3836,
					"name": "PageHeaderProps"
				}
			]
		},
		{
			"id": 3836,
			"name": "PageHeaderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3838,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3835,
						"name": "PageComponentProps.children"
					}
				},
				{
					"id": 3837,
					"name": "transparent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "description",
								"text": "If the header should have no background.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3838,
						3837
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/PageLayout/PageLayout.types.ts",
					"line": 8,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3834,
					"name": "PageComponentProps"
				}
			]
		},
		{
			"id": 2873,
			"name": "PanelBodyProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2874,
					"name": "secondaryBgColor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Applies the gray secondary background color."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2874
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 30,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 2875,
			"name": "PanelContextShape",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2876,
					"name": "isFooterSticky",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2877,
					"name": "setIsFooterSticky",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2878,
							"name": "setIsFooterSticky",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2879,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2876
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2877
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 37,
					"character": 17
				}
			]
		},
		{
			"id": 2865,
			"name": "PanelHeaderActionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2867,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets the button to be 100% of the width of its parent"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 712,
						"name": "ButtonProps.block"
					}
				},
				{
					"id": 2868,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 713,
						"name": "ButtonProps.icon"
					}
				},
				{
					"id": 2869,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 714,
						"name": "ButtonProps.iconRight"
					}
				},
				{
					"id": 2870,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shows the button spinner"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 715,
						"name": "ButtonProps.loading"
					}
				},
				{
					"id": 2871,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 716,
						"name": "ButtonProps.size"
					}
				},
				{
					"id": 2866,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Tooltip/Overflow menu label text."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "ButtonAttributes.title"
					}
				},
				{
					"id": 2872,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "All variants except for primary, secondary, tertiary are DEPRECATED.\nAll will still be accepted, but deprecated ones will look like secondary"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 47,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 717,
						"name": "ButtonProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2867,
						2868,
						2869,
						2870,
						2871,
						2866,
						2872
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 23,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ButtonAttributes"
				},
				{
					"type": "reference",
					"id": 711,
					"name": "ButtonProps"
				}
			]
		},
		{
			"id": 2856,
			"name": "PanelHeaderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2857,
					"name": "onClickBack",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2858,
							"name": "onClickBack",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Controls visibility and behavior for the \"chevron-left\" icon on the left\nside of the title."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 2859,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2860,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2857,
						2859
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 9,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivAttributes"
				}
			]
		},
		{
			"id": 2853,
			"name": "PanelQaTags",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2854,
					"name": "moreIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2855,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2854,
						2855
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 4,
					"character": 17
				}
			]
		},
		{
			"id": 2861,
			"name": "PanelTitleTooltipProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2862,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 2863,
					"name": "isVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2864,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2862,
						2863,
						2864
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Panel/Panel.types.ts",
					"line": 18,
					"character": 17
				}
			]
		},
		{
			"id": 2778,
			"name": "ParsedInputValue",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2780,
					"name": "decimal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 106,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2781,
					"name": "fraction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2779,
					"name": "integer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2782,
					"name": "parsedNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 108,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2780,
						2781,
						2779,
						2782
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 104,
					"character": 17
				}
			]
		},
		{
			"id": 2897,
			"name": "PillOptGroup",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2898,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Id"
					}
				},
				{
					"id": 2899,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2898,
						2899
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
					"line": 19,
					"character": 17
				}
			]
		},
		{
			"id": 2883,
			"name": "PillOption",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2884,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2880,
						"name": "PillColor"
					}
				},
				{
					"id": 2885,
					"name": "groupId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Id"
					}
				},
				{
					"id": 2886,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Id"
					}
				},
				{
					"id": 2887,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2888,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2884,
						2885,
						2886,
						2887,
						2888
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
					"line": 6,
					"character": 17
				}
			]
		},
		{
			"id": 2889,
			"name": "PillOptionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2890,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2880,
						"name": "PillColor"
					},
					"overwrites": {
						"type": "reference",
						"name": "OptionProps.color"
					}
				},
				{
					"id": 2894,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3092,
						"name": "OptionProps.disabled"
					}
				},
				{
					"id": 2892,
					"name": "index",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3090,
						"name": "OptionProps.index"
					}
				},
				{
					"id": 2891,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2895,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Represents the currently selected value. This option will be styled\ndifferently as well as receive UX to scroll into view and start list\nnavigation from this element."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3093,
						"name": "OptionProps.selected"
					}
				},
				{
					"id": 2896,
					"name": "suggested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If nothing is selected, suggest this option. Suggested options mimic the\nUX of a selected option, scroll into view and start list navigation from\nthis element."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3094,
						"name": "OptionProps.suggested"
					}
				},
				{
					"id": 2893,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3091,
						"name": "OptionProps.value"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2890,
						2894,
						2892,
						2891,
						2895,
						2896,
						2893
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
					"line": 14,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3089,
					"name": "OptionProps"
				}
			]
		},
		{
			"id": 2881,
			"name": "PillProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2882,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the border, background and color of the Pill",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "gray\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pill/Pill.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2880,
						"name": "PillColor"
					},
					"overwrites": {
						"type": "reference",
						"name": "React.ComponentPropsWithoutRef.color"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2882
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Pill/Pill.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "literal",
							"value": "span"
						}
					],
					"name": "ComponentPropsWithoutRef"
				}
			]
		},
		{
			"id": 2900,
			"name": "PillSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2935,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2936,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2937,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 2939,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2940,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2941,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 2942,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 2943,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 2926,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 2933,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 2957,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.emptyMessage"
					}
				},
				{
					"id": 2934,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 2951,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.footer"
					}
				},
				{
					"id": 2958,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hideDelay"
					}
				},
				{
					"id": 2955,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 2956,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 2947,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2948,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2949,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 2950,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 2928,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2929,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 2930,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2931,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSelect"
					}
				},
				{
					"id": 2923,
					"name": "optgroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available option groups"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2962,
							"name": "OptionGroup"
						}
					}
				},
				{
					"id": 2922,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of available options"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2961,
							"name": "Option"
						}
					}
				},
				{
					"id": 2959,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.optionsRef"
					}
				},
				{
					"id": 2927,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placeholder"
					}
				},
				{
					"id": 2938,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.placement"
					}
				},
				{
					"id": 2932,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.qa"
					}
				},
				{
					"id": 2960,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showDelay"
					}
				},
				{
					"id": 2925,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 2924,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Currently selected value"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2961,
						"name": "Option"
					}
				},
				{
					"id": 2901,
					"name": "getColor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2902,
							"name": "getColor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the display color of an option's `Pill`\n`(option: unknown) => PillColor`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).color`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2903,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 2880,
								"name": "PillColor"
							}
						}
					]
				},
				{
					"id": 2904,
					"name": "getGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2905,
							"name": "getGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning group ID for a given option to define a relation to `optgroups`\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).groupId`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2906,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "Id"
									}
								]
							}
						}
					]
				},
				{
					"id": 2907,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 45,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2908,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning ID of a given option\n`(option: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2909,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							}
						}
					]
				},
				{
					"id": 2910,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2911,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of an option\n`(option: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2912,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 2913,
					"name": "getSuggested",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2914,
							"name": "getSuggested",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning `boolean` value to suggest this option if nothing is selected.\n`(option: unknown) => boolean`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(option) => (option as PillOption).suggested`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2915,
									"name": "option",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2961,
										"name": "Option"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					]
				},
				{
					"id": 2916,
					"name": "groupGetId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2917,
							"name": "groupGetId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning the ID of a group\n`(group: unknown) => string | number`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).id`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2918,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							}
						}
					]
				},
				{
					"id": 2919,
					"name": "groupGetLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2920,
							"name": "groupGetLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function returning label of a group\n`(group: unknown) => string`",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "`(group) => (group as PillOptgroup).label`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2921,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2962,
										"name": "OptionGroup"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 2952,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 92,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2953,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
							},
							"parameters": [
								{
									"id": 2954,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 2944,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2945,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a search bar to the select."
							},
							"parameters": [
								{
									"id": 2946,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2935,
						2939,
						2942,
						2943,
						2926,
						2933,
						2957,
						2934,
						2951,
						2958,
						2955,
						2956,
						2947,
						2928,
						2923,
						2922,
						2959,
						2927,
						2938,
						2932,
						2960,
						2925,
						2924
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2901,
						2904,
						2907,
						2910,
						2913,
						2916,
						2919,
						2952,
						2944
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/PillSelect/PillSelect.types.ts",
					"line": 24,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 2961,
					"name": "Option",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2883,
						"name": "PillOption"
					}
				},
				{
					"id": 2962,
					"name": "OptionGroup",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "reference",
						"id": 2897,
						"name": "PillOptGroup"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "SelectProps"
						},
						{
							"type": "literal",
							"value": "label"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2963,
			"name": "PopoverContentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2964,
					"name": "fluid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2965,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2964,
						2965
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
					"line": 5,
					"character": 17
				}
			]
		},
		{
			"id": 2966,
			"name": "PopoverProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2973,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2974,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2967,
					"name": "initialIsVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to show the overlay on initial render",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2968,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tip we want to display"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 2969,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2970,
											"name": "placement",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
													"line": 19,
													"character": 33
												}
											],
											"type": {
												"type": "reference",
												"name": "Placement"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2970
											]
										}
									]
								}
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"name": "ReactElement"
					}
				},
				{
					"id": 2971,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines the position of the arrow",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "top\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 2975,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 2972,
					"name": "trigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The event to trigger the overlay",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "click\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TriggerVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2973,
						2974,
						2967,
						2968,
						2971,
						2975,
						2972
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Popover/Popover.types.ts",
					"line": 10,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 355,
			"name": "PresetPaginationProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 356,
					"name": "activePage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Current page selected, 1 based."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 363,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 364,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 362,
					"name": "fieldLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `fieldLabel` has been deprecated and will be removed in a future version.\nThe `Pagination` component now handles i18n internally and this prop has no effect,\nplease remove it from usage.\n\n\n**Before**\n\n`<Pagination fieldLabel={window.i18n.t('my.key')} />`\n\n**After**\n\n`<Pagination />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 357,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Total number of items across pages."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 361,
					"name": "perPage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Number of items per page."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 365,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 358,
					"name": "onSelectPage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "onSelectPage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback that receives the page selected."
							},
							"parameters": [
								{
									"id": 360,
									"name": "page",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						356,
						363,
						364,
						362,
						357,
						361,
						365
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						358
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Pagination/Pagination.types.ts",
					"line": 19,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2976,
			"name": "ProgressBarProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2978,
					"name": "animated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Loader/Loader.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "LoaderProps.animated"
					}
				},
				{
					"id": 2979,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "LoaderProps.children"
					}
				},
				{
					"id": 2980,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "LoaderProps.className"
					}
				},
				{
					"id": 2981,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "LoaderProps.style"
					}
				},
				{
					"id": 2977,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Loader/Loader.types.ts",
							"line": 4,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "LoaderProps.value"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2978,
						2979,
						2980,
						2981,
						2977
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/ProgressBar/ProgressBar.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "LoaderProps"
				}
			]
		},
		{
			"id": 617,
			"name": "Props",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 618,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 619,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 620,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						618,
						619,
						620
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/utils/types.ts",
					"line": 36,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 21,
					"name": "CalendarContainerProps"
				},
				{
					"type": "reference",
					"id": 58,
					"name": "NextPrevProps"
				},
				{
					"type": "reference",
					"id": 64,
					"name": "BodyProps"
				},
				{
					"type": "reference",
					"id": 81,
					"name": "WeekdaysProps"
				},
				{
					"type": "reference",
					"id": 85,
					"name": "WeekProps"
				},
				{
					"type": "reference",
					"id": 89,
					"name": "DayProps"
				},
				{
					"type": "reference",
					"id": 103,
					"name": "SelectProps"
				},
				{
					"type": "reference",
					"id": 207,
					"name": "MenuProps"
				},
				{
					"type": "reference",
					"id": 222,
					"name": "MenuSearchProps"
				},
				{
					"type": "reference",
					"id": 257,
					"name": "MenuHeaderProps"
				},
				{
					"type": "reference",
					"id": 355,
					"name": "PresetPaginationProps"
				},
				{
					"type": "reference",
					"id": 366,
					"name": "TableProps"
				},
				{
					"type": "reference",
					"id": 372,
					"name": "BodyRowProps"
				},
				{
					"type": "reference",
					"id": 383,
					"name": "GroupProps"
				},
				{
					"type": "reference",
					"id": 389,
					"name": "GroupTitleProps"
				},
				{
					"type": "reference",
					"id": 393,
					"name": "HeaderCellProps"
				},
				{
					"type": "reference",
					"id": 400,
					"name": "BodyCellProps"
				},
				{
					"type": "reference",
					"id": 406,
					"name": "IconCellProps"
				},
				{
					"type": "reference",
					"id": 416,
					"name": "TextAreaCellProps"
				},
				{
					"type": "reference",
					"id": 488,
					"name": "LinkCellProps"
				},
				{
					"type": "reference",
					"id": 493,
					"name": "TextCellProps"
				},
				{
					"type": "reference",
					"id": 497,
					"name": "CurrencyCellProps"
				},
				{
					"type": "reference",
					"id": 501,
					"name": "TabProps"
				},
				{
					"type": "reference",
					"id": 511,
					"name": "TabsProps"
				},
				{
					"type": "reference",
					"id": 612,
					"name": "NextDetailPageProps"
				},
				{
					"type": "reference",
					"id": 622,
					"name": "AvatarProps"
				},
				{
					"type": "reference",
					"id": 629,
					"name": "AvatarIconProps"
				},
				{
					"type": "reference",
					"id": 634,
					"name": "AvatarPortraitProps"
				},
				{
					"type": "reference",
					"id": 639,
					"name": "AvatarLabelProps"
				},
				{
					"type": "reference",
					"id": 672,
					"name": "BadgeProps"
				},
				{
					"type": "reference",
					"id": 676,
					"name": "BadgeLabelProps"
				},
				{
					"type": "reference",
					"id": 682,
					"name": "BannerProps"
				},
				{
					"type": "reference",
					"id": 687,
					"name": "BannerIconProps"
				},
				{
					"type": "reference",
					"id": 693,
					"name": "ExpandableProps"
				},
				{
					"type": "reference",
					"id": 698,
					"name": "BreadcrumbProps"
				},
				{
					"type": "reference",
					"id": 702,
					"name": "BreadcrumbCrumbProps"
				},
				{
					"type": "reference",
					"id": 727,
					"name": "CardProps"
				},
				{
					"type": "reference",
					"id": 734,
					"name": "CheckboxProps"
				},
				{
					"type": "reference",
					"id": 742,
					"name": "ContactItemProps"
				},
				{
					"type": "reference",
					"id": 794,
					"name": "DateInputProps"
				},
				{
					"type": "reference",
					"id": 962,
					"name": "FlyoutItemProps"
				},
				{
					"type": "reference",
					"id": 1067,
					"name": "EmptyStateProps"
				},
				{
					"type": "reference",
					"id": 1072,
					"name": "EmptyStateActionsProps"
				},
				{
					"type": "reference",
					"id": 1076,
					"name": "EmptyStateDescriptionsProps"
				},
				{
					"type": "reference",
					"id": 1082,
					"name": "EmptyStateTitleProps"
				},
				{
					"type": "reference",
					"id": 1187,
					"name": "FontProps"
				},
				{
					"type": "reference",
					"id": 2561,
					"name": "IconProps"
				},
				{
					"type": "reference",
					"id": 2569,
					"name": "LinkProps"
				},
				{
					"type": "reference",
					"id": 2639,
					"name": "HeaderProps"
				},
				{
					"type": "reference",
					"id": 2693,
					"name": "ModalProps"
				},
				{
					"type": "reference",
					"id": 2703,
					"name": "ModalContainerProps"
				},
				{
					"type": "reference",
					"id": 2723,
					"name": "ModalCloseableHeaderProps"
				},
				{
					"type": "reference",
					"id": 2741,
					"name": "NotationProps"
				},
				{
					"type": "reference",
					"id": 2966,
					"name": "PopoverProps"
				},
				{
					"type": "reference",
					"id": 2982,
					"name": "RadioButtonProps"
				},
				{
					"type": "reference",
					"id": 2989,
					"name": "RequiredProps"
				},
				{
					"type": "reference",
					"id": 3043,
					"name": "SegmentedControllerProps"
				},
				{
					"type": "reference",
					"id": 3054,
					"name": "SegmentedControllerSegmentProps"
				},
				{
					"type": "reference",
					"id": 3062,
					"name": "SegmentedControllerTooltipProps"
				},
				{
					"type": "reference",
					"id": 3117,
					"name": "SpinnerProps"
				},
				{
					"type": "reference",
					"id": 3133,
					"name": "SwitchProps"
				},
				{
					"type": "reference",
					"id": 3236,
					"name": "HeroTextProps"
				},
				{
					"type": "reference",
					"id": 3240,
					"name": "HeroMediaProps"
				},
				{
					"type": "reference",
					"id": 3246,
					"name": "TileCommonProps"
				},
				{
					"type": "reference",
					"id": 3276,
					"name": "ToastProps"
				},
				{
					"type": "reference",
					"id": 3298,
					"name": "TooltipContentProps"
				},
				{
					"type": "reference",
					"id": 3303,
					"name": "TooltipProps"
				},
				{
					"type": "reference",
					"id": 3575,
					"name": "TypographyProps"
				},
				{
					"type": "reference",
					"id": 3621,
					"name": "BoxProps"
				},
				{
					"type": "reference",
					"id": 3685,
					"name": "DetailPageProps"
				},
				{
					"type": "reference",
					"id": 3706,
					"name": "SectionProps"
				},
				{
					"type": "reference",
					"id": 3736,
					"name": "FlexProps"
				},
				{
					"type": "reference",
					"id": 3804,
					"name": "DivProps"
				},
				{
					"type": "reference",
					"id": 3808,
					"name": "ListPageControlProps"
				},
				{
					"type": "reference",
					"id": 3839,
					"name": "PageAsideProps"
				},
				{
					"type": "reference",
					"id": 3845,
					"name": "ToolHeaderBadgeProps"
				},
				{
					"type": "reference",
					"id": 3850,
					"name": "ToolHeaderIconProps"
				}
			]
		},
		{
			"id": 1041,
			"name": "QaTags",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1042,
					"name": "dropzone",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1044,
					"name": "hideError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 201,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1043,
					"name": "showErrorDetails",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1042,
						1044,
						1043
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 198,
					"character": 17
				}
			]
		},
		{
			"id": 2982,
			"name": "RadioButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2983,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Selected state of the radio button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/RadioButton/RadioButton.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2986,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2987,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2984,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disabled state of the radio button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/RadioButton/RadioButton.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2985,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Error state of the radio button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/RadioButton/RadioButton.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2988,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2983,
						2986,
						2987,
						2984,
						2985,
						2988
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/RadioButton/RadioButton.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2584,
			"name": "Reorder",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2590,
					"name": "destination",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2591,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2593,
									"name": "droppableId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
											"line": 30,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2592,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
											"line": 29,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2593,
										2592
									]
								}
							]
						}
					}
				},
				{
					"id": 2585,
					"name": "draggableId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 23,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2586,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2587,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2589,
									"name": "droppableId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
											"line": 26,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2588,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
											"line": 25,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2589,
										2588
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2590,
						2585,
						2586
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 22,
					"character": 17
				}
			]
		},
		{
			"id": 2989,
			"name": "RequiredProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2990,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If provided, takes the place of label normally reading \"required fields\""
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Required/Required.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactChild"
					},
					"overwrites": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 2993,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 2991,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Changes where I18n looks for the requiredFields key"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Required/Required.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2992,
					"name": "showLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls showing text reading \"required fields\""
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Required/Required.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2994,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2990,
						2993,
						2991,
						2992,
						2994
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Required/Required.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 598,
			"name": "RowProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 599,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Props.children"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						599
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Grid/Grid.tsx",
					"line": 18,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Props"
				}
			]
		},
		{
			"id": 2557,
			"name": "SVGIconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2559,
					"name": "fill",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2558,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2560,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2556,
						"name": "IconSize"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2559,
						2558,
						2560
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
					"line": 7,
					"character": 17
				}
			]
		},
		{
			"id": 1136,
			"name": "SearchBarProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1140,
					"name": "query",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 125,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1137,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1138,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1139,
									"name": "e",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1140
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1137
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 123,
					"character": 17
				}
			]
		},
		{
			"id": 3006,
			"name": "SearchHook",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3007,
					"name": "domHandlers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3008,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 3009,
									"name": "onChange",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Search/Search.types.ts",
											"line": 60,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 3010,
											"name": "onChange",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 3011,
													"name": "e",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ChangeEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								},
								{
									"id": 3012,
									"name": "onKeyDown",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Search/Search.types.ts",
											"line": 61,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 3013,
											"name": "onKeyDown",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 3014,
													"name": "e",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLInputElement"
															}
														],
														"name": "KeyboardEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										3009,
										3012
									]
								}
							]
						}
					}
				},
				{
					"id": 3017,
					"name": "isEmpty",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 64,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3021,
					"name": "showSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 66,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3024,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3015,
					"name": "clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3016,
							"name": "clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3018,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 65,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3019,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3020,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3022,
					"name": "submit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3023,
							"name": "submit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3007,
						3017,
						3021,
						3024
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3015,
						3018,
						3022
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Search/Search.types.ts",
					"line": 58,
					"character": 17
				}
			]
		},
		{
			"id": 2995,
			"name": "SearchHookConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2996,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3005,
					"name": "typeahead",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `typeahead` prop has been deprecated and will be removed in a future version.\n\nA new component, `Typeahead`, has been introduced with specific UX for typeahead-like\nbehavior. Please use this component instead.\n\n**Before**\n\n<Search typeahead onChange={() => { ... }} />\n\n**After**\n\n<Typeahead onChange={() => { ... }} />\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							},
							{
								"tag": "see",
								"text": "https://core.procore.com/latest/web/components/typeahead/react/\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2997,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 2998,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\n\nThe `onChange` prop has been deprecated and will be removed in a future version.\n\nA new component, `Typeahead`, has been introduced with specific UX for typeahead-like\nbehavior. Please use this component instead.\n\n**Before**\n\n<Search typeahead onChange={() => { ... }} />\n\n**After**\n\n<Typeahead onChange={() => { ... }} />\n"
									},
									{
										"tag": "deprecatedsince",
										"text": "10.20.0\n"
									},
									{
										"tag": "see",
										"text": "https://core.procore.com/latest/web/components/typeahead/react/\n"
									}
								]
							},
							"parameters": [
								{
									"id": 2999,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3000,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3001,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3002,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3003,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Input handler for search variant</div>\n<CodeBlock>(value: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3004,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2996,
						3005
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						2997,
						3000,
						3002
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Search/Search.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3025,
					"name": "SearchProps"
				}
			]
		},
		{
			"id": 3025,
			"name": "SearchProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3026,
					"name": "autoFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.autoFocus"
					}
				},
				{
					"id": 3029,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `Input`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 3031,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 2996,
						"name": "SearchHookConfig.initialValue"
					}
				},
				{
					"id": 3037,
					"name": "typeahead",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `typeahead` prop has been deprecated and will be removed in a future version.\n\nA new component, `Typeahead`, has been introduced with specific UX for typeahead-like\nbehavior. Please use this component instead.\n\n**Before**\n\n<Search typeahead onChange={() => { ... }} />\n\n**After**\n\n<Typeahead onChange={() => { ... }} />\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							},
							{
								"tag": "see",
								"text": "https://core.procore.com/latest/web/components/typeahead/react/\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3005,
						"name": "SearchHookConfig.typeahead"
					}
				},
				{
					"id": 3027,
					"name": "usingHook",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 75,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3006,
						"name": "SearchHook"
					}
				},
				{
					"id": 3028,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Initial value string",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.value"
					}
				},
				{
					"id": 3030,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use the `error` prop instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Input/Input.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.variant"
					}
				},
				{
					"id": 3032,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3033,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3001,
								"name": "SearchHookConfig.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3000,
						"name": "SearchHookConfig.onClear"
					}
				},
				{
					"id": 3034,
					"name": "onSubmit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Search/Search.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3035,
							"name": "onSubmit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>Input handler for search variant</div>\n<CodeBlock>(value: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3036,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 3003,
								"name": "SearchHookConfig.onSubmit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 3002,
						"name": "SearchHookConfig.onSubmit"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3026,
						3029,
						3031,
						3037,
						3027,
						3028,
						3030
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3032,
						3034
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Search/Search.types.ts",
					"line": 71,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2553,
							"name": "InputProps"
						},
						{
							"type": "literal",
							"value": "onSubmit"
						}
					],
					"name": "Omit"
				},
				{
					"type": "reference",
					"id": 2995,
					"name": "SearchHookConfig"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 222,
					"name": "MenuSearchProps"
				}
			]
		},
		{
			"id": 3706,
			"name": "SectionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3707,
					"name": "actions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": " Actions of Buttons and Dropdowns to render. If a function, the open\n state is provided <Code>{`({ open }) => React.ReactNode`}</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReactNode"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3708,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 3709,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 3710,
													"name": "section",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 3711,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3712,
																	"name": "open",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
																			"line": 225,
																			"character": 43
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3712
																	]
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactNode"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 3716,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3717,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3713,
					"name": "expandId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the expand and collapse accordion feature. Requires a unique ID\nacross sections, unique within the provider (DetailPage.Card) and requires\na heading on the section. Closed sections will not render its children."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
							"line": 232,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3714,
					"name": "heading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Heading text for the section."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
							"line": 237,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3715,
					"name": "initialIsOpen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If expandable, start open or closed."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
							"line": 242,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3718,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3707,
						3716,
						3717,
						3713,
						3714,
						3715,
						3718
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 220,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3043,
			"name": "SegmentedControllerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3044,
					"name": "active",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The segment is active"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3045,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The segment controller is block sized"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3051,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3052,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3046,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disables all segments in the controller"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3053,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3050,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Please use the `block` prop\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "block"
							}
						]
					}
				},
				{
					"id": 3047,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3048,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3049,
									"name": "active",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3044,
						3045,
						3051,
						3052,
						3046,
						3053,
						3050
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3047
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
					"line": 12,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3054,
			"name": "SegmentedControllerSegmentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3055,
					"name": "active",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The segment is active"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 39,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3059,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3060,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3056,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the segment disabled"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3057,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To change the tooltip placement"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 3061,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3058,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip we want to display on hover"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 54,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3055,
						3059,
						3060,
						3056,
						3057,
						3061,
						3058
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
					"line": 35,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3062,
			"name": "SegmentedControllerTooltipProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3065,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3066,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3063,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 3064,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 3067,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3065,
						3066,
						3063,
						3064,
						3067
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
					"line": 57,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3095,
			"name": "SelectButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3096,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 128,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3097,
					"name": "clearRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 129,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 3098,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 130,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3099,
					"name": "dropdown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 131,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3100,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 132,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3101,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 133,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 3114,
					"name": "isMenuOpened",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 144,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3102,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 3103,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 135,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3107,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 137,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3108,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 138,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "DivProps.placeholder"
					}
				},
				{
					"id": 3109,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 3110,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 140,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					}
				},
				{
					"id": 3111,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 141,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "DivProps.tabIndex"
					}
				},
				{
					"id": 3112,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 142,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "button"
							},
							{
								"type": "literal",
								"value": "submit"
							},
							{
								"type": "literal",
								"value": "reset"
							}
						]
					}
				},
				{
					"id": 3113,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 143,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 709,
						"name": "LegacyButtonVariant"
					}
				},
				{
					"id": 3104,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 136,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3105,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3106,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3096,
						3097,
						3098,
						3099,
						3100,
						3101,
						3114,
						3102,
						3103,
						3107,
						3108,
						3109,
						3110,
						3111,
						3112,
						3113
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3104
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Select/Select.types.ts",
					"line": 127,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "DivProps"
				}
			]
		},
		{
			"id": 448,
			"name": "SelectCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 451,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 452,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 453,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.afterHide"
					}
				},
				{
					"id": 454,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 455,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 456,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.afterShow"
					}
				},
				{
					"id": 457,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 51,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.beforeHide"
					}
				},
				{
					"id": 458,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.beforeShow"
					}
				},
				{
					"id": 459,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Make the Select button 100% width"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.block"
					}
				},
				{
					"id": 460,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.disabled"
					}
				},
				{
					"id": 461,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are no children this will render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.emptyMessage"
					}
				},
				{
					"id": 462,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.error"
					}
				},
				{
					"id": 449,
					"name": "errorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Message to be displayed below the select during an error",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 463,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.footer"
					}
				},
				{
					"id": 464,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.hideDelay"
					}
				},
				{
					"id": 465,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the select's configurable strings.\nDefaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 79,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.i18nScope"
					}
				},
				{
					"id": 466,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 80,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.label"
					}
				},
				{
					"id": 467,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If the select is loading",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.loading"
					}
				},
				{
					"id": 471,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 98,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 472,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 473,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optional <Code>function</Code> that automatically executes when\nscrolling reaches the last item."
									},
									"parameters": [
										{
											"id": 474,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.onScrollBottom"
					}
				},
				{
					"id": 478,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 104,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 479,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 480,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 481,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.onSelect"
					}
				},
				{
					"id": 482,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 105,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.optionsRef"
					}
				},
				{
					"id": 483,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Renders when the label is blank"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 110,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.placeholder"
					}
				},
				{
					"id": 484,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The placement of the overlay",
						"tags": [
							{
								"tag": "default",
								"text": "'bottom-left'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 842,
						"name": "DropdownPlacement"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.placement"
					}
				},
				{
					"id": 450,
					"name": "processing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Triggers the spinner that covers inline editable content",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 140,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 485,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 117,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "QaTags"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.qa"
					}
				},
				{
					"id": 486,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.showDelay"
					}
				},
				{
					"id": 487,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configurable tabIndex for the select button",
						"tags": [
							{
								"tag": "default",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 124,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.tabIndex"
					}
				},
				{
					"id": 468,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 92,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 469,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
							},
							"parameters": [
								{
									"id": 470,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SelectProps.onClear"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.onClear"
					}
				},
				{
					"id": 475,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 103,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 476,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a search bar to the select."
							},
							"parameters": [
								{
									"id": 477,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SelectProps.onSearch"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "SelectProps.onSearch"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						451,
						454,
						457,
						458,
						459,
						460,
						461,
						462,
						449,
						463,
						464,
						465,
						466,
						467,
						471,
						478,
						482,
						483,
						484,
						450,
						485,
						486,
						487
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						468,
						475
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 129,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "SelectProps"
				}
			]
		},
		{
			"id": 3069,
			"name": "SelectMenuProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3070,
					"name": "emptyMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3071,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 3072,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3088,
					"name": "menuRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 2594,
								"name": "MenuRef"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 3076,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3077,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3078,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3079,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 3083,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3084,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3085,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3086,
											"name": "selection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2579,
												"name": "Selection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					}
				},
				{
					"id": 3087,
					"name": "optionsRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 3073,
					"name": "onClear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3074,
							"name": "onClear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3075,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLButtonElement"
											},
											{
												"type": "reference",
												"name": "MouseEvent"
											}
										],
										"name": "MouseEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3080,
					"name": "onSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Select/Select.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3081,
							"name": "onSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3082,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLInputElement"
											}
										],
										"name": "ChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3070,
						3071,
						3072,
						3088,
						3076,
						3083,
						3087
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3073,
						3080
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Select/Select.types.ts",
					"line": 10,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onSelect"
								},
								{
									"type": "literal",
									"value": "onDragEnd"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 103,
			"name": "SelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 104,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 111,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 112,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 105,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 109,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Expects an array of objects with the following shape"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 74,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "SelectOption"
						}
					}
				},
				{
					"id": 110,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Identifier of the selected value"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 78,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 113,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 106,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 107,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 108,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						104,
						111,
						112,
						105,
						109,
						110,
						113
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						106
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 67,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3263,
			"name": "SelectableTileProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3271,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3248,
						"name": "TileCommonProps.children"
					}
				},
				{
					"id": 3272,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3249,
						"name": "TileCommonProps.className"
					}
				},
				{
					"id": 3269,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Only with selectable variant.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 56,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3270,
					"name": "orientation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "portrait"
							},
							{
								"type": "literal",
								"value": "landscape"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3247,
						"name": "TileCommonProps.orientation"
					}
				},
				{
					"id": 3268,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Only with selectable variant.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3273,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 3250,
						"name": "TileCommonProps.style"
					}
				},
				{
					"id": 3264,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To change tile behaviour"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "literal",
						"value": "selectable"
					}
				},
				{
					"id": 3265,
					"name": "onClick",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3266,
							"name": "onClick",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "For variant selectable\n<CodeBlock>{`() : void`}</CodeBlock>A function for controlling{' '}\n<Code>selected</Code> Tile prop.\n<br />\n<br />\nFor variant interactive. There is no restriction for using it with\ninteractive, but interactive means that there is a button or a link\ninside tile, so be careful with potential clicks inside clicks. And\nthere is also no hover state for interactive.\n<CodeBlock>{`React.MouseEventHandler<HTMLDivElement>`}</CodeBlock>\nFor variant link:\n<CodeBlock>{`React.MouseEventHandler<HTMLAnchorElement>`}</CodeBlock>"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3267,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3271,
						3272,
						3269,
						3270,
						3268,
						3273,
						3264
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3265
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 22,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 3246,
					"name": "TileCommonProps"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivAttributes"
						},
						{
							"type": "literal",
							"value": "onClick"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 2579,
			"name": "Selection",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2583,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 19,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "selected"
							},
							{
								"type": "literal",
								"value": "unselected"
							}
						]
					}
				},
				{
					"id": 2580,
					"name": "event",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									},
									{
										"type": "reference",
										"name": "MouseEvent"
									}
								],
								"name": "MouseEvent"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEvent"
							}
						]
					}
				},
				{
					"id": 2581,
					"name": "group",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2582,
					"name": "item",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2583,
						2580,
						2581,
						2582
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 13,
					"character": 17
				}
			]
		},
		{
			"id": 2775,
			"name": "Separators",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2776,
					"name": "decimal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 100,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2777,
					"name": "group",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 101,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2776,
						2777
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 99,
					"character": 17
				}
			]
		},
		{
			"id": 3126,
			"name": "SliderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3127,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not to put the slider into a disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.disabled"
					}
				},
				{
					"id": 3128,
					"name": "max",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The maximum value of the slider (right side)",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "100\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.max"
					}
				},
				{
					"id": 3129,
					"name": "min",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The minimum value of the slider (left side)",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.min"
					}
				},
				{
					"id": 3130,
					"name": "showLabel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not to show value labels below the slider increments."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 21,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3131,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The distance between each stopping point on the Slider.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "1\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.step"
					}
				},
				{
					"id": 3132,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The currently set value of the Slider.\nDefaults to the middle between min and max.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "(max < min) ? min : min + (max - min)/2;\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"overwrites": {
						"type": "reference",
						"name": "InputAttributes.value"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3127,
						3128,
						3129,
						3130,
						3131,
						3132
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Slider/Slider.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "InputAttributes"
				}
			]
		},
		{
			"id": 3117,
			"name": "SpinnerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3123,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3124,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3118,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<span>\n Spinner color, one of the{' '}\n <Link to=\"/web/style/colors/#hsl-palette\">HSL Palette</Link> css\n strings\n</span>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					}
				},
				{
					"id": 3119,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The spinner label, only displayed when used as an overlay"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3120,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The spinner will show if loading is true"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3121,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the spinner"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3115,
						"name": "SpinnerSize"
					}
				},
				{
					"id": 3125,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3122,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\"variant\" prop will be removed in a future version. Use \"color\" prop instead to set a spinner's color.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3116,
						"name": "SpinnerVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3123,
						3124,
						3118,
						3119,
						3120,
						3121,
						3125,
						3122
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
					"line": 8,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3133,
			"name": "SwitchProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3134,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3135,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3136,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3134,
						3135,
						3136
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Switch/Switch.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 501,
			"name": "TabProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 502,
					"name": "active",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tab is active"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 508,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 509,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 503,
					"name": "dark",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether or not tab is in dark mode"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 24,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 505,
					"name": "dropdown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "This was never intended to be a public facing API and does not\ndo anything. It will be removed in the future.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 504,
					"name": "onLayout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Function"
					}
				},
				{
					"id": 506,
					"name": "overflowing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "This was never intended to be a public facing API and does not\ndo anything. It will be removed in the future.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 41,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 510,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 507,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "please use the `active` and `dark` props to configure style. The\n`dropdown`, `hover`, and `overflowing` variants were only for internal use\nand should not be used in clients\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 48,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TabVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						502,
						508,
						509,
						503,
						505,
						504,
						506,
						510,
						507
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
					"line": 14,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 366,
			"name": "TableProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 369,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 370,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 367,
					"name": "inline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 371,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 368,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The table variant"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 165,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TableVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						369,
						370,
						367,
						371,
						368
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 159,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 511,
			"name": "TabsProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 514,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 515,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 512,
					"name": "dark",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 56,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 513,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				},
				{
					"id": 516,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						514,
						515,
						512,
						513,
						516
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tabs/Tabs.types.ts",
					"line": 55,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 416,
			"name": "TextAreaCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 420,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 421,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 417,
					"name": "errorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Message to be displayed below the textarea during an error"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 172,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 418,
					"name": "processing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Triggers the spinner for processing inline editable content"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 177,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 419,
					"name": "resizable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Sets whether it is resizable"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Table/Table.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 422,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						420,
						421,
						417,
						418,
						419,
						422
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 168,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3137,
			"name": "TextAreaProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3138,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the error state of the `TextArea`, changing the\nbackground color and border colors to red"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3139,
					"name": "resize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Controls the resize rules for the `TextArea`"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "both"
							},
							{
								"type": "literal",
								"value": "horizontal"
							},
							{
								"type": "literal",
								"value": "vertical"
							}
						]
					}
				},
				{
					"id": 3140,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nThe `variant` prop has been deprecated and will be removed in a future version.\nPlease use the `error` boolean prop instead.\n\n**Before**\n\n`<TextArea variant=\"error\" />`\n\n**After**\n\n`<TextArea error />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": ""
							},
							{
								"type": "literal",
								"value": "error"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3138,
						3139,
						3140
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TextArea/TextArea.types.ts",
					"line": 3,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "TextAreaAttributes"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1528,
					"name": "FieldTextAreaComponentProps"
				}
			]
		},
		{
			"id": 493,
			"name": "TextCellProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 494,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 495,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 496,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						494,
						495,
						496
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Table/Table.types.ts",
					"line": 185,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3141,
			"name": "TextEditorProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3142,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 3143,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3144,
					"name": "init",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "unsupported",
								"text": "Use at your own risk. DST makes no guarantees about this API, and is subject to removal at any point without warning or deprecation.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "RawEditorSettings"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3145,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.init"
					}
				},
				{
					"id": 3146,
					"name": "initialValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n`initialValue` has been deprecated and will be removed in a future version.\nPlease use the `value` prop instead\n\nThe first value passed into `value` prop will be the `TextEditor` initial\nvalue. Changing the value will update the text of the `TextEditor`.\nThe editor should be controlled via the combination of `value`\nand `onChange` props.\n\n**Before**\n\n`<TextEditor initialValue=\"Hello World\" />`\n\n**After**\n\n`<TextEditor value=\"Hello World\" />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.initialValue"
					}
				},
				{
					"id": 3147,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Locale which will be used used for localization. Can be passed directly or\nset by wrapping components in I18n provider. Icelandic (is-IS) is not\nactually supported by TinyMCE, so it is defaulted to english."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Locale"
					}
				},
				{
					"id": 3151,
					"name": "plugins",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<div>\n Array of plugins to use with the editor in addition to the defaults.\n Can be any of:\n</div>\n<CodeBlock>\n [{plugins.map((plugin) => `'${plugin}'`).join(', ')}]\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 57,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.plugins"
					}
				},
				{
					"id": 3148,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3149,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>onChange event handler for text editor area</div>\n<CodeBlock>(content: string) => void</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3150,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3142,
						3143,
						3144,
						3146,
						3147,
						3151
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3148
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TextEditor/TextEditor.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "query",
									"queryType": {
										"type": "reference",
										"name": "Editor"
									}
								}
							],
							"name": "React.ComponentProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onChange"
								},
								{
									"type": "literal",
									"value": "onKeyUp"
								}
							]
						}
					],
					"name": "Omit"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1556,
					"name": "FieldRichTextComponentProps"
				},
				{
					"type": "reference",
					"id": 1569,
					"name": "FieldRichTextProps"
				}
			]
		},
		{
			"id": 517,
			"name": "ThumbnailProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 525,
					"name": "caption",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Thumbnail caption",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 49,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 528,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 62,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 524,
					"name": "clickable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 43,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 522,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Use \"disabled\" view",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 523,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 520,
					"name": "focused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Use \"focused\" view",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 526,
					"name": "hasCaptionPlaceholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show placeholder for caption if it is empty",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 55,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 527,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Thumbnail label",
						"tags": [
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 529,
					"name": "qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "QaTags"
					}
				},
				{
					"id": 521,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Use \"selected\" view",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 519,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Thumbnail size",
						"tags": [
							{
								"tag": "default",
								"text": "'lg'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 22,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "SizeVariant"
					}
				},
				{
					"id": 518,
					"name": "src",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "An image URL or a <Code>File</Code> to generate a preview for"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "File"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						525,
						528,
						524,
						522,
						523,
						520,
						526,
						527,
						529,
						521,
						519,
						518
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
					"line": 12,
					"character": 17
				}
			]
		},
		{
			"id": 3171,
			"name": "TieredDropdownProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3184,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3185,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3186,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterHide"
					}
				},
				{
					"id": 3187,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3188,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3189,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.afterShow"
					}
				},
				{
					"id": 3190,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeHide"
					}
				},
				{
					"id": 3191,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.beforeShow"
					}
				},
				{
					"id": 3180,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 152,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.block"
					}
				},
				{
					"id": 3176,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 32,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactText"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 3177,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3182,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 153,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 3183,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 3216,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.i18nScope"
					}
				},
				{
					"id": 3234,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "string icons have been deprecated, please pass a component from `@procore/core-icons`\nThe icon to display on the left side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.icon"
					}
				},
				{
					"id": 3235,
					"name": "iconRight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the right side of the label"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.iconRight"
					}
				},
				{
					"id": 3231,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loading"
					}
				},
				{
					"id": 3223,
					"name": "loadingMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 95,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.loadingMore"
					}
				},
				{
					"id": 3206,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 113,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3207,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3208,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
									},
									"parameters": [
										{
											"id": 3209,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLButtonElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onClear"
					}
				},
				{
					"id": 3202,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3203,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3204,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the selection menu is scrolled to the bottom. Can be\ncombined with <Code>loadingMore</Code>\nfor an async infinite scrolling menu.\n<CodeBlock>{'(event) =>'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 3205,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onScrollBottom"
					}
				},
				{
					"id": 3198,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3199,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3200,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a search bar to the select."
									},
									"parameters": [
										{
											"id": 3201,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLInputElement"
													}
												],
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onSearch"
					}
				},
				{
					"id": 3172,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3173,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 3174,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"
											},
											"parameters": [
												{
													"id": 3175,
													"name": "selection",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TierSelection"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 3181,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flat array of tier objects, this array is used as data for the component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.options"
					}
				},
				{
					"id": 3232,
					"name": "selectableTiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If true, any tier is selectable. If false, only leaf nodes are selectable",
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectableTiers"
					}
				},
				{
					"id": 3233,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The size of the button"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Button/Button.types.ts",
							"line": 42,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "TriggerProps.size"
					}
				},
				{
					"id": 3179,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tabIndex"
					}
				},
				{
					"id": 3178,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 34,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 708,
						"name": "ButtonVariant"
					}
				},
				{
					"id": 3210,
					"name": "getGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3211,
							"name": "getGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3212,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getGroupId"
					}
				},
				{
					"id": 3192,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3193,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.Id'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3194,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getId"
					}
				},
				{
					"id": 3195,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3196,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => string'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.Label'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3197,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getLabel"
					}
				},
				{
					"id": 3213,
					"name": "getNextGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3214,
							"name": "getNextGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3215,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getNextGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getNextGroupId"
					}
				},
				{
					"id": 3220,
					"name": "isLeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3221,
							"name": "isLeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3222,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isLeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isLeaf"
					}
				},
				{
					"id": 3217,
					"name": "isTierDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3218,
							"name": "isTierDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3219,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isTierDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isTierDisabled"
					}
				},
				{
					"id": 3224,
					"name": "onNavigate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3225,
							"name": "onNavigate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3226,
									"name": "nextGroupId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Id"
									}
								},
								{
									"id": 3227,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onNavigate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onNavigate"
					}
				},
				{
					"id": 3228,
					"name": "onQuickCreate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 131,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3229,
							"name": "onQuickCreate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3230,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.onQuickCreate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.onQuickCreate"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3184,
						3187,
						3190,
						3191,
						3180,
						3176,
						3177,
						3182,
						3183,
						3216,
						3234,
						3235,
						3231,
						3223,
						3206,
						3202,
						3198,
						3172,
						3181,
						3232,
						3233,
						3179,
						3178
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3210,
						3192,
						3195,
						3213,
						3220,
						3217,
						3224,
						3228
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
					"line": 28,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 534,
							"name": "TieredSelectProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onChange"
								},
								{
									"type": "literal",
									"value": "getValueString"
								},
								{
									"type": "literal",
									"value": "value"
								}
							]
						}
					],
					"name": "Omit"
				},
				{
					"type": "reference",
					"name": "TriggerProps"
				}
			]
		},
		{
			"id": 534,
			"name": "TieredSelectProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 547,
					"name": "afterHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 35,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 548,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 549,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.afterHide"
					}
				},
				{
					"id": 550,
					"name": "afterShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 551,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 552,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.afterShow"
					}
				},
				{
					"id": 553,
					"name": "beforeHide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.beforeHide"
					}
				},
				{
					"id": 554,
					"name": "beforeShow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 38,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "BeforeCallback"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.beforeShow"
					}
				},
				{
					"id": 535,
					"name": "block",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 152,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "Partial.block"
					}
				},
				{
					"id": 536,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 153,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 537,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 154,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 538,
					"name": "getValueString",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 155,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "GetValueString"
					}
				},
				{
					"id": 579,
					"name": "i18nScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The i18n key to use for the tiered select's configurable strings. Defaults to using the core library's default strings."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 85,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.i18nScope"
					}
				},
				{
					"id": 539,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 156,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 586,
					"name": "loadingMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to display a loading indicator as the last item of the list. Can\nbe used with <Code>onScrollBottom</Code> or <Code>onSearch</Code>{' '}\n(empty <Code>options</Code> during search async call) to indicate the\nloading of new items."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 95,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.loadingMore"
					}
				},
				{
					"id": 569,
					"name": "onClear",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 113,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 570,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 571,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "It is possible for this component to have an empty value\n(render placeholder). Enables the x icon."
									},
									"parameters": [
										{
											"id": 572,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLButtonElement"
													},
													{
														"type": "reference",
														"name": "MouseEvent"
													}
												],
												"name": "MouseEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onClear"
					}
				},
				{
					"id": 565,
					"name": "onScrollBottom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 139,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 566,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 567,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the selection menu is scrolled to the bottom. Can be\ncombined with <Code>loadingMore</Code>\nfor an async infinite scrolling menu.\n<CodeBlock>{'(event) =>'}</CodeBlock>"
									},
									"parameters": [
										{
											"id": 568,
											"name": "e",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLDivElement"
													},
													{
														"type": "reference",
														"name": "UIEvent"
													}
												],
												"name": "UIEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onScrollBottom"
					}
				},
				{
					"id": 561,
					"name": "onSearch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 146,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 562,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 563,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a search bar to the select."
									},
									"parameters": [
										{
											"id": 564,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLInputElement"
													}
												],
												"name": "ChangeEvent"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onSearch"
					}
				},
				{
					"id": 540,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flat array of tier objects, this array is used as data for the component"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 160,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 541,
					"name": "selectableTiers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If true, any tier is selectable. If false, only leaf nodes are selectable",
						"tags": [
							{
								"tag": "default",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 166,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 543,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 147,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.tabIndex"
					}
				},
				{
					"id": 542,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flat array of tier objects that represents the selected value"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 171,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 573,
					"name": "getGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 46,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 574,
							"name": "getGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.GroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 575,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getGroupId"
					}
				},
				{
					"id": 555,
					"name": "getId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 556,
							"name": "getId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.Id'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 557,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getId"
					}
				},
				{
					"id": 558,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 559,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => string'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.Label'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 560,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getLabel"
					}
				},
				{
					"id": 576,
					"name": "getNextGroupId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 67,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 577,
							"name": "getNextGroupId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for using a custom <Code>tier</Code> shape\n<CodeBlock>{'(tier: any) => Id'}</CodeBlock>\nDefaults to <CodeBlock>{'(tier: any) => tier.NextGroupId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 578,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Id"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.getNextGroupId"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.getNextGroupId"
					}
				},
				{
					"id": 583,
					"name": "isLeaf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 87,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 584,
							"name": "isLeaf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 585,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.isLeaf"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.isLeaf"
					}
				},
				{
					"id": 580,
					"name": "isTierDisabled",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 86,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 581,
							"name": "isTierDisabled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 582,
									"name": "tier",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.isTierDisabled"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.isTierDisabled"
					}
				},
				{
					"id": 544,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 107,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 545,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "<div>\n Callback for selecting an item from the tiered select. Returns the{' '}\n <Code>Selection</Code> object from the <Code>Menu</Code> api, along\n with the updated <Code>value</Code>\n</div>\n<CodeBlock>\n {'(Selection: { event, item, group }, value) =>'}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 546,
									"name": "selection",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TierSelection"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.onChange"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onChange"
					}
				},
				{
					"id": 587,
					"name": "onNavigate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 123,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 588,
							"name": "onNavigate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for when navigation occurs. Triggered by the left and right\narrow keys, or clicking a navigable item. Returns the id of the next\ngroup that will be navigated to, and the updated path.\n<CodeBlock>\n {'(nextGroupId: string | number | undefined, path: any[]) => '}\n</CodeBlock>"
							},
							"parameters": [
								{
									"id": 589,
									"name": "nextGroupId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Id"
									}
								},
								{
									"id": 590,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.onNavigate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onNavigate"
					}
				},
				{
					"id": 591,
					"name": "onQuickCreate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
							"line": 131,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 592,
							"name": "onQuickCreate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pass this callback when a quick create experience is desired. Called\nwhen the \"create\" button in quick create mode is clicked. Returns the\nvalue of the quick create input.\n<CodeBlock>{'(string) =>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 593,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Partial.onQuickCreate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Partial.onQuickCreate"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						547,
						550,
						553,
						554,
						535,
						536,
						537,
						538,
						579,
						539,
						586,
						569,
						565,
						561,
						540,
						541,
						543,
						542
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						573,
						555,
						558,
						576,
						583,
						580,
						544,
						587,
						591
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TieredSelect/TieredSelect.types.ts",
					"line": 149,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "TieredSelectApi"
								},
								{
									"type": "literal",
									"value": "getValueString"
								}
							],
							"name": "Omit"
						}
					],
					"name": "Partial"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "Div"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "onSelect"
								},
								{
									"type": "literal",
									"value": "onChange"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 3246,
			"name": "TileCommonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3248,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3249,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3247,
					"name": "orientation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "portrait"
							},
							{
								"type": "literal",
								"value": "landscape"
							}
						]
					}
				},
				{
					"id": 3250,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3248,
						3249,
						3247,
						3250
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 10,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 3251,
					"name": "InteractableTileProps"
				},
				{
					"type": "reference",
					"id": 3257,
					"name": "LinkTileProps"
				},
				{
					"type": "reference",
					"id": 3263,
					"name": "SelectableTileProps"
				}
			]
		},
		{
			"id": 3276,
			"name": "ToastProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3278,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3279,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3280,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3277,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Controls icon and background color"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Toast/Toast.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3275,
						"name": "ToastVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3278,
						3279,
						3280,
						3277
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Toast/Toast.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3281,
			"name": "ToggleButtonProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3283,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The icon to display on the left side of the label. This should be an\nicon from <Code>@procore/core-icons</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ToggleButton/ToggleButton.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					}
				},
				{
					"id": 3282,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set the current value of the toggle button",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ToggleButton/ToggleButton.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3284,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The toggle button size"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/ToggleButton/ToggleButton.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 707,
						"name": "ButtonSizes"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3283,
						3282,
						3284
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/ToggleButton/ToggleButton.types.ts",
					"line": 4,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ButtonAttributes"
				}
			]
		},
		{
			"id": 3285,
			"name": "TokenProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3286,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disables the token"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Token/Token.types.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3288,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Token/Token.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3287,
					"name": "focused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Token/Token.types.ts",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3289,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nThe `'disabled'` and `'focused'` variants have been deprecated and will be\nremoved in a future version. Please use the `disabled` and `focused` boolean\nprops instead.\n\n**Before**\n\n`<Token variant=\"disabled|focused\" />`\n\n**After**\n\n`<Token disabled focused />`\n"
							},
							{
								"tag": "deprecatedsince",
								"text": "10.20.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Token/Token.types.ts",
							"line": 27,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "disabled"
							},
							{
								"type": "literal",
								"value": "icon"
							},
							{
								"type": "literal",
								"value": "focused"
							},
							{
								"type": "literal",
								"value": "standard"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3286,
						3288,
						3287,
						3289
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Token/Token.types.ts",
					"line": 3,
					"character": 17
				}
			]
		},
		{
			"id": 3845,
			"name": "ToolHeaderBadgeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3847,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3848,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3849,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3846,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Controls the background/border/text colors of the Badge's pill"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ToolHeader/ToolHeader.types.ts",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3844,
						"name": "ToolHeaderBadgeVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3847,
						3848,
						3849,
						3846
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ToolHeader/ToolHeader.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3850,
			"name": "ToolHeaderIconProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3852,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3853,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3851,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "this will take an icon from '@procore/core-icons/dist' package\nin the near future. See Icon List page for further details\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/layouts/ToolHeader/ToolHeader.types.ts",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3854,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3852,
						3853,
						3851,
						3854
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ToolHeader/ToolHeader.types.ts",
					"line": 12,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3298,
			"name": "TooltipContentProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3300,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3301,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3299,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 3302,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3300,
						3301,
						3299,
						3302
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
					"line": 5,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 3303,
			"name": "TooltipProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3310,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3311,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3304,
					"name": "hideDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3305,
					"name": "initialIsVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to show the overlay on initial render"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3306,
					"name": "overlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tip we want to display"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 20,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 3307,
					"name": "placement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines the position of the arrow"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 25,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Placement"
					}
				},
				{
					"id": 3308,
					"name": "showDelay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 26,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3312,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3309,
					"name": "trigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The event to trigger the overlay"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "TriggerVariant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3310,
						3311,
						3304,
						3305,
						3306,
						3307,
						3308,
						3312,
						3309
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tooltip/Tooltip.types.ts",
					"line": 9,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 1268,
			"name": "TraditionalBaseFieldProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1270,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Customize the input component, either a single component for all views\nor an object with the keys of the views to render on that particular\nview. This input component will receive the <Code>field</Code> prop.\nIf using TypeScript, these components will need to extend a specific\ntype from Core React, read more about the{' '}\n<a href=\"#typescript-and-as-prop-components\">props per view</a>.\n<br />\n<br />\nOne of:\n<br />\n<Code>ReactComponent</Code>or\n<Code>\n{\n   '{ read: ReactComponent, create: ReactComponent, update: ReactComponent }'\n}\n</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1239,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1288,
										"name": "Value"
									},
									{
										"type": "reference",
										"id": 1289,
										"name": "ComponentProps"
									}
								],
								"name": "ComponentWithFieldProp"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1271,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1272,
											"name": "create",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1288,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1289,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1273,
											"name": "read",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1288,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1289,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										},
										{
											"id": 1274,
											"name": "update",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1239,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1288,
														"name": "Value"
													},
													{
														"type": "reference",
														"id": 1289,
														"name": "ComponentProps"
													}
												],
												"name": "ComponentWithFieldProp"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1272,
												1273,
												1274
											]
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.as"
					}
				},
				{
					"id": 1275,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A subcomponent to render on a particular view.\n<br />\n<br />\nOne or all of:\n<br />\n<Code>Form.X.Create, Form.X.Read, Form.X.Update</Code>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 162,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReactNode"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1276,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 1277,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1278,
													"name": "field",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1220,
														"typeArguments": [
															{
																"type": "reference",
																"id": 1288,
																"name": "Value"
															}
														],
														"name": "FieldAPI"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactNode"
											}
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.children"
					}
				},
				{
					"id": 1269,
					"name": "colWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 220,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 12
							}
						]
					}
				},
				{
					"id": 1286,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 175,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.data-qa"
					}
				},
				{
					"id": 1279,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify disabled. Field disabled replaces the overall Form disabled state."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 180,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabled"
					}
				},
				{
					"id": 1280,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 181,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.error"
					}
				},
				{
					"id": 1283,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 182,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.label"
					}
				},
				{
					"id": 1281,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Key path in store. Accepts <Code>bracket[notation]</Code> or{' '}\n<Code>dot.notation</Code>."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.name"
					}
				},
				{
					"id": 1282,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The required asterisk if not using Yup <Code>required</Code>\n<CodeBlock>\n{`<Form\nvalidationSchema={Yup.object().shape({\n input_name: Yup.mixed().required(),\n})}>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 199,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.required"
					}
				},
				{
					"id": 1287,
					"name": "tooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 200,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.tooltip"
					}
				},
				{
					"id": 1285,
					"name": "validate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The validate function from Formik for single field validation.\n<CodeBlock>\n {`(value: Value = any) => undefined | string | Promise<Value>`}\n</CodeBlock>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 208,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "FieldValidator"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.validate"
					}
				},
				{
					"id": 1284,
					"name": "view",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines show or edit state of field."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 213,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 1197,
						"name": "View"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.view"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1270,
						1275,
						1269,
						1286,
						1279,
						1280,
						1283,
						1281,
						1282,
						1287,
						1285,
						1284
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 216,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 1288,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1289,
					"name": "ComponentProps",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 1235,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1288,
								"name": "Value"
							}
						],
						"name": "ValueComponentProps"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 1245,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1288,
									"name": "Value"
								},
								{
									"type": "reference",
									"id": 1289,
									"name": "ComponentProps"
								}
							],
							"name": "BaseFieldProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "colWidth"
								},
								{
									"type": "literal",
									"value": "colStart"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 3350,
			"name": "TreeNodeAPI",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3392,
					"name": "isFileLimitReached",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3393,
					"name": "isTreeFocused",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 60,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3351,
					"name": "nodes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 44,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intersection",
							"types": [
								{
									"type": "reference",
									"id": 3395,
									"name": "T"
								},
								{
									"type": "reference",
									"id": 3321,
									"name": "LevelWise"
								}
							]
						}
					}
				},
				{
					"id": 3391,
					"name": "selectionLimit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3394,
					"name": "treeContainer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 61,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLDivElement"
					}
				},
				{
					"id": 3352,
					"name": "getIcon",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3353,
							"name": "getIcon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3354,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 3355,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3356,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3357,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 3358,
					"name": "getType",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3359,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3360,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeType"
							}
						}
					]
				},
				{
					"id": 3385,
					"name": "handleExpansion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3386,
							"name": "handleExpansion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3387,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3382,
					"name": "handleSelection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3383,
							"name": "handleSelection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3384,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3376,
					"name": "highlight",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3377,
							"name": "highlight",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3378,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3361,
					"name": "isExpandable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3362,
							"name": "isExpandable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3363,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3373,
					"name": "isExpanded",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3374,
							"name": "isExpanded",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3375,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3379,
					"name": "isHighlighted",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3380,
							"name": "isHighlighted",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3381,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3370,
					"name": "isLoading",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3371,
							"name": "isLoading",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3372,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3364,
					"name": "isSelectable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3365,
							"name": "isSelectable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3366,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3367,
					"name": "isSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3368,
							"name": "isSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3369,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3395,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3388,
					"name": "rowRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3389,
							"name": "rowRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3390,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3424,
										"typeArguments": [
											{
												"type": "reference",
												"id": 3395,
												"name": "T"
											}
										],
										"name": "TreeRowProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3392,
						3393,
						3351,
						3391,
						3394
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3352,
						3355,
						3358,
						3385,
						3382,
						3376,
						3361,
						3373,
						3379,
						3370,
						3364,
						3367,
						3388
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 43,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3395,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					},
					"default": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					}
				}
			]
		},
		{
			"id": 3415,
			"name": "TreeNodeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3416,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 77,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3350,
						"typeArguments": [
							{
								"type": "reference",
								"id": 3314,
								"name": "Node"
							}
						],
						"name": "TreeNodeAPI"
					},
					"overwrites": {
						"type": "reference",
						"name": "ListChildComponentProps.data"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3416
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 76,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ListChildComponentProps"
				}
			]
		},
		{
			"id": 3465,
			"name": "TreeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3497,
					"name": "autoExpandParent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to expand parent node when a child node is expanded or selected"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3467,
					"name": "expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of keys of initially expanded nodes"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 106,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "id"
							},
							"objectType": {
								"type": "reference",
								"id": 3510,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 3495,
					"name": "maxVisibleNodes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Number of visible nodes. Helps fix performance bottlenecks in large dataset"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 178,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3494,
					"name": "multiple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Allows selection of multiple nodes"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 173,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3466,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 102,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3511,
						"name": "P"
					}
				},
				{
					"id": 3468,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of keys of initially selected nodes"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 111,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "id"
							},
							"objectType": {
								"type": "reference",
								"id": 3510,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 3469,
					"name": "selectionLimit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Number of nodes that can be selected"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 116,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3496,
					"name": "visibleHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Height of the list. Helps fix performance bottlenecks in large dataset."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 183,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3473,
					"name": "getChildren",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3474,
							"name": "getChildren",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Should return an array of children nodes.\n<CodeBlock>{'(node: Node): Node[]'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3475,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 3510,
									"name": "T"
								}
							}
						}
					]
				},
				{
					"id": 3476,
					"name": "getIcon",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3477,
							"name": "getIcon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return{' '}\n<Code>Icon</Code> component\n<CodeBlock>{'(node: Node): React.ReactNode'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3478,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				},
				{
					"id": 3479,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3480,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return{' '}\n<Code>label</Code> for row\n<CodeBlock>{'(node: Node): string'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3481,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 3482,
					"name": "getParentId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3483,
							"name": "getParentId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return parent{' '}\n<Code>Node</Code>\n<CodeBlock>{'(node: Node): NodeId'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3484,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3313,
								"name": "NodeId"
							}
						}
					]
				},
				{
					"id": 3470,
					"name": "getRoot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3471,
							"name": "getRoot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function should return parent <Code>Root Node</Code>\n<CodeBlock>{'(): Node'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3472,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3511,
										"name": "P"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3510,
								"name": "T"
							}
						}
					]
				},
				{
					"id": 3485,
					"name": "getType",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3486,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function will be executed on each node. Should return{' '}\n<Code>'branch'</Code> or <Code>'leaf'</Code>\n<CodeBlock>{'(node: Node): NodeType'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3487,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeType"
							}
						}
					]
				},
				{
					"id": 3488,
					"name": "isExpandable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3489,
							"name": "isExpandable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function of whether to enable tree node expansion/collapsing.\n<CodeBlock>{'(node: Node): boolean'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3490,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3491,
					"name": "isSelectable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3492,
							"name": "isSelectable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Function of whether to enable tree node selection.\n<CodeBlock>{'(node: Node): boolean'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3493,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 3501,
					"name": "onCollapse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3502,
							"name": "onCollapse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers when current node collapse\n<CodeBlock>{'(node: Node): void'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3503,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3504,
					"name": "onExpand",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3505,
							"name": "onExpand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers when current node expand\n<CodeBlock>{'(node: Node): Promise<void>'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3506,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3510,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 3498,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3499,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback return currently selected array of nodes.\n<CodeBlock>{'(nodes: Node[]): void'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3500,
									"name": "nodes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 3510,
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3507,
					"name": "rowRenderer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 3508,
							"name": "rowRenderer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Callback for rendering tree nodes\n<CodeBlock>{'(props: TreeRowProps): React.ReactNode'}</CodeBlock>"
							},
							"parameters": [
								{
									"id": 3509,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3424,
										"typeArguments": [
											{
												"type": "reference",
												"id": 3510,
												"name": "T"
											}
										],
										"name": "TreeRowProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3497,
						3467,
						3495,
						3494,
						3466,
						3468,
						3469,
						3496
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3473,
						3476,
						3479,
						3482,
						3470,
						3485,
						3488,
						3491,
						3501,
						3504,
						3498,
						3507
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 97,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3510,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					},
					"default": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					}
				},
				{
					"id": 3511,
					"name": "P",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3396,
						"typeArguments": [
							{
								"type": "reference",
								"id": 3510,
								"name": "T"
							}
						],
						"name": "CustomDataType"
					},
					"default": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3510,
							"name": "T"
						}
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivAttributes"
						},
						{
							"type": "literal",
							"value": "onSelect"
						}
					],
					"name": "Omit"
				},
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "FixedSizeListProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "innerElementType"
								},
								{
									"type": "literal",
									"value": "outerElementType"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 3400,
			"name": "TreeRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3413,
					"name": "rootEl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						]
					}
				},
				{
					"id": 3404,
					"name": "setExpanded",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3405,
							"name": "setExpanded",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3406,
									"name": "expanded",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 3414,
												"name": "T"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 3414,
													"name": "T"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3401,
					"name": "setSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 69,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3402,
							"name": "setSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3403,
									"name": "selected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 3414,
												"name": "T"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 3414,
													"name": "T"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3410,
					"name": "toggleExpanded",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3411,
							"name": "toggleExpanded",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3412,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3414,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3407,
					"name": "toggleSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3408,
							"name": "toggleSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3409,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3414,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3413
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3404,
						3401,
						3410,
						3407
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 68,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3414,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					},
					"default": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					}
				}
			]
		},
		{
			"id": 3558,
			"name": "TreeRowContainerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3562,
					"name": "isExpandable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 236,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3563,
					"name": "isFileLimitReached",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 237,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3559,
					"name": "isHighlighted",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 233,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3561,
					"name": "isSelectable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 235,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3560,
					"name": "isSelected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 234,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3564,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 238,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3562,
						3563,
						3559,
						3561,
						3560,
						3564
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 232,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "DivAttributes"
						},
						{
							"type": "literal",
							"value": "color"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 3417,
			"name": "TreeRowOverlayProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3420,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 83,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3421,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 3422,
									"name": "key",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
											"line": 83,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3423,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
											"line": 83,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3422,
										3423
									]
								}
							]
						}
					}
				},
				{
					"id": 3418,
					"name": "overlayRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 81,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				},
				{
					"id": 3419,
					"name": "targetRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 82,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "RefObject"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3420,
						3418,
						3419
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 80,
					"character": 17
				}
			]
		},
		{
			"id": 3424,
			"name": "TreeRowProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3463,
					"name": "isFileLimitReached",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 59,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isFileLimitReached"
					}
				},
				{
					"id": 3427,
					"name": "isMouseOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 93,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3425,
					"name": "node",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 91,
							"character": 2
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 3464,
								"name": "T"
							},
							{
								"type": "reference",
								"id": 3321,
								"name": "LevelWise"
							}
						]
					}
				},
				{
					"id": 3462,
					"name": "selectionLimit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.selectionLimit"
					}
				},
				{
					"id": 3426,
					"name": "shouldShowTooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 92,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3428,
					"name": "treeContainer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 94,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLDivElement"
					},
					"overwrites": {
						"type": "reference",
						"name": "Omit.treeContainer"
					}
				},
				{
					"id": 3441,
					"name": "getIcon",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3442,
							"name": "getIcon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3443,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getIcon"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getIcon"
					}
				},
				{
					"id": 3429,
					"name": "getLabel",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3430,
							"name": "getLabel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3431,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getLabel"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getLabel"
					}
				},
				{
					"id": 3432,
					"name": "getType",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3433,
							"name": "getType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3434,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeType"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.getType"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.getType"
					}
				},
				{
					"id": 3459,
					"name": "handleExpansion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3460,
							"name": "handleExpansion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3461,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.handleExpansion"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.handleExpansion"
					}
				},
				{
					"id": 3456,
					"name": "handleSelection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3457,
							"name": "handleSelection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3458,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.handleSelection"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.handleSelection"
					}
				},
				{
					"id": 3438,
					"name": "isExpandable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3439,
							"name": "isExpandable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3440,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isExpandable"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isExpandable"
					}
				},
				{
					"id": 3450,
					"name": "isExpanded",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3451,
							"name": "isExpanded",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3452,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isExpanded"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isExpanded"
					}
				},
				{
					"id": 3453,
					"name": "isHighlighted",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3454,
							"name": "isHighlighted",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3455,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isHighlighted"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isHighlighted"
					}
				},
				{
					"id": 3447,
					"name": "isLoading",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3448,
							"name": "isLoading",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3449,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isLoading"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isLoading"
					}
				},
				{
					"id": 3435,
					"name": "isSelectable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3436,
							"name": "isSelectable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3437,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isSelectable"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isSelectable"
					}
				},
				{
					"id": 3444,
					"name": "isSelected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3445,
							"name": "isSelected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3446,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Omit.isSelected"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.isSelected"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3463,
						3427,
						3425,
						3462,
						3426,
						3428
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3441,
						3429,
						3432,
						3459,
						3456,
						3438,
						3450,
						3453,
						3447,
						3435,
						3444
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 86,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3464,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					},
					"default": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 3350,
							"name": "TreeNodeAPI"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "rowRenderer"
								},
								{
									"type": "literal",
									"value": "nodes"
								},
								{
									"type": "literal",
									"value": "highlight"
								},
								{
									"type": "literal",
									"value": "isTreeFocused"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 3547,
			"name": "TreeRowTooltipProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3555,
					"name": "fileName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 227,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3552,
					"name": "isFileLimitReached",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 224,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3548,
					"name": "isHighlighted",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 220,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3554,
					"name": "isMouseOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 226,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3550,
					"name": "isSelectable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 222,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3549,
					"name": "isSelected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 221,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3556,
					"name": "nodeType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 228,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "NodeType"
					}
				},
				{
					"id": 3551,
					"name": "selectionLimit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 223,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3553,
					"name": "shouldShowTooltip",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 225,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3557,
					"name": "treeContainer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 229,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLDivElement"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3555,
						3552,
						3548,
						3554,
						3550,
						3549,
						3556,
						3551,
						3553,
						3557
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 219,
					"character": 17
				}
			]
		},
		{
			"id": 1141,
			"name": "TreeSourceRef",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1142,
					"name": "setExpandedNodes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 4,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1143,
							"name": "setExpandedNodes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1144,
									"name": "expanded",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 3313,
											"name": "NodeId"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1145,
					"name": "setValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
							"line": 5,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 1146,
							"name": "setValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 1147,
									"name": "Node",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									},
									"default": {
										"type": "reference",
										"id": 3314,
										"name": "Node"
									}
								}
							],
							"parameters": [
								{
									"id": 1148,
									"name": "nodes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1147,
											"name": "Node"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1142,
						1145
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/TreeSource/TreeSource.types.ts",
					"line": 3,
					"character": 17
				}
			]
		},
		{
			"id": 3567,
			"name": "TypeaheadProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3568,
					"name": "data-qa",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typeahead/Typeahead.types.ts",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 3569,
					"name": "onChange",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typeahead/Typeahead.types.ts",
							"line": 13,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3570,
							"name": "onChange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3571,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3572,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3565,
										"name": "TypeaheadChangeEvent"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3568
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3569
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typeahead/Typeahead.types.ts",
					"line": 11,
					"character": 17
				}
			]
		},
		{
			"id": 3575,
			"name": "TypographyProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3577,
					"name": "as",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<span>\n Change the HTML tag. This{' '}\n <Link href=\"https://styled-components.com/docs/api#as-polymorphic-prop\">\n   prop is from styled-components\n </Link>\n .<em>WARNING</em>: If using TypeScript, it will not switch types and\n some props may error. You can add <Code>// @ts-expect-error</Code>.\n See{' '}\n <Link href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30117\">\n   styled-components issue\n </Link>\n .\n</span>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "ComponentType"
							}
						]
					}
				},
				{
					"id": 3576,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "<span>\n When children are a string or multiple elements, they will be wrapped\n by a <Code>span</Code>. When it is a single element, classnames will\n be added to it instead\n</span>"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"overwrites": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 3582,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 3578,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<span>\n Changes font color, can be any of the{' '}\n <Link to=\"/web/style/colors/#hsl-palette\">HSL Palette</Link> css\n strings\n</span>",
						"tags": [
							{
								"tag": "default",
								"text": "'gray15'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 43,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "Color"
					}
				},
				{
					"id": 3579,
					"name": "intent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Changes the size of the font"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 48,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3573,
						"name": "Intent"
					}
				},
				{
					"id": 3580,
					"name": "italic",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Applies `font-style: italic` if enabled"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 53,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3583,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				},
				{
					"id": 3581,
					"name": "weight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Changes font weight if it is supported in the design system"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
							"line": 58,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3574,
						"name": "Weight"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3577,
						3576,
						3582,
						3578,
						3579,
						3580,
						3583,
						3581
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
					"line": 8,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 2771,
			"name": "UseNumberFormatConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2772,
					"name": "decimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The maximum number of fraction digits to use. Possible values range from 0 to 14. Setting to true will result in the maximum size, setting to false will allow 0 decimals, whole numbers only.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "true\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 33,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": 0
							},
							{
								"type": "literal",
								"value": 1
							},
							{
								"type": "literal",
								"value": 2
							},
							{
								"type": "literal",
								"value": 3
							},
							{
								"type": "literal",
								"value": 4
							},
							{
								"type": "literal",
								"value": 5
							},
							{
								"type": "literal",
								"value": 6
							},
							{
								"type": "literal",
								"value": 7
							},
							{
								"type": "literal",
								"value": 8
							},
							{
								"type": "literal",
								"value": 9
							},
							{
								"type": "literal",
								"value": 10
							},
							{
								"type": "literal",
								"value": 11
							},
							{
								"type": "literal",
								"value": 12
							},
							{
								"type": "literal",
								"value": 13
							},
							{
								"type": "literal",
								"value": 14
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.decimalScale"
					}
				},
				{
					"id": 2773,
					"name": "fillDecimalScale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "<Code>none</Code> prevents from adding zeros to match given\n<Code>decimalScale</Code>.<br /> <Code>always</Code> automatically adds\nzeros to match given\n<Code>decimalScale</Code>. <br />\n<Code>onBlur</Code> automatically adds zeros to match given{' '}\n<Code>decimalScale</Code> when input has lost focus.",
						"tags": [
							{
								"tag": "default",
								"text": "'none'\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 63,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2752,
						"name": "FillDecimalScaleVariant"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.fillDecimalScale"
					}
				},
				{
					"id": 2774,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A string with a BCP 47 language tag or an array of such strings which specifies number formatting.",
						"tags": [
							{
								"tag": "defaultvalue",
								"text": "en-US\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 68,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 2746,
						"name": "Locale"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Pick.locale"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2772,
						2773,
						2774
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 93,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 2757,
							"name": "NumberInputProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "decimalScale"
								},
								{
									"type": "literal",
									"value": "fillDecimalScale"
								},
								{
									"type": "literal",
									"value": "locale"
								}
							]
						}
					],
					"name": "Pick"
				}
			]
		},
		{
			"id": 3323,
			"name": "UseTreeProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 3337,
					"name": "autoExpandParent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 36,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3325,
					"name": "expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 29,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "id"
							},
							"objectType": {
								"type": "reference",
								"id": 3348,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 3338,
					"name": "multiple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 37,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 3324,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 28,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"id": 3349,
						"name": "P"
					}
				},
				{
					"id": 3326,
					"name": "selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 30,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "literal",
								"value": "id"
							},
							"objectType": {
								"type": "reference",
								"id": 3348,
								"name": "T"
							}
						}
					}
				},
				{
					"id": 3327,
					"name": "selectionLimit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
							"line": 31,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 3331,
					"name": "getChildren",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3332,
							"name": "getChildren",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3333,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3348,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 3348,
									"name": "T"
								}
							}
						}
					]
				},
				{
					"id": 3334,
					"name": "getParentId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3335,
							"name": "getParentId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3336,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3348,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3313,
								"name": "NodeId"
							}
						}
					]
				},
				{
					"id": 3328,
					"name": "getRoot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3329,
							"name": "getRoot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3330,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3349,
										"name": "P"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 3348,
								"name": "T"
							}
						}
					]
				},
				{
					"id": 3342,
					"name": "onCollapse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3343,
							"name": "onCollapse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3344,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3348,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 3345,
					"name": "onExpand",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3346,
							"name": "onExpand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3347,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3348,
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 3339,
					"name": "onSelect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 3340,
							"name": "onSelect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3341,
									"name": "nodes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 3348,
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						3337,
						3325,
						3338,
						3324,
						3326,
						3327
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						3331,
						3334,
						3328,
						3342,
						3345,
						3339
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 24,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 3348,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					},
					"default": {
						"type": "reference",
						"id": 3314,
						"name": "Node"
					}
				},
				{
					"id": 3349,
					"name": "P",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 3396,
						"typeArguments": [
							{
								"type": "reference",
								"id": 3348,
								"name": "T"
							}
						],
						"name": "CustomDataType"
					},
					"default": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 3348,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 2753,
			"name": "ValueChange",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2755,
					"name": "parsedNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 2754,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2755,
						2754
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 14,
					"character": 17
				}
			]
		},
		{
			"id": 666,
			"name": "ViewAllModalProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 670,
					"name": "isOpen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 72,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 667,
					"name": "items",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 70,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 645,
							"name": "AvatarStackItem"
						}
					}
				},
				{
					"id": 671,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 73,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 668,
					"name": "onClose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
							"line": 71,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 669,
							"name": "onClose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						670,
						667,
						671
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						668
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 69,
					"character": 17
				}
			]
		},
		{
			"id": 85,
			"name": "WeekProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 86,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 87,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 88,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						86,
						87,
						88
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 93,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 81,
			"name": "WeekdaysProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 82,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Instead of using the default children, you can pass in your own."
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 40,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 618,
						"name": "Props.children"
					}
				},
				{
					"id": 83,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional classNames"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 45,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 619,
						"name": "Props.className"
					}
				},
				{
					"id": 84,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Additional CSS styles"
					},
					"sources": [
						{
							"fileName": "packages/core-react/src/utils/types.ts",
							"line": 50,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 620,
						"name": "Props.style"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						82,
						83,
						84
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Calendar/Calendar.types.ts",
					"line": 92,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 617,
					"name": "Props"
				}
			]
		},
		{
			"id": 896,
			"name": "Action",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 7,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 897,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 899,
									"name": "option",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 8,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"id": 928,
										"name": "FlyoutOption"
									}
								},
								{
									"id": 898,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "highlight"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										899,
										898
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 8,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 900,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 902,
									"name": "option",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 928,
										"name": "FlyoutOption"
									}
								},
								{
									"id": 901,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 9,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "expand"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										902,
										901
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 9,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 903,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 905,
									"name": "option",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 10,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 928,
										"name": "FlyoutOption"
									}
								},
								{
									"id": 904,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 10,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "collapse"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										905,
										904
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 10,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 906,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 907,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 11,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "close"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										907
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 11,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 908,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 909,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 12,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "open"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										909
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 12,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 910,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 912,
									"name": "isMouseOver",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 13,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 911,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 13,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "setMouseOver"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										912,
										911
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 13,
									"character": 4
								}
							]
						}
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 913,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 915,
									"name": "isFocused",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 14,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 914,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
											"line": 14,
											"character": 6
										}
									],
									"type": {
										"type": "literal",
										"value": "setFocused"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										915,
										914
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 14,
									"character": 4
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 621,
			"name": "AvatarSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Avatar/Avatar.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Size"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "md"
							},
							{
								"type": "literal",
								"value": "lg"
							},
							{
								"type": "literal",
								"value": "xl"
							}
						]
					}
				],
				"name": "Extract"
			}
		},
		{
			"id": 643,
			"name": "AvatarStackItemId",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 1,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					}
				]
			}
		},
		{
			"id": 644,
			"name": "AvatarStackItemType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "company"
					},
					{
						"type": "literal",
						"value": "user"
					},
					{
						"type": "literal",
						"value": "group"
					}
				]
			}
		},
		{
			"id": 654,
			"name": "AvatarStackSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/AvatarStack/AvatarStack.types.ts",
					"line": 41,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "md"
					},
					{
						"type": "literal",
						"value": "lg"
					}
				]
			}
		},
		{
			"id": 681,
			"name": "BannerIconVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "warning-triangle-o"
					},
					{
						"type": "literal",
						"value": "error-o"
					},
					{
						"type": "literal",
						"value": "info-circle-o"
					},
					{
						"type": "literal",
						"value": "check-circle"
					}
				]
			}
		},
		{
			"id": 680,
			"name": "BannerVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "deprecated",
						"text": "\"success\" variation is deprecated and will be removed in a future version. Instead, please consider using \"success\" variant of Toast component.\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Banner/Banner.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "action"
					},
					{
						"type": "literal",
						"value": "error"
					},
					{
						"type": "literal",
						"value": "info"
					},
					{
						"type": "literal",
						"value": "success"
					}
				]
			}
		},
		{
			"id": 3597,
			"name": "BoxSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 64,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 3595,
						"name": "MarginSize"
					},
					{
						"type": "reference",
						"id": 3596,
						"name": "PaddingSize"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					}
				]
			}
		},
		{
			"id": 707,
			"name": "ButtonSizes",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "sm"
					},
					{
						"type": "literal",
						"value": "md"
					},
					{
						"type": "literal",
						"value": "lg"
					}
				]
			}
		},
		{
			"id": 708,
			"name": "ButtonVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "primary"
					},
					{
						"type": "literal",
						"value": "secondary"
					},
					{
						"type": "literal",
						"value": "tertiary"
					}
				]
			}
		},
		{
			"id": 724,
			"name": "CardLevel",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "deprecated",
						"text": "\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Card/Card.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "10"
					},
					{
						"type": "literal",
						"value": "20"
					},
					{
						"type": "literal",
						"value": "30"
					},
					{
						"type": "literal",
						"value": "40"
					},
					{
						"type": "literal",
						"value": "50"
					}
				]
			}
		},
		{
			"id": 726,
			"name": "CardVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Card/Card.types.ts",
					"line": 10,
					"character": 12
				}
			],
			"type": {
				"type": "literal",
				"value": "hoverable"
			}
		},
		{
			"id": 2450,
			"name": "ChangeEvent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "HTMLInputElement"
					}
				],
				"name": "React.ChangeEvent"
			}
		},
		{
			"id": 1239,
			"name": "ComponentWithFieldProp",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 120,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 1243,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1244,
					"name": "Props",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 1235,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1243,
								"name": "Value"
							}
						],
						"name": "ValueComponentProps"
					}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1244,
								"name": "Props"
							}
						],
						"name": "React.FunctionComponent"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1244,
								"name": "Props"
							}
						],
						"name": "React.ForwardRefExoticComponent"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1240,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 126,
									"character": 5
								}
							],
							"signatures": [
								{
									"id": 1241,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1242,
											"name": "p",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1244,
												"name": "Props"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 3803,
			"name": "ControlVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ListPage/ListPage.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "align-right"
					},
					{
						"type": "literal",
						"value": "block"
					},
					{
						"type": "literal",
						"value": "search"
					}
				]
			}
		},
		{
			"id": 790,
			"name": "DateInputLocales",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 46,
					"character": 12
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "key",
				"parameterType": {
					"type": "reference",
					"name": "Locale"
				},
				"templateType": {
					"type": "reflection",
					"declaration": {
						"id": 791,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {},
						"children": [
							{
								"id": 792,
								"name": "delimiter",
								"kind": 1024,
								"kindString": "Property",
								"flags": {
									"isOptional": true
								},
								"sources": [
									{
										"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
										"line": 48,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"id": 793,
								"name": "segments",
								"kind": 1024,
								"kindString": "Property",
								"flags": {},
								"sources": [
									{
										"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
										"line": 49,
										"character": 4
									}
								],
								"type": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"id": 752,
											"name": "SegmentType"
										},
										{
											"type": "reference",
											"id": 752,
											"name": "SegmentType"
										},
										{
											"type": "reference",
											"id": 752,
											"name": "SegmentType"
										}
									]
								}
							}
						],
						"groups": [
							{
								"title": "Properties",
								"kind": 1024,
								"children": [
									792,
									793
								]
							}
						],
						"sources": [
							{
								"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
								"line": 47,
								"character": 19
							}
						]
					}
				}
			}
		},
		{
			"id": 3587,
			"name": "DeprecatedDisplay",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "deprecated",
						"text": "\n\nThese display modes are no longer valid, please use `direction` prop\n"
					},
					{
						"tag": "deprecatedsince",
						"text": "10.20.0\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 11,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "flex-column-reverse"
					},
					{
						"type": "literal",
						"value": "flex-column"
					},
					{
						"type": "literal",
						"value": "flex-inline-column-reverse"
					},
					{
						"type": "literal",
						"value": "flex-inline-column"
					},
					{
						"type": "literal",
						"value": "flex-inline-row-reverse"
					},
					{
						"type": "literal",
						"value": "flex-inline-row"
					},
					{
						"type": "literal",
						"value": "flex-row-reverse"
					},
					{
						"type": "literal",
						"value": "flex-row"
					}
				]
			}
		},
		{
			"id": 3588,
			"name": "Display",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 21,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 3587,
						"name": "DeprecatedDisplay"
					},
					{
						"type": "literal",
						"value": "block"
					},
					{
						"type": "literal",
						"value": "flex"
					},
					{
						"type": "literal",
						"value": "inline"
					},
					{
						"type": "literal",
						"value": "inline-block"
					},
					{
						"type": "literal",
						"value": "inline-flex"
					}
				]
			}
		},
		{
			"id": 1024,
			"name": "DropError",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 133,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1025,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 1029,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
									"line": 137,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "React.ReactNode"
							}
						},
						{
							"id": 1028,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
									"line": 136,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1027,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
									"line": 135,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1026,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
									"line": 134,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1023,
								"name": "DropErrorType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1029,
								1028,
								1027,
								1026
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
							"line": 133,
							"character": 24
						}
					]
				}
			}
		},
		{
			"id": 1023,
			"name": "DropErrorType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 131,
					"character": 12
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 1014,
							"name": "dropErrors"
						}
					}
				},
				"objectType": {
					"type": "query",
					"queryType": {
						"type": "reference",
						"id": 1014,
						"name": "dropErrors"
					}
				}
			}
		},
		{
			"id": 842,
			"name": "DropdownPlacement",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropdown/Dropdown.types.ts",
					"line": 10,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Placement"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "bottom"
							},
							{
								"type": "literal",
								"value": "bottom-left"
							},
							{
								"type": "literal",
								"value": "bottom-right"
							},
							{
								"type": "literal",
								"value": "top"
							},
							{
								"type": "literal",
								"value": "top-left"
							},
							{
								"type": "literal",
								"value": "top-right"
							}
						]
					}
				],
				"name": "Extract"
			}
		},
		{
			"id": 969,
			"name": "DropzoneFile",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 11,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1030,
			"name": "DropzoneHookState",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 140,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"name": "DropzoneState"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1031,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1035,
									"name": "disabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Enable/disable the dropzone",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 167,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1033,
									"name": "dragError",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Error message if dragged files is rejected\n<CodeBlock>\n {`{ type: DropErrorType, title: string, message: string }`}\n</CodeBlock>"
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 153,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1034,
									"name": "dropError",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Error message if dropped files is rejected\n<CodeBlock>\n {`{ type: DropErrorType, title: string, message: string }`}\n</CodeBlock>"
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 161,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1024,
										"name": "DropError"
									}
								},
								{
									"id": 1032,
									"name": "multiple",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Allow drag 'n' drop (or selection from the file dialog) of multiple files",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 145,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1036,
									"name": "dispatchDropError",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
											"line": 173,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 1037,
											"name": "dispatchDropError",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sets <Code>dropError</Code>.\n<CodeBlock>{'(error: DropErrorType) => void'}</CodeBlock>"
											},
											"parameters": [
												{
													"id": 1038,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1023,
														"name": "DropErrorType"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1035,
										1033,
										1034,
										1032
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										1036
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
									"line": 140,
									"character": 48
								}
							]
						}
					}
				]
			},
			"extendedBy": [
				{
					"type": "reference",
					"id": 1045,
					"name": "DropzoneProps"
				}
			]
		},
		{
			"id": 1040,
			"name": "DropzoneInputProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 195,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"name": "DropzoneInputPropsBase"
					},
					{
						"type": "reference",
						"name": "FrozenDropzoneInputProps"
					}
				]
			}
		},
		{
			"id": 1039,
			"name": "DropzoneRootProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 193,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"name": "DropzoneRootPropsBase"
					},
					{
						"type": "reference",
						"name": "FrozenDropzoneRootProps"
					}
				]
			}
		},
		{
			"id": 1491,
			"name": "FieldCheckboxValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 322,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 1643,
			"name": "FieldCheckboxesValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 379,
					"character": 12
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 1390,
			"name": "FieldCurrencyValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 299,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 2756,
				"name": "BaseNumberInputValueType"
			}
		},
		{
			"id": 1426,
			"name": "FieldDateValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 310,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": null
					},
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"name": "Date"
					}
				]
			}
		},
		{
			"id": 2164,
			"name": "FieldGroupSelectValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 551,
					"character": 12
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 2030,
			"name": "FieldMultiSelectValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 537,
					"character": 12
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 1354,
			"name": "FieldNumberValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 287,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 2756,
				"name": "BaseNumberInputValueType"
			}
		},
		{
			"id": 1890,
			"name": "FieldPillSelectValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 523,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1596,
			"name": "FieldRadioButtonsValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 361,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1555,
			"name": "FieldRichTextValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 349,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 1699,
			"name": "FieldSelectGroupHeader",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 403,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"id": 1698,
						"name": "FieldSelectGroupItem"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1700,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1701,
									"name": "isGroupHeader",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Form/Form.types.ts",
											"line": 404,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1701
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 403,
									"character": 60
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 1698,
			"name": "FieldSelectGroupItem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 402,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1697,
			"name": "FieldSelectOptionItem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 401,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 1696,
				"name": "FieldSelectValueType"
			}
		},
		{
			"id": 1696,
			"name": "FieldSelectValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 400,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1527,
			"name": "FieldTextAreaValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 338,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 1328,
			"name": "FieldTextValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 276,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 2312,
			"name": "FieldTieredSelectValueType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 565,
					"character": 12
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "any"
				}
			}
		},
		{
			"id": 970,
			"name": "FileRejectionReason",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 13,
					"character": 12
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "literal",
					"value": "code"
				},
				"objectType": {
					"type": "reference",
					"name": "FileRejectionError"
				}
			}
		},
		{
			"id": 2752,
			"name": "FillDecimalScaleVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 11,
					"character": 12
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 2747,
							"name": "fillDecimalScaleVariant"
						}
					}
				},
				"objectType": {
					"type": "query",
					"queryType": {
						"type": "reference",
						"id": 2747,
						"name": "fillDecimalScaleVariant"
					}
				}
			}
		},
		{
			"id": 3589,
			"name": "FlexAlign",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 29,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "baseline"
					},
					{
						"type": "literal",
						"value": "center"
					},
					{
						"type": "literal",
						"value": "flex-end"
					},
					{
						"type": "literal",
						"value": "flex-start"
					},
					{
						"type": "literal",
						"value": "normal"
					},
					{
						"type": "literal",
						"value": "stretch"
					}
				]
			}
		},
		{
			"id": 3592,
			"name": "FlexAlignContent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 48,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 3591,
						"name": "FlexJustify"
					},
					{
						"type": "literal",
						"value": "stretch"
					}
				]
			}
		},
		{
			"id": 3590,
			"name": "FlexDirection",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 37,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "column"
					},
					{
						"type": "literal",
						"value": "column-reverse"
					},
					{
						"type": "literal",
						"value": "row"
					},
					{
						"type": "literal",
						"value": "row-reverse"
					}
				]
			}
		},
		{
			"id": 3591,
			"name": "FlexJustify",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 39,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "center"
					},
					{
						"type": "literal",
						"value": "flex-end"
					},
					{
						"type": "literal",
						"value": "flex-start"
					},
					{
						"type": "literal",
						"value": "normal"
					},
					{
						"type": "literal",
						"value": "space-around"
					},
					{
						"type": "literal",
						"value": "space-between"
					},
					{
						"type": "literal",
						"value": "space-evenly"
					}
				]
			}
		},
		{
			"id": 3593,
			"name": "FlexWrap",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 50,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "nowrap"
					},
					{
						"type": "literal",
						"value": "wrap-reverse"
					},
					{
						"type": "literal",
						"value": "wrap"
					}
				]
			}
		},
		{
			"id": 933,
			"name": "FlyoutOptionId",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 41,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "indexedAccess",
						"indexType": {
							"type": "literal",
							"value": "id"
						},
						"objectType": {
							"type": "reference",
							"id": 928,
							"name": "FlyoutOption"
						}
					},
					{
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 895,
							"name": "rootId"
						}
					}
				]
			}
		},
		{
			"id": 1183,
			"name": "FontSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Font/Font.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "xs"
					},
					{
						"type": "literal",
						"value": "table"
					},
					{
						"type": "literal",
						"value": "sm"
					},
					{
						"type": "literal",
						"value": "md"
					},
					{
						"type": "literal",
						"value": "lg"
					}
				]
			}
		},
		{
			"id": 1184,
			"name": "FontStyle",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Font/Font.types.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": ""
					},
					{
						"type": "literal",
						"value": "italic"
					}
				]
			}
		},
		{
			"id": 1185,
			"name": "FontVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Font/Font.types.ts",
					"line": 7,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "primary"
					},
					{
						"type": "literal",
						"value": "secondary"
					},
					{
						"type": "literal",
						"value": "tertiary"
					},
					{
						"type": "literal",
						"value": "tableHeader"
					},
					{
						"type": "literal",
						"value": "white"
					},
					{
						"type": "literal",
						"value": "blue"
					},
					{
						"type": "literal",
						"value": "red"
					}
				]
			}
		},
		{
			"id": 1186,
			"name": "FontWeight",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Font/Font.types.ts",
					"line": 16,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "regular"
					},
					{
						"type": "literal",
						"value": "medium"
					},
					{
						"type": "literal",
						"value": "bold"
					}
				]
			}
		},
		{
			"id": 1107,
			"name": "GetGroupId",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 18,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1108,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 18,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 1109,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1110,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1090,
										"name": "GridItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 1091,
			"name": "GetId",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 10,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1092,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 10,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 1093,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1094,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1090,
										"name": "GridItem"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					]
				}
			}
		},
		{
			"id": 1103,
			"name": "GetThumbnailLabel",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 16,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1104,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 16,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 1105,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1106,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1090,
										"name": "GridItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			}
		},
		{
			"id": 1099,
			"name": "GetThumbnailSource",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 14,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1100,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 14,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 1101,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1102,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1090,
										"name": "GridItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			}
		},
		{
			"id": 1095,
			"name": "GetThumnbnailName",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 12,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1096,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
							"line": 12,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 1097,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1098,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1090,
										"name": "GridItem"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			}
		},
		{
			"id": 1090,
			"name": "GridItem",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/FileSelect/GridSource/GridSource.types.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 2452,
			"name": "GroupOption",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 9,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 3827,
			"name": "GutterByBreakpoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 37,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					},
					{
						"type": "reference",
						"name": "Spacing"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 2556,
			"name": "IconSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Icon/Icon.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Size"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "inherit"
							},
							{
								"type": "literal",
								"value": "sm"
							},
							{
								"type": "literal",
								"value": "md"
							},
							{
								"type": "literal",
								"value": "lg"
							}
						]
					}
				],
				"name": "Extract"
			}
		},
		{
			"id": 2756,
			"name": "InputValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 19,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 3573,
			"name": "Intent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
					"line": 4,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "h1"
					},
					{
						"type": "literal",
						"value": "h2"
					},
					{
						"type": "literal",
						"value": "h3"
					},
					{
						"type": "literal",
						"value": "body"
					},
					{
						"type": "literal",
						"value": "small"
					}
				]
			}
		},
		{
			"id": 1198,
			"name": "Layout",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 27,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "wxp"
					},
					{
						"type": "literal",
						"value": "traditional"
					}
				]
			}
		},
		{
			"id": 709,
			"name": "LegacyButtonVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 7,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "primary"
					},
					{
						"type": "literal",
						"value": "secondary"
					},
					{
						"type": "literal",
						"value": "tertiary"
					},
					{
						"type": "literal",
						"value": "action-outline"
					},
					{
						"type": "literal",
						"value": "error-outline"
					},
					{
						"type": "literal",
						"value": "success-outline"
					},
					{
						"type": "literal",
						"value": "info-outline"
					},
					{
						"type": "literal",
						"value": "dropdown"
					},
					{
						"type": "literal",
						"value": "dropdown-secondary"
					},
					{
						"type": "literal",
						"value": "form"
					}
				]
			}
		},
		{
			"id": 2746,
			"name": "Locale",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				]
			}
		},
		{
			"id": 3595,
			"name": "MarginSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 54,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Size"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "auto"
							},
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "xs"
							},
							{
								"type": "literal",
								"value": "sm"
							},
							{
								"type": "literal",
								"value": "md"
							},
							{
								"type": "literal",
								"value": "lg"
							},
							{
								"type": "literal",
								"value": "xl"
							},
							{
								"type": "literal",
								"value": "xxl"
							}
						]
					}
				],
				"name": "Extract"
			}
		},
		{
			"id": 2691,
			"name": "ModalPlacement",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "top"
					},
					{
						"type": "literal",
						"value": "center"
					}
				]
			}
		},
		{
			"id": 2692,
			"name": "ModalWidth",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Modal/Modal.types.ts",
					"line": 4,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "sm"
					},
					{
						"type": "literal",
						"value": "md"
					},
					{
						"type": "literal",
						"value": "lg"
					},
					{
						"type": "literal",
						"value": "xl"
					}
				]
			}
		},
		{
			"id": 3833,
			"name": "NextGridBreakpoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 58,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "mobileLg"
					},
					{
						"type": "literal",
						"value": "tabletSm"
					},
					{
						"type": "literal",
						"value": "tabletMd"
					},
					{
						"type": "literal",
						"value": "tabletLg"
					},
					{
						"type": "literal",
						"value": "desktopSm"
					},
					{
						"type": "literal",
						"value": "desktopMd"
					}
				]
			}
		},
		{
			"id": 3825,
			"name": "NextGridColSpan",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 33,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": 1
					},
					{
						"type": "literal",
						"value": 2
					},
					{
						"type": "literal",
						"value": 3
					},
					{
						"type": "literal",
						"value": 4
					},
					{
						"type": "literal",
						"value": 5
					},
					{
						"type": "literal",
						"value": 6
					},
					{
						"type": "literal",
						"value": 7
					},
					{
						"type": "literal",
						"value": 8
					},
					{
						"type": "literal",
						"value": 9
					},
					{
						"type": "literal",
						"value": 10
					},
					{
						"type": "literal",
						"value": 11
					},
					{
						"type": "literal",
						"value": 12
					}
				]
			}
		},
		{
			"id": 3313,
			"name": "NodeId",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tree/Tree.types.ts",
					"line": 9,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 3828,
			"name": "OffsetByBreakpoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 39,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					},
					{
						"type": "intrinsic",
						"name": "number"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 2451,
			"name": "Option",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 7,
					"character": 12
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			}
		},
		{
			"id": 1309,
			"name": "OptionList",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 230,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 1318,
					"name": "OptionShape",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1310,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 1317,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 256,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1318,
									"name": "OptionShape"
								}
							}
						},
						{
							"id": 1311,
							"name": "getId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 242,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 1312,
									"name": "getId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<div>\n The id of an option{' '}\n <Code>{'(option: OptionItem) => string | number'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.id'}</Code>\n</div>"
									},
									"parameters": [
										{
											"id": 1313,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1318,
												"name": "OptionShape"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							]
						},
						{
							"id": 1314,
							"name": "getLabel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 255,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 1315,
									"name": "getLabel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<div>\n The display label of an option\n <Code>{'(option: OptionItem) => string'}</Code>\n</div>\n<br />\n<div>\n Default:\n <Code>{'(option: OptionItem) => option.label || option.name'}</Code>\n</div>"
									},
									"parameters": [
										{
											"id": 1316,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1318,
												"name": "OptionShape"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1317
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1311,
								1314
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 230,
							"character": 44
						}
					]
				}
			},
			"extendedBy": [
				{
					"type": "reference",
					"id": 1702,
					"name": "GroupedOptionsConfig"
				}
			]
		},
		{
			"id": 3596,
			"name": "PaddingSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 59,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Size"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "xs"
							},
							{
								"type": "literal",
								"value": "sm"
							},
							{
								"type": "literal",
								"value": "md"
							},
							{
								"type": "literal",
								"value": "lg"
							},
							{
								"type": "literal",
								"value": "xl"
							},
							{
								"type": "literal",
								"value": "xxl"
							}
						]
					}
				],
				"name": "Extract"
			}
		},
		{
			"id": 2453,
			"name": "PickedMultiSelectProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/GroupSelect/GroupSelect.types.ts",
					"line": 11,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 295,
						"name": "MultiSelectProps"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "value"
							},
							{
								"type": "literal",
								"value": "options"
							},
							{
								"type": "literal",
								"value": "getId"
							},
							{
								"type": "literal",
								"value": "getLabel"
							},
							{
								"type": "literal",
								"value": "onChange"
							},
							{
								"type": "literal",
								"value": "optionRenderer"
							},
							{
								"type": "literal",
								"value": "getGroup"
							},
							{
								"type": "literal",
								"value": "groupHeaderRenderer"
							}
						]
					}
				],
				"name": "Omit"
			},
			"extendedBy": [
				{
					"type": "reference",
					"id": 2454,
					"name": "GroupSelectProps"
				}
			]
		},
		{
			"id": 2880,
			"name": "PillColor",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Pill/Pill.types.ts",
					"line": 1,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "blue"
					},
					{
						"type": "literal",
						"value": "gray"
					},
					{
						"type": "literal",
						"value": "green"
					},
					{
						"type": "literal",
						"value": "red"
					},
					{
						"type": "literal",
						"value": "yellow"
					}
				]
			}
		},
		{
			"id": 530,
			"name": "PlaceholderProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
					"line": 70,
					"character": 12
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 517,
								"name": "ThumbnailProps"
							},
							{
								"type": "literal",
								"value": "src"
							}
						],
						"name": "Omit"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 531,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 532,
									"name": "filename",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Unless variant is provided, filename is used\nto choose a placeholder icon based on extension.\nE.g. for 'filename=\"panda.png\"', image {' '}\nvariant will be used"
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
											"line": 77,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 533,
									"name": "variant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
											"line": 78,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "DocumentIconVariant"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										532,
										533
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Thumbnail/Thumbnail.types.ts",
									"line": 70,
									"character": 61
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 2783,
			"name": "PressedKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 111,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					}
				]
			}
		},
		{
			"id": 2574,
			"name": "Ref",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 2578,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 2575,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/MenuImperative/MenuImperative.types.ts",
									"line": 7,
									"character": 5
								}
							],
							"signatures": [
								{
									"id": 2576,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2577,
											"name": "instance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 2578,
														"name": "T"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 2578,
										"name": "T"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						],
						"name": "React.MutableRefObject"
					},
					{
						"type": "literal",
						"value": null
					}
				]
			}
		},
		{
			"id": 3152,
			"name": "SearchablePath",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
					"line": 11,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 3158,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 3153,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 3154,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
									"line": 12,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3155,
							"name": "node",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
									"line": 13,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 3158,
								"name": "T"
							}
						},
						{
							"id": 3156,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
									"line": 14,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 3158,
									"name": "T"
								}
							}
						},
						{
							"id": 3157,
							"name": "pathKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
									"line": 15,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3154,
								3155,
								3156,
								3157
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/core-react/src/components/TieredDropdown/TieredDropdown.types.ts",
							"line": 11,
							"character": 38
						}
					]
				}
			}
		},
		{
			"id": 752,
			"name": "SegmentType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 4,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "day"
					},
					{
						"type": "literal",
						"value": "month"
					},
					{
						"type": "literal",
						"value": "year"
					}
				]
			}
		},
		{
			"id": 789,
			"name": "Segments",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DateInput/DateInput.types.ts",
					"line": 44,
					"character": 12
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "key",
				"parameterType": {
					"type": "reference",
					"id": 752,
					"name": "SegmentType"
				},
				"templateType": {
					"type": "reference",
					"name": "SegmentConfig"
				}
			}
		},
		{
			"id": 3068,
			"name": "SelectPlacement",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Select/Select.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 842,
				"name": "DropdownPlacement"
			}
		},
		{
			"id": 725,
			"name": "ShadowStrength",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Card/Card.types.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": 0
					},
					{
						"type": "literal",
						"value": 1
					},
					{
						"type": "literal",
						"value": 2
					},
					{
						"type": "literal",
						"value": 3
					},
					{
						"type": "literal",
						"value": 4
					}
				]
			}
		},
		{
			"id": 710,
			"name": "SizingObject",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Button/Button.types.ts",
					"line": 19,
					"character": 12
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "key",
				"parameterType": {
					"type": "reference",
					"id": 707,
					"name": "ButtonSizes"
				},
				"templateType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 3829,
			"name": "SpacingByBreakpoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 41,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					},
					{
						"type": "reference",
						"name": "Spacing"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 3826,
			"name": "SpanByBreakpoint",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/NextGrid/NextGrid.types.ts",
					"line": 35,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 3833,
						"name": "NextGridBreakpoint"
					},
					{
						"type": "reference",
						"id": 3825,
						"name": "NextGridColSpan"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 3115,
			"name": "SpinnerSize",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
					"line": 4,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "xs"
					},
					{
						"type": "literal",
						"value": "sm"
					},
					{
						"type": "literal",
						"value": "md"
					},
					{
						"type": "literal",
						"value": "lg"
					}
				]
			}
		},
		{
			"id": 3116,
			"name": "SpinnerVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Spinner/Spinner.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": ""
					},
					{
						"type": "literal",
						"value": "light"
					}
				]
			}
		},
		{
			"id": 916,
			"name": "State",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 18,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 917,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 919,
							"name": "expanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 20,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ExpandedItem"
								}
							}
						},
						{
							"id": 918,
							"name": "highlighted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 19,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 928,
								"name": "FlyoutOption"
							}
						},
						{
							"id": 922,
							"name": "isFocused",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 23,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 921,
							"name": "isMouseOver",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 22,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 923,
							"name": "isOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 24,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 920,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
									"line": 21,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 928,
									"name": "FlyoutOption"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								919,
								918,
								922,
								921,
								923,
								920
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
							"line": 18,
							"character": 20
						}
					]
				}
			}
		},
		{
			"id": 3594,
			"name": "TextAlign",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/Box/Box.types.ts",
					"line": 52,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "center"
					},
					{
						"type": "literal",
						"value": "left"
					},
					{
						"type": "literal",
						"value": "right"
					}
				]
			}
		},
		{
			"id": 3274,
			"name": "TileProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Tile/Tile.types.ts",
					"line": 59,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 3263,
						"name": "SelectableTileProps"
					},
					{
						"type": "reference",
						"id": 3251,
						"name": "InteractableTileProps"
					},
					{
						"type": "reference",
						"id": 3257,
						"name": "LinkTileProps"
					}
				]
			}
		},
		{
			"id": 3275,
			"name": "ToastVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Toast/Toast.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "error"
					},
					{
						"type": "literal",
						"value": "success"
					}
				]
			}
		},
		{
			"id": 3844,
			"name": "ToolHeaderBadgeVariant",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/ToolHeader/ToolHeader.types.ts",
					"line": 3,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "beta"
					},
					{
						"type": "literal",
						"value": "new"
					},
					{
						"type": "literal",
						"value": "trial"
					}
				]
			}
		},
		{
			"id": 3565,
			"name": "TypeaheadChangeEvent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typeahead/Typeahead.types.ts",
					"line": 1,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLInputElement"
							}
						],
						"name": "React.ChangeEvent"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						],
						"name": "React.MouseEvent"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLInputElement"
							}
						],
						"name": "React.KeyboardEvent"
					}
				]
			}
		},
		{
			"id": 3566,
			"name": "TypeaheadInputProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typeahead/Typeahead.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "literal",
								"value": "input"
							}
						],
						"name": "React.ComponentPropsWithoutRef"
					},
					{
						"type": "literal",
						"value": "onChange"
					}
				],
				"name": "Omit"
			}
		},
		{
			"id": 1235,
			"name": "ValueComponentProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 118,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 1238,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1236,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 1237,
							"name": "field",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 118,
									"character": 49
								}
							],
							"type": {
								"type": "reference",
								"id": 1220,
								"typeArguments": [
									{
										"type": "reference",
										"id": 1238,
										"name": "Value"
									}
								],
								"name": "FieldAPI"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1237
							]
						}
					],
					"sources": [
						{
							"fileName": "packages/core-react/src/components/Form/Form.types.ts",
							"line": 118,
							"character": 47
						}
					]
				}
			},
			"extendedBy": [
				{
					"type": "reference",
					"id": 1329,
					"name": "FieldTextComponentProps"
				},
				{
					"type": "reference",
					"id": 1355,
					"name": "FieldNumberComponentProps"
				},
				{
					"type": "reference",
					"id": 1391,
					"name": "FieldCurrencyComponentProps"
				},
				{
					"type": "reference",
					"id": 1427,
					"name": "FieldDateComponentProps"
				},
				{
					"type": "reference",
					"id": 1492,
					"name": "FieldCheckboxComponentProps"
				},
				{
					"type": "reference",
					"id": 1528,
					"name": "FieldTextAreaComponentProps"
				},
				{
					"type": "reference",
					"id": 1556,
					"name": "FieldRichTextComponentProps"
				},
				{
					"type": "reference",
					"id": 1597,
					"name": "FieldRadioButtonsComponentProps"
				},
				{
					"type": "reference",
					"id": 1644,
					"name": "FieldCheckboxesComponentProps"
				},
				{
					"type": "reference",
					"id": 1724,
					"name": "FieldSelectComponentProps"
				},
				{
					"type": "reference",
					"id": 1891,
					"name": "FieldPillSelectComponentProps"
				},
				{
					"type": "reference",
					"id": 2031,
					"name": "FieldMultiSelectComponentProps"
				},
				{
					"type": "reference",
					"id": 2165,
					"name": "FieldGroupSelectComponentProps"
				},
				{
					"type": "reference",
					"id": 2313,
					"name": "FieldTieredSelectComponentProps"
				}
			]
		},
		{
			"id": 1195,
			"name": "ValueInArray",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 25,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 1196,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"id": 1196,
						"name": "V"
					}
				},
				"objectType": {
					"type": "reference",
					"id": 1196,
					"name": "V"
				}
			}
		},
		{
			"id": 1197,
			"name": "View",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 26,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "create"
					},
					{
						"type": "literal",
						"value": "read"
					},
					{
						"type": "literal",
						"value": "update"
					}
				]
			}
		},
		{
			"id": 1322,
			"name": "ViewFieldProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Form/Form.types.ts",
					"line": 266,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 1325,
					"name": "Value",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 1326,
					"name": "FieldTypeProps",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 1290,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1325,
								"name": "Value"
							}
						],
						"name": "FieldProps"
					}
				},
				{
					"id": 1327,
					"name": "ComponentProps",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 1235,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1325,
								"name": "Value"
							}
						],
						"name": "ValueComponentProps"
					}
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1326,
										"name": "FieldTypeProps"
									},
									{
										"type": "literal",
										"value": "children"
									}
								],
								"name": "Omit"
							}
						],
						"name": "Partial"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 1323,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1324,
									"name": "children",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "packages/core-react/src/components/Form/Form.types.ts",
											"line": 271,
											"character": 2
										}
									],
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "children"
										},
										"objectType": {
											"type": "reference",
											"id": 1245,
											"typeArguments": [
												{
													"type": "reference",
													"id": 1325,
													"name": "Value"
												},
												{
													"type": "reference",
													"id": 1327,
													"name": "ComponentProps"
												}
											],
											"name": "BaseFieldProps"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1324
									]
								}
							],
							"sources": [
								{
									"fileName": "packages/core-react/src/components/Form/Form.types.ts",
									"line": 270,
									"character": 48
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 3574,
			"name": "Weight",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Typography/Typography.types.ts",
					"line": 6,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "regular"
					},
					{
						"type": "literal",
						"value": "semibold"
					},
					{
						"type": "literal",
						"value": "bold"
					}
				]
			}
		},
		{
			"id": 3693,
			"name": "Actions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 37,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3694,
			"name": "Banner",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 48,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3695,
			"name": "Body",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 59,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3696,
			"name": "Breadcrumbs",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 80,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3697,
			"name": "Card",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 94,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3720,
			"name": "DetailPage",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "deprecated",
						"text": "\n\nThe `DetailPage` component has been deprecated and will be removed removed\nin a future version. Please use `NextDetailPage` instead.\n"
					},
					{
						"tag": "deprecatedsince",
						"text": "10.20.0\n"
					},
					{
						"tag": "see",
						"text": "https://core.procore.com/latest/web/layout/next-detail-page/react/\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 439,
					"character": 13
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 3685,
										"name": "DetailPageProps"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "RefAttributes"
									}
								]
							}
						],
						"name": "ForwardRefExoticComponent"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 3721,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 3722,
									"name": "Actions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3723,
									"name": "Banner",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3724,
									"name": "Body",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3725,
									"name": "Breadcrumbs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3726,
									"name": "Card",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3727,
									"name": "DetailTabs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3732,
									"name": "Footer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3733,
									"name": "FooterNotation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3728,
									"name": "Header",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 3729,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3730,
																	"name": "transparent",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
																			"line": 123,
																			"character": 12
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		3730
																	]
																}
															]
														}
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3731,
									"name": "Heading",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3734,
									"name": "Section",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 3706,
														"name": "SectionProps"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								},
								{
									"id": 3735,
									"name": "Title",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"id": 617,
														"name": "Props"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3722,
										3723,
										3724,
										3725,
										3726,
										3727,
										3732,
										3733,
										3728,
										3731,
										3734,
										3735
									]
								}
							]
						}
					}
				]
			},
			"defaultValue": "..."
		},
		{
			"id": 3698,
			"name": "DetailTabs",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 111,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3703,
			"name": "Footer",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 149,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3704,
			"name": "FooterNotation",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 192,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3699,
			"name": "Header",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 121,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3700,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3701,
											"name": "transparent",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
													"line": 123,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												3701
											]
										}
									]
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3702,
			"name": "Heading",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 138,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3584,
			"name": "IconLayout",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/IconLayout/IconLayout.tsx",
					"line": 53,
					"character": 13
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "DivAttributes"
									},
									{
										"type": "reference",
										"name": "IconLayoutProps"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "RefAttributes"
									}
								]
							}
						],
						"name": "ForwardRefExoticComponent"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 3585,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 3586,
									"name": "Icons",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"name": "DivAttributes"
													},
													{
														"type": "reference",
														"name": "IconLayoutProps"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLDivElement"
															}
														],
														"name": "RefAttributes"
													}
												]
											}
										],
										"name": "ForwardRefExoticComponent"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3586
									]
								}
							]
						}
					}
				]
			},
			"defaultValue": "..."
		},
		{
			"id": 2837,
			"name": "OverlayTrigger",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
					"line": 94,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 2810,
								"name": "OverlayTriggerProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3719,
			"name": "Section",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 291,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 3706,
								"name": "SectionProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3705,
			"name": "Title",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 206,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 617,
								"name": "Props"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 3690,
			"name": "ViewContext",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/layouts/DetailPage/DetailPage.tsx",
					"line": 21,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reflection",
						"declaration": {
							"id": 3691,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 3692,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'md'"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										3692
									]
								}
							]
						}
					}
				],
				"name": "Context"
			},
			"defaultValue": "..."
		},
		{
			"id": 1014,
			"name": "dropErrors",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 121,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1015,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 1017,
							"name": "fileAmount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "FILE_AMOUNT_ERROR"
							},
							"defaultValue": "'FILE_AMOUNT_ERROR'"
						},
						{
							"id": 1016,
							"name": "fileType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "FILE_TYPE_ERROR"
							},
							"defaultValue": "'FILE_TYPE_ERROR'"
						},
						{
							"id": 1018,
							"name": "maxFileSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "MAX_FILE_SIZE"
							},
							"defaultValue": "'MAX_FILE_SIZE'"
						},
						{
							"id": 1019,
							"name": "minFileSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "MIN_FILE_SIZE"
							},
							"defaultValue": "'MIN_FILE_SIZE'"
						},
						{
							"id": 1021,
							"name": "multipleErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "MULTIPLE_ERRORS"
							},
							"defaultValue": "'MULTIPLE_ERRORS'"
						},
						{
							"id": 1020,
							"name": "oneFileAtATime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "ONE_FILE_AT_A_TIME"
							},
							"defaultValue": "'ONE_FILE_AT_A_TIME'"
						},
						{
							"id": 1022,
							"name": "reset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "RESET"
							},
							"defaultValue": "'RESET'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1017,
								1016,
								1018,
								1019,
								1021,
								1020,
								1022
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 971,
			"name": "fileRejectionReason",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Dropzone/Dropzone.types.ts",
					"line": 15,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"id": 970,
						"name": "FileRejectionReason"
					}
				],
				"name": "Record"
			},
			"defaultValue": "..."
		},
		{
			"id": 2747,
			"name": "fillDecimalScaleVariant",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/NumberInput/NumberInput.types.ts",
					"line": 5,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2748,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 2751,
							"name": "always",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "always"
							},
							"defaultValue": "'always'"
						},
						{
							"id": 2749,
							"name": "none",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "none"
							},
							"defaultValue": "'none'"
						},
						{
							"id": 2750,
							"name": "onBlur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "onBlur"
							},
							"defaultValue": "'onBlur'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2751,
								2749,
								2750
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 2735,
			"name": "notationVariant",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/Notation/Notation.types.ts",
					"line": 3,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2736,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 2737,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "error"
							},
							"defaultValue": "'error'"
						},
						{
							"id": 2738,
							"name": "none",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": ""
							},
							"defaultValue": "''"
						},
						{
							"id": 2739,
							"name": "pagination",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "pagination"
							},
							"defaultValue": "'pagination'"
						},
						{
							"id": 2740,
							"name": "required",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "required"
							},
							"defaultValue": "'required'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2737,
								2738,
								2739,
								2740
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 895,
			"name": "rootId",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/DropdownFlyout/DropdownFlyout.types.ts",
					"line": 5,
					"character": 13
				}
			],
			"type": {
				"type": "literal",
				"value": "ROOT_ID"
			},
			"defaultValue": "'ROOT_ID'"
		},
		{
			"id": 3038,
			"name": "segmentedControllerSegmentVariant",
			"kind": 32,
			"kindString": "Variable",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "deprecated",
						"text": "Please use the `active` and `disabled` props\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/SegmentedController/SegmentedController.types.ts",
					"line": 6,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 3039,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 3040,
							"name": "active",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "active"
							},
							"defaultValue": "'active'"
						},
						{
							"id": 3041,
							"name": "disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": "disabled"
							},
							"defaultValue": "'disabled'"
						},
						{
							"id": 3042,
							"name": "none",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "literal",
								"value": ""
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3040,
								3041,
								3042
							]
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 2788,
			"name": "CloseOnFocus",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
					"line": 235,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 2789,
					"name": "CloseOnFocus",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 2790,
							"name": "__namedParameters",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2791,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2792,
											"name": "hide",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"sources": [
												{
													"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
													"line": 235,
													"character": 41
												}
											],
											"signatures": [
												{
													"id": 2793,
													"name": "hide",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2794,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												2792
											]
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "Element"
					}
				}
			]
		},
		{
			"id": 2838,
			"name": "consumeOverlayTrigger",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
					"line": 265,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 2839,
					"name": "consumeOverlayTrigger",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Please use `useOverlayTriggerContext()` instead\n"
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2840,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2841,
									"name": "hide",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2842,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2843,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2844,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 2845,
									"name": "show",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2846,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2847,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2848,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 2849,
									"name": "toggle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2850,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2851,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2852,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2841,
										2845,
										2849
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2795,
			"name": "useOverlayTriggerContext",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/core-react/src/components/OverlayTrigger/OverlayTrigger.tsx",
					"line": 252,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 2796,
					"name": "useOverlayTriggerContext",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2797,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2798,
									"name": "hide",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2799,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2800,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2801,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 2802,
									"name": "show",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2803,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2804,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2805,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"id": 2806,
									"name": "toggle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2807,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2808,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2809,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2798,
										2802,
										2806
									]
								}
							]
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				3655,
				629,
				639,
				634,
				622,
				645,
				655,
				676,
				672,
				687,
				682,
				1245,
				400,
				64,
				372,
				3621,
				702,
				698,
				711,
				21,
				1,
				377,
				727,
				734,
				600,
				2709,
				891,
				742,
				987,
				996,
				497,
				2784,
				3396,
				773,
				767,
				794,
				753,
				423,
				819,
				89,
				3316,
				3685,
				3804,
				872,
				947,
				881,
				924,
				843,
				2644,
				1000,
				972,
				1005,
				1045,
				1062,
				1072,
				1076,
				1080,
				1067,
				1082,
				693,
				1220,
				1492,
				1503,
				1644,
				1662,
				1210,
				1391,
				1407,
				1427,
				1452,
				2165,
				2231,
				2031,
				2090,
				1355,
				1371,
				1891,
				1953,
				1290,
				1597,
				1612,
				1556,
				1569,
				1724,
				1800,
				1528,
				1534,
				1329,
				1334,
				2313,
				2374,
				1086,
				114,
				171,
				1149,
				3768,
				3610,
				3736,
				934,
				962,
				940,
				928,
				659,
				1187,
				2647,
				1199,
				1319,
				1228,
				1111,
				383,
				2534,
				2454,
				389,
				1702,
				393,
				2639,
				3240,
				3236,
				406,
				3512,
				2561,
				410,
				2553,
				3251,
				3159,
				2623,
				2628,
				594,
				607,
				3290,
				3321,
				718,
				488,
				2569,
				3257,
				3808,
				175,
				3598,
				2680,
				262,
				241,
				257,
				245,
				236,
				207,
				2594,
				222,
				2733,
				2723,
				2703,
				2693,
				295,
				982,
				25,
				612,
				3830,
				3820,
				3816,
				3824,
				58,
				3314,
				2741,
				2757,
				3089,
				2519,
				2636,
				2810,
				3604,
				3839,
				3834,
				3836,
				2873,
				2875,
				2865,
				2856,
				2853,
				2861,
				2778,
				2897,
				2883,
				2889,
				2881,
				2900,
				2963,
				2966,
				355,
				2976,
				617,
				1041,
				2982,
				2584,
				2989,
				598,
				2557,
				1136,
				3006,
				2995,
				3025,
				3706,
				3043,
				3054,
				3062,
				3095,
				448,
				3069,
				103,
				3263,
				2579,
				2775,
				3126,
				3117,
				3133,
				501,
				366,
				511,
				416,
				3137,
				493,
				3141,
				517,
				3171,
				534,
				3246,
				3276,
				3281,
				3285,
				3845,
				3850,
				3298,
				3303,
				1268,
				3350,
				3415,
				3465,
				3400,
				3558,
				3417,
				3424,
				3547,
				1141,
				3567,
				3575,
				2771,
				3323,
				2753,
				666,
				85,
				81
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				896,
				621,
				643,
				644,
				654,
				681,
				680,
				3597,
				707,
				708,
				724,
				726,
				2450,
				1239,
				3803,
				790,
				3587,
				3588,
				1024,
				1023,
				842,
				969,
				1030,
				1040,
				1039,
				1491,
				1643,
				1390,
				1426,
				2164,
				2030,
				1354,
				1890,
				1596,
				1555,
				1699,
				1698,
				1697,
				1696,
				1527,
				1328,
				2312,
				970,
				2752,
				3589,
				3592,
				3590,
				3591,
				3593,
				933,
				1183,
				1184,
				1185,
				1186,
				1107,
				1091,
				1103,
				1099,
				1095,
				1090,
				2452,
				3827,
				2556,
				2756,
				3573,
				1198,
				709,
				2746,
				3595,
				2691,
				2692,
				3833,
				3825,
				3313,
				3828,
				2451,
				1309,
				3596,
				2453,
				2880,
				530,
				2783,
				2574,
				3152,
				752,
				789,
				3068,
				725,
				710,
				3829,
				3826,
				3115,
				3116,
				916,
				3594,
				3274,
				3275,
				3844,
				3565,
				3566,
				1235,
				1195,
				1197,
				1322,
				3574
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				3693,
				3694,
				3695,
				3696,
				3697,
				3720,
				3698,
				3703,
				3704,
				3699,
				3702,
				3584,
				2837,
				3719,
				3705,
				3690,
				1014,
				971,
				2747,
				2735,
				895,
				3038
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				2788,
				2838,
				2795
			]
		}
	],
	"sources": [
		{
			"fileName": "packages/core-react/src/utils/propsTypedoc.ts",
			"line": 1,
			"character": 0
		}
	]
}